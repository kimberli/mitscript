case ADC_AL_IMM8:
	adc(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_AX_IMM16:
	adc(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case ADC_EAX_IMM32:
	adc(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_M16_IMM16:
	adc(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case ADC_M16_IMM8:
	adc(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_M16_R16:
	adc(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case ADC_M32_IMM32:
	adc(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_M32_IMM8:
	adc(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_M32_R32:
	adc(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case ADC_M64_IMM32:
	adc(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_M64_IMM8:
	adc(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_M64_R64:
	adc(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case ADC_M8_IMM8:
	adc(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_M8_R8:
	adc(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case ADC_M8_RH:
	adc(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case ADC_R16_IMM16:
	adc(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case ADC_R16_IMM8:
	adc(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_R16_M16:
	adc(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case ADC_R16_R16:
	adc(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case ADC_R16_R16_1:
	adc_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case ADC_R32_IMM32:
	adc(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_R32_IMM8:
	adc(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_R32_M32:
	adc(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case ADC_R32_R32:
	adc(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case ADC_R32_R32_1:
	adc_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case ADC_R64_IMM32:
	adc(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_R64_IMM8:
	adc(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_R64_M64:
	adc(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case ADC_R64_R64:
	adc(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case ADC_R64_R64_1:
	adc_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case ADC_R8_IMM8:
	adc(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_R8_M8:
	adc(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case ADC_R8_R8:
	adc(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case ADC_R8_R8_1:
	adc_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case ADC_R8_RH:
	adc(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case ADC_R8_RH_1:
	adc_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case ADC_RAX_IMM32:
	adc(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case ADC_RH_IMM8:
	adc(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case ADC_RH_M8:
	adc(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case ADC_RH_R8:
	adc(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case ADC_RH_R8_1:
	adc_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case ADC_RH_RH:
	adc(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ADC_RH_RH_1:
	adc_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ADD_AL_IMM8:
	add(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_AX_IMM16:
	add(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case ADD_EAX_IMM32:
	add(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_M16_IMM16:
	add(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case ADD_M16_IMM8:
	add(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_M16_R16:
	add(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case ADD_M32_IMM32:
	add(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_M32_IMM8:
	add(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_M32_R32:
	add(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case ADD_M64_IMM32:
	add(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_M64_IMM8:
	add(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_M64_R64:
	add(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case ADD_M8_IMM8:
	add(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_M8_R8:
	add(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case ADD_M8_RH:
	add(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case ADD_R16_IMM16:
	add(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case ADD_R16_IMM8:
	add(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_R16_M16:
	add(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case ADD_R16_R16:
	add(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case ADD_R16_R16_1:
	add_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case ADD_R32_IMM32:
	add(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_R32_IMM8:
	add(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_R32_M32:
	add(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case ADD_R32_R32:
	add(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case ADD_R32_R32_1:
	add_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case ADD_R64_IMM32:
	add(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_R64_IMM8:
	add(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_R64_M64:
	add(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case ADD_R64_R64:
	add(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case ADD_R64_R64_1:
	add_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case ADD_R8_IMM8:
	add(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_R8_M8:
	add(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case ADD_R8_R8:
	add(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case ADD_R8_R8_1:
	add_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case ADD_R8_RH:
	add(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case ADD_R8_RH_1:
	add_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case ADD_RAX_IMM32:
	add(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case ADD_RH_IMM8:
	add(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case ADD_RH_M8:
	add(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case ADD_RH_R8:
	add(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case ADD_RH_R8_1:
	add_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case ADD_RH_RH:
	add(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ADD_RH_RH_1:
	add_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ADDPD_XMM_M128:
	addpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ADDPD_XMM_XMM:
	addpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ADDPS_XMM_M128:
	addps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ADDPS_XMM_XMM:
	addps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ADDSD_XMM_M64:
	addsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case ADDSD_XMM_XMM:
	addsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ADDSS_XMM_M32:
	addss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case ADDSS_XMM_XMM:
	addss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ADDSUBPD_XMM_M128:
	addsubpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ADDSUBPD_XMM_XMM:
	addsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ADDSUBPS_XMM_M128:
	addsubps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ADDSUBPS_XMM_XMM:
	addsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESDEC_XMM_M128:
	aesdec(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case AESDEC_XMM_XMM:
	aesdec(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESDECLAST_XMM_M128:
	aesdeclast(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case AESDECLAST_XMM_XMM:
	aesdeclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESENC_XMM_M128:
	aesenc(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case AESENC_XMM_XMM:
	aesenc(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESENCLAST_XMM_M128:
	aesenclast(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case AESENCLAST_XMM_XMM:
	aesenclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESIMC_XMM_M128:
	aesimc(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case AESIMC_XMM_XMM:
	aesimc(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case AESKEYGENASSIST_XMM_M128_IMM8:
	aeskeygenassist(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case AESKEYGENASSIST_XMM_XMM_IMM8:
	aeskeygenassist(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case AND_AL_IMM8:
	and_(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case AND_AX_IMM16:
	and_(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case AND_EAX_IMM32:
	and_(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case AND_M16_IMM16:
	and_(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case AND_M16_IMM8:
	and_(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case AND_M16_R16:
	and_(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case AND_M32_IMM32:
	and_(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case AND_M32_IMM8:
	and_(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case AND_M32_R32:
	and_(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case AND_M64_IMM32:
	and_(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case AND_M64_IMM8:
	and_(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case AND_M64_R64:
	and_(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case AND_M8_IMM8:
	and_(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case AND_M8_R8:
	and_(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case AND_M8_RH:
	and_(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case AND_R16_IMM16:
	and_(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case AND_R16_IMM8:
	and_(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case AND_R16_M16:
	and_(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case AND_R16_R16:
	and_(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case AND_R16_R16_1:
	and__1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case AND_R32_IMM32:
	and_(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case AND_R32_IMM8:
	and_(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case AND_R32_M32:
	and_(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case AND_R32_R32:
	and_(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case AND_R32_R32_1:
	and__1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case AND_R64_IMM32:
	and_(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case AND_R64_IMM8:
	and_(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case AND_R64_M64:
	and_(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case AND_R64_R64:
	and_(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case AND_R64_R64_1:
	and__1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case AND_R8_IMM8:
	and_(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case AND_R8_M8:
	and_(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case AND_R8_R8:
	and_(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case AND_R8_R8_1:
	and__1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case AND_R8_RH:
	and_(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case AND_R8_RH_1:
	and__1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case AND_RAX_IMM32:
	and_(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case AND_RH_IMM8:
	and_(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case AND_RH_M8:
	and_(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case AND_RH_R8:
	and_(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case AND_RH_R8_1:
	and__1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case AND_RH_RH:
	and_(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case AND_RH_RH_1:
	and__1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ANDN_R32_R32_M32:
	andn(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<M32>(2));
	break;
case ANDN_R32_R32_R32:
	andn(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case ANDN_R64_R64_M64:
	andn(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<M64>(2));
	break;
case ANDN_R64_R64_R64:
	andn(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case ANDNPD_XMM_M128:
	andnpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ANDNPD_XMM_XMM:
	andnpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ANDNPS_XMM_M128:
	andnps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ANDNPS_XMM_XMM:
	andnps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ANDPD_XMM_M128:
	andpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ANDPD_XMM_XMM:
	andpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ANDPS_XMM_M128:
	andps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ANDPS_XMM_XMM:
	andps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case BEXTR_R32_M32_R32:
	bextr(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<R32>(2));
	break;
case BEXTR_R32_R32_R32:
	bextr(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case BEXTR_R64_M64_R64:
	bextr(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<R64>(2));
	break;
case BEXTR_R64_R64_R64:
	bextr(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case BLENDPD_XMM_M128_IMM8:
	blendpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case BLENDPD_XMM_XMM_IMM8:
	blendpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case BLENDPS_XMM_M128_IMM8:
	blendps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case BLENDPS_XMM_XMM_IMM8:
	blendps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case BLENDVPD_XMM_M128_XMM0:
	blendvpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Xmm0>(2));
	break;
case BLENDVPD_XMM_XMM_XMM0:
	blendvpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm0>(2));
	break;
case BLENDVPS_XMM_M128_XMM0:
	blendvps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Xmm0>(2));
	break;
case BLENDVPS_XMM_XMM_XMM0:
	blendvps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm0>(2));
	break;
case BLSI_R32_M32:
	blsi(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case BLSI_R32_R32:
	blsi(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BLSI_R64_M64:
	blsi(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case BLSI_R64_R64:
	blsi(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BLSMSK_R32_M32:
	blsmsk(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case BLSMSK_R32_R32:
	blsmsk(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BLSMSK_R64_M64:
	blsmsk(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case BLSMSK_R64_R64:
	blsmsk(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BLSR_R32_M32:
	blsr(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case BLSR_R32_R32:
	blsr(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BLSR_R64_M64:
	blsr(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case BLSR_R64_R64:
	blsr(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BSF_R16_M16:
	bsf(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case BSF_R16_R16:
	bsf(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BSF_R32_M32:
	bsf(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case BSF_R32_R32:
	bsf(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BSF_R64_M64:
	bsf(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case BSF_R64_R64:
	bsf(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BSR_R16_M16:
	bsr(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case BSR_R16_R16:
	bsr(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BSR_R32_M32:
	bsr(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case BSR_R32_R32:
	bsr(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BSR_R64_M64:
	bsr(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case BSR_R64_R64:
	bsr(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BSWAP_R32:
	bswap(instr.get_operand<R32>(0));
	break;
case BSWAP_R64:
	bswap(instr.get_operand<R64>(0));
	break;
case BT_M16_IMM8:
	bt(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case BT_M16_R16:
	bt(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case BT_M32_IMM8:
	bt(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case BT_M32_R32:
	bt(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case BT_M64_IMM8:
	bt(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case BT_M64_R64:
	bt(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case BT_R16_IMM8:
	bt(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case BT_R16_R16:
	bt(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BT_R32_IMM8:
	bt(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case BT_R32_R32:
	bt(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BT_R64_IMM8:
	bt(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case BT_R64_R64:
	bt(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BTC_M16_IMM8:
	btc(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_M16_R16:
	btc(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case BTC_M32_IMM8:
	btc(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_M32_R32:
	btc(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case BTC_M64_IMM8:
	btc(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_M64_R64:
	btc(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case BTC_R16_IMM8:
	btc(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_R16_R16:
	btc(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BTC_R32_IMM8:
	btc(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_R32_R32:
	btc(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BTC_R64_IMM8:
	btc(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case BTC_R64_R64:
	btc(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BTR_M16_IMM8:
	btr(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_M16_R16:
	btr(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case BTR_M32_IMM8:
	btr(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_M32_R32:
	btr(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case BTR_M64_IMM8:
	btr(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_M64_R64:
	btr(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case BTR_R16_IMM8:
	btr(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_R16_R16:
	btr(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BTR_R32_IMM8:
	btr(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_R32_R32:
	btr(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BTR_R64_IMM8:
	btr(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case BTR_R64_R64:
	btr(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BTS_M16_IMM8:
	bts(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_M16_R16:
	bts(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case BTS_M32_IMM8:
	bts(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_M32_R32:
	bts(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case BTS_M64_IMM8:
	bts(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_M64_R64:
	bts(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case BTS_R16_IMM8:
	bts(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_R16_R16:
	bts(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case BTS_R32_IMM8:
	bts(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_R32_R32:
	bts(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case BTS_R64_IMM8:
	bts(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case BTS_R64_R64:
	bts(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case BZHI_R32_M32_R32:
	bzhi(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<R32>(2));
	break;
case BZHI_R32_R32_R32:
	bzhi(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case BZHI_R64_M64_R64:
	bzhi(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<R64>(2));
	break;
case BZHI_R64_R64_R64:
	bzhi(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case CALL_FARPTR1616:
	call(instr.get_operand<FarPtr1616>(0));
	break;
case CALL_FARPTR1632:
	call(instr.get_operand<FarPtr1632>(0));
	break;
case CALL_FARPTR1664:
	call(instr.get_operand<FarPtr1664>(0));
	break;
case CALL_LABEL:
	call(instr.get_operand<Label>(0));
	break;
case CALL_M64:
	call(instr.get_operand<M64>(0));
	break;
case CALL_R64:
	call(instr.get_operand<R64>(0));
	break;
case CALL_REL32:
	call(instr.get_operand<Rel32>(0));
	break;
case CBW:
	cbw();
	break;
case CDQ:
	cdq();
	break;
case CDQE:
	cdqe();
	break;
case CLC:
	clc();
	break;
case CLD:
	cld();
	break;
case CLFLUSH_M8:
	clflush(instr.get_operand<M8>(0));
	break;
case CLI:
	cli();
	break;
case CMC:
	cmc();
	break;
case CMOVA_R16_M16:
	cmova(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVA_R16_R16:
	cmova(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVA_R32_M32:
	cmova(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVA_R32_R32:
	cmova(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVA_R64_M64:
	cmova(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVA_R64_R64:
	cmova(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVAE_R16_M16:
	cmovae(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVAE_R16_R16:
	cmovae(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVAE_R32_M32:
	cmovae(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVAE_R32_R32:
	cmovae(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVAE_R64_M64:
	cmovae(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVAE_R64_R64:
	cmovae(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVB_R16_M16:
	cmovb(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVB_R16_R16:
	cmovb(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVB_R32_M32:
	cmovb(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVB_R32_R32:
	cmovb(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVB_R64_M64:
	cmovb(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVB_R64_R64:
	cmovb(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVBE_R16_M16:
	cmovbe(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVBE_R16_R16:
	cmovbe(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVBE_R32_M32:
	cmovbe(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVBE_R32_R32:
	cmovbe(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVBE_R64_M64:
	cmovbe(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVBE_R64_R64:
	cmovbe(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVC_R16_M16:
	cmovc(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVC_R16_R16:
	cmovc(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVC_R32_M32:
	cmovc(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVC_R32_R32:
	cmovc(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVC_R64_M64:
	cmovc(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVC_R64_R64:
	cmovc(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVE_R16_M16:
	cmove(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVE_R16_R16:
	cmove(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVE_R32_M32:
	cmove(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVE_R32_R32:
	cmove(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVE_R64_M64:
	cmove(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVE_R64_R64:
	cmove(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVG_R16_M16:
	cmovg(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVG_R16_R16:
	cmovg(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVG_R32_M32:
	cmovg(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVG_R32_R32:
	cmovg(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVG_R64_M64:
	cmovg(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVG_R64_R64:
	cmovg(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVGE_R16_M16:
	cmovge(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVGE_R16_R16:
	cmovge(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVGE_R32_M32:
	cmovge(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVGE_R32_R32:
	cmovge(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVGE_R64_M64:
	cmovge(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVGE_R64_R64:
	cmovge(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVL_R16_M16:
	cmovl(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVL_R16_R16:
	cmovl(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVL_R32_M32:
	cmovl(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVL_R32_R32:
	cmovl(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVL_R64_M64:
	cmovl(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVL_R64_R64:
	cmovl(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVLE_R16_M16:
	cmovle(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVLE_R16_R16:
	cmovle(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVLE_R32_M32:
	cmovle(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVLE_R32_R32:
	cmovle(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVLE_R64_M64:
	cmovle(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVLE_R64_R64:
	cmovle(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNA_R16_M16:
	cmovna(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNA_R16_R16:
	cmovna(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNA_R32_M32:
	cmovna(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNA_R32_R32:
	cmovna(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNA_R64_M64:
	cmovna(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNA_R64_R64:
	cmovna(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNAE_R16_M16:
	cmovnae(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNAE_R16_R16:
	cmovnae(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNAE_R32_M32:
	cmovnae(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNAE_R32_R32:
	cmovnae(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNAE_R64_M64:
	cmovnae(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNAE_R64_R64:
	cmovnae(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNB_R16_M16:
	cmovnb(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNB_R16_R16:
	cmovnb(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNB_R32_M32:
	cmovnb(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNB_R32_R32:
	cmovnb(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNB_R64_M64:
	cmovnb(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNB_R64_R64:
	cmovnb(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNBE_R16_M16:
	cmovnbe(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNBE_R16_R16:
	cmovnbe(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNBE_R32_M32:
	cmovnbe(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNBE_R32_R32:
	cmovnbe(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNBE_R64_M64:
	cmovnbe(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNBE_R64_R64:
	cmovnbe(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNC_R16_M16:
	cmovnc(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNC_R16_R16:
	cmovnc(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNC_R32_M32:
	cmovnc(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNC_R32_R32:
	cmovnc(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNC_R64_M64:
	cmovnc(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNC_R64_R64:
	cmovnc(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNE_R16_M16:
	cmovne(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNE_R16_R16:
	cmovne(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNE_R32_M32:
	cmovne(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNE_R32_R32:
	cmovne(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNE_R64_M64:
	cmovne(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNE_R64_R64:
	cmovne(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNG_R16_M16:
	cmovng(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNG_R16_R16:
	cmovng(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNG_R32_M32:
	cmovng(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNG_R32_R32:
	cmovng(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNG_R64_M64:
	cmovng(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNG_R64_R64:
	cmovng(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNGE_R16_M16:
	cmovnge(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNGE_R16_R16:
	cmovnge(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNGE_R32_M32:
	cmovnge(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNGE_R32_R32:
	cmovnge(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNGE_R64_M64:
	cmovnge(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNGE_R64_R64:
	cmovnge(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNL_R16_M16:
	cmovnl(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNL_R16_R16:
	cmovnl(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNL_R32_M32:
	cmovnl(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNL_R32_R32:
	cmovnl(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNL_R64_M64:
	cmovnl(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNL_R64_R64:
	cmovnl(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNLE_R16_M16:
	cmovnle(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNLE_R16_R16:
	cmovnle(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNLE_R32_M32:
	cmovnle(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNLE_R32_R32:
	cmovnle(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNLE_R64_M64:
	cmovnle(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNLE_R64_R64:
	cmovnle(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNO_R16_M16:
	cmovno(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNO_R16_R16:
	cmovno(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNO_R32_M32:
	cmovno(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNO_R32_R32:
	cmovno(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNO_R64_M64:
	cmovno(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNO_R64_R64:
	cmovno(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNP_R16_M16:
	cmovnp(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNP_R16_R16:
	cmovnp(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNP_R32_M32:
	cmovnp(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNP_R32_R32:
	cmovnp(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNP_R64_M64:
	cmovnp(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNP_R64_R64:
	cmovnp(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNS_R16_M16:
	cmovns(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNS_R16_R16:
	cmovns(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNS_R32_M32:
	cmovns(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNS_R32_R32:
	cmovns(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNS_R64_M64:
	cmovns(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNS_R64_R64:
	cmovns(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVNZ_R16_M16:
	cmovnz(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVNZ_R16_R16:
	cmovnz(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVNZ_R32_M32:
	cmovnz(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVNZ_R32_R32:
	cmovnz(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVNZ_R64_M64:
	cmovnz(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVNZ_R64_R64:
	cmovnz(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVO_R16_M16:
	cmovo(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVO_R16_R16:
	cmovo(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVO_R32_M32:
	cmovo(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVO_R32_R32:
	cmovo(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVO_R64_M64:
	cmovo(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVO_R64_R64:
	cmovo(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVP_R16_M16:
	cmovp(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVP_R16_R16:
	cmovp(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVP_R32_M32:
	cmovp(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVP_R32_R32:
	cmovp(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVP_R64_M64:
	cmovp(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVP_R64_R64:
	cmovp(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVPE_R16_M16:
	cmovpe(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVPE_R16_R16:
	cmovpe(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVPE_R32_M32:
	cmovpe(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVPE_R32_R32:
	cmovpe(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVPE_R64_M64:
	cmovpe(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVPE_R64_R64:
	cmovpe(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVPO_R16_M16:
	cmovpo(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVPO_R16_R16:
	cmovpo(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVPO_R32_M32:
	cmovpo(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVPO_R32_R32:
	cmovpo(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVPO_R64_M64:
	cmovpo(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVPO_R64_R64:
	cmovpo(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVS_R16_M16:
	cmovs(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVS_R16_R16:
	cmovs(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVS_R32_M32:
	cmovs(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVS_R32_R32:
	cmovs(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVS_R64_M64:
	cmovs(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVS_R64_R64:
	cmovs(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMOVZ_R16_M16:
	cmovz(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMOVZ_R16_R16:
	cmovz(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMOVZ_R32_M32:
	cmovz(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMOVZ_R32_R32:
	cmovz(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMOVZ_R64_M64:
	cmovz(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMOVZ_R64_R64:
	cmovz(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMP_AL_IMM8:
	cmp(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_AX_IMM16:
	cmp(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case CMP_EAX_IMM32:
	cmp(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_M16_IMM16:
	cmp(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case CMP_M16_IMM8:
	cmp(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_M16_R16:
	cmp(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case CMP_M32_IMM32:
	cmp(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_M32_IMM8:
	cmp(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_M32_R32:
	cmp(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case CMP_M64_IMM32:
	cmp(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_M64_IMM8:
	cmp(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_M64_R64:
	cmp(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case CMP_M8_IMM8:
	cmp(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_M8_R8:
	cmp(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case CMP_M8_RH:
	cmp(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case CMP_R16_IMM16:
	cmp(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case CMP_R16_IMM8:
	cmp(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_R16_M16:
	cmp(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case CMP_R16_R16:
	cmp(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMP_R16_R16_1:
	cmp_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMP_R32_IMM32:
	cmp(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_R32_IMM8:
	cmp(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_R32_M32:
	cmp(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CMP_R32_R32:
	cmp(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMP_R32_R32_1:
	cmp_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMP_R64_IMM32:
	cmp(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_R64_IMM8:
	cmp(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_R64_M64:
	cmp(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CMP_R64_R64:
	cmp(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMP_R64_R64_1:
	cmp_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMP_R8_IMM8:
	cmp(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_R8_M8:
	cmp(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case CMP_R8_R8:
	cmp(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case CMP_R8_R8_1:
	cmp_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case CMP_R8_RH:
	cmp(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case CMP_R8_RH_1:
	cmp_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case CMP_RAX_IMM32:
	cmp(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case CMP_RH_IMM8:
	cmp(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case CMP_RH_M8:
	cmp(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case CMP_RH_R8:
	cmp(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case CMP_RH_R8_1:
	cmp_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case CMP_RH_RH:
	cmp(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case CMP_RH_RH_1:
	cmp_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case CMPPD_XMM_M128_IMM8:
	cmppd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case CMPPD_XMM_XMM_IMM8:
	cmppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case CMPPS_XMM_M128_IMM8:
	cmpps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case CMPPS_XMM_XMM_IMM8:
	cmpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case CMPS_M16_M16:
	cmps(instr.get_operand<M16>(0), instr.get_operand<M16>(1));
	break;
case CMPS_M32_M32:
	cmps(instr.get_operand<M32>(0), instr.get_operand<M32>(1));
	break;
case CMPS_M64_M64:
	cmps(instr.get_operand<M64>(0), instr.get_operand<M64>(1));
	break;
case CMPS_M8_M8:
	cmps(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case CMPSB:
	cmpsb();
	break;
case CMPSD:
	cmpsd();
	break;
case CMPSD_XMM_M64_IMM8:
	cmpsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case CMPSD_XMM_XMM_IMM8:
	cmpsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case CMPSQ:
	cmpsq();
	break;
case CMPSS_XMM_M32_IMM8:
	cmpss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case CMPSS_XMM_XMM_IMM8:
	cmpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case CMPSW:
	cmpsw();
	break;
case CMPXCHG_M16_R16:
	cmpxchg(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case CMPXCHG_M32_R32:
	cmpxchg(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case CMPXCHG_M64_R64:
	cmpxchg(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case CMPXCHG_M8_R8:
	cmpxchg(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case CMPXCHG_M8_RH:
	cmpxchg(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case CMPXCHG_R16_R16:
	cmpxchg(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case CMPXCHG_R32_R32:
	cmpxchg(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CMPXCHG_R64_R64:
	cmpxchg(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CMPXCHG_R8_R8:
	cmpxchg(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case CMPXCHG_R8_RH:
	cmpxchg(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case CMPXCHG_RH_R8:
	cmpxchg(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case CMPXCHG_RH_RH:
	cmpxchg(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case CMPXCHG16B_M128:
	cmpxchg16b(instr.get_operand<M128>(0));
	break;
case CMPXCHG8B_M64:
	cmpxchg8b(instr.get_operand<M64>(0));
	break;
case COMISD_XMM_M64:
	comisd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case COMISD_XMM_XMM:
	comisd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case COMISS_XMM_M32:
	comiss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case COMISS_XMM_XMM:
	comiss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CPUID:
	cpuid();
	break;
case CQO:
	cqo();
	break;
case CRC32_R32_M16:
	crc32(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case CRC32_R32_M32:
	crc32(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CRC32_R32_M8:
	crc32(instr.get_operand<R32>(0), instr.get_operand<M8>(1));
	break;
case CRC32_R32_R16:
	crc32(instr.get_operand<R32>(0), instr.get_operand<R16>(1));
	break;
case CRC32_R32_R32:
	crc32(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case CRC32_R32_R8:
	crc32(instr.get_operand<R32>(0), instr.get_operand<R8>(1));
	break;
case CRC32_R32_RH:
	crc32(instr.get_operand<R32>(0), instr.get_operand<Rh>(1));
	break;
case CRC32_R64_M64:
	crc32(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CRC32_R64_M8:
	crc32(instr.get_operand<R64>(0), instr.get_operand<M8>(1));
	break;
case CRC32_R64_R64:
	crc32(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case CRC32_R64_R8:
	crc32(instr.get_operand<R64>(0), instr.get_operand<R8>(1));
	break;
case CVTDQ2PD_XMM_M64:
	cvtdq2pd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTDQ2PD_XMM_XMM:
	cvtdq2pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTDQ2PS_XMM_M128:
	cvtdq2ps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTDQ2PS_XMM_XMM:
	cvtdq2ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPD2DQ_XMM_M128:
	cvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTPD2DQ_XMM_XMM:
	cvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPD2PI_MM_M128:
	cvtpd2pi(instr.get_operand<Mm>(0), instr.get_operand<M128>(1));
	break;
case CVTPD2PI_MM_XMM:
	cvtpd2pi(instr.get_operand<Mm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPD2PS_XMM_M128:
	cvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTPD2PS_XMM_XMM:
	cvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPI2PD_XMM_M64:
	cvtpi2pd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTPI2PD_XMM_MM:
	cvtpi2pd(instr.get_operand<Xmm>(0), instr.get_operand<Mm>(1));
	break;
case CVTPI2PS_XMM_M64:
	cvtpi2ps(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTPI2PS_XMM_MM:
	cvtpi2ps(instr.get_operand<Xmm>(0), instr.get_operand<Mm>(1));
	break;
case CVTPS2DQ_XMM_M128:
	cvtps2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTPS2DQ_XMM_XMM:
	cvtps2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPS2PD_XMM_M64:
	cvtps2pd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTPS2PD_XMM_XMM:
	cvtps2pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTPS2PI_MM_M64:
	cvtps2pi(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case CVTPS2PI_MM_XMM:
	cvtps2pi(instr.get_operand<Mm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSD2SI_R32_M64:
	cvtsd2si(instr.get_operand<R32>(0), instr.get_operand<M64>(1));
	break;
case CVTSD2SI_R32_XMM:
	cvtsd2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSD2SI_R64_M64:
	cvtsd2si(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CVTSD2SI_R64_XMM:
	cvtsd2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSD2SS_XMM_M64:
	cvtsd2ss(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTSD2SS_XMM_XMM:
	cvtsd2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSI2SD_XMM_M32:
	cvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case CVTSI2SD_XMM_M64:
	cvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTSI2SD_XMM_R32:
	cvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1));
	break;
case CVTSI2SD_XMM_R64:
	cvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<R64>(1));
	break;
case CVTSI2SS_XMM_M32:
	cvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case CVTSI2SS_XMM_M64:
	cvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case CVTSI2SS_XMM_R32:
	cvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1));
	break;
case CVTSI2SS_XMM_R64:
	cvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<R64>(1));
	break;
case CVTSS2SD_XMM_M32:
	cvtss2sd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case CVTSS2SD_XMM_XMM:
	cvtss2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSS2SI_R32_M32:
	cvtss2si(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CVTSS2SI_R32_XMM:
	cvtss2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case CVTSS2SI_R64_M32:
	cvtss2si(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case CVTSS2SI_R64_XMM:
	cvtss2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTPD2DQ_XMM_M128:
	cvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTTPD2DQ_XMM_XMM:
	cvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTPD2PI_MM_M128:
	cvttpd2pi(instr.get_operand<Mm>(0), instr.get_operand<M128>(1));
	break;
case CVTTPD2PI_MM_XMM:
	cvttpd2pi(instr.get_operand<Mm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTPS2DQ_XMM_M128:
	cvttps2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case CVTTPS2DQ_XMM_XMM:
	cvttps2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTPS2PI_MM_M64:
	cvttps2pi(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case CVTTPS2PI_MM_XMM:
	cvttps2pi(instr.get_operand<Mm>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTSD2SI_R32_M64:
	cvttsd2si(instr.get_operand<R32>(0), instr.get_operand<M64>(1));
	break;
case CVTTSD2SI_R32_XMM:
	cvttsd2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTSD2SI_R64_M64:
	cvttsd2si(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case CVTTSD2SI_R64_XMM:
	cvttsd2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTSS2SI_R32_M32:
	cvttss2si(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case CVTTSS2SI_R32_XMM:
	cvttss2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case CVTTSS2SI_R64_M32:
	cvttss2si(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case CVTTSS2SI_R64_XMM:
	cvttss2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case CWD:
	cwd();
	break;
case CWDE:
	cwde();
	break;
case DEC_M16:
	dec(instr.get_operand<M16>(0));
	break;
case DEC_M32:
	dec(instr.get_operand<M32>(0));
	break;
case DEC_M64:
	dec(instr.get_operand<M64>(0));
	break;
case DEC_M8:
	dec(instr.get_operand<M8>(0));
	break;
case DEC_R16:
	dec(instr.get_operand<R16>(0));
	break;
case DEC_R32:
	dec(instr.get_operand<R32>(0));
	break;
case DEC_R64:
	dec(instr.get_operand<R64>(0));
	break;
case DEC_R8:
	dec(instr.get_operand<R8>(0));
	break;
case DEC_RH:
	dec(instr.get_operand<Rh>(0));
	break;
case DIV_M16:
	div(instr.get_operand<M16>(0));
	break;
case DIV_M32:
	div(instr.get_operand<M32>(0));
	break;
case DIV_M64:
	div(instr.get_operand<M64>(0));
	break;
case DIV_M8:
	div(instr.get_operand<M8>(0));
	break;
case DIV_R16:
	div(instr.get_operand<R16>(0));
	break;
case DIV_R32:
	div(instr.get_operand<R32>(0));
	break;
case DIV_R64:
	div(instr.get_operand<R64>(0));
	break;
case DIV_R8:
	div(instr.get_operand<R8>(0));
	break;
case DIV_RH:
	div(instr.get_operand<Rh>(0));
	break;
case DIVPD_XMM_M128:
	divpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case DIVPD_XMM_XMM:
	divpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case DIVPS_XMM_M128:
	divps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case DIVPS_XMM_XMM:
	divps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case DIVSD_XMM_M64:
	divsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case DIVSD_XMM_XMM:
	divsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case DIVSS_XMM_M32:
	divss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case DIVSS_XMM_XMM:
	divss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case DPPD_XMM_M128_IMM8:
	dppd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case DPPD_XMM_XMM_IMM8:
	dppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case DPPS_XMM_M128_IMM8:
	dpps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case DPPS_XMM_XMM_IMM8:
	dpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case EMMS:
	emms();
	break;
case ENTER_IMM8_IMM16:
	enter(instr.get_operand<Imm8>(0), instr.get_operand<Imm16>(1));
	break;
case ENTER_ONE_IMM16:
	enter(instr.get_operand<One>(0), instr.get_operand<Imm16>(1));
	break;
case ENTER_ZERO_IMM16:
	enter(instr.get_operand<Zero>(0), instr.get_operand<Imm16>(1));
	break;
case EXTRACTPS_M32_XMM_IMM8:
	extractps(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case EXTRACTPS_R32_XMM_IMM8:
	extractps(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case EXTRACTPS_R64_XMM_IMM8:
	extractps(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case F2XM1:
	f2xm1();
	break;
case FABS:
	fabs();
	break;
case FADD_M32FP:
	fadd(instr.get_operand<M32Fp>(0));
	break;
case FADD_M64FP:
	fadd(instr.get_operand<M64Fp>(0));
	break;
case FADD_ST_ST0:
	fadd(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FADD_ST0_ST:
	fadd(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FADDP:
	faddp();
	break;
case FADDP_ST_ST0:
	faddp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FBLD_M80BCD:
	fbld(instr.get_operand<M80Bcd>(0));
	break;
case FBSTP_M80BCD:
	fbstp(instr.get_operand<M80Bcd>(0));
	break;
case FCHS:
	fchs();
	break;
case FCLEX:
	fclex();
	break;
case FCMOVB_ST0_ST:
	fcmovb(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVBE_ST0_ST:
	fcmovbe(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVE_ST0_ST:
	fcmove(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVNB_ST0_ST:
	fcmovnb(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVNBE_ST0_ST:
	fcmovnbe(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVNE_ST0_ST:
	fcmovne(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVNU_ST0_ST:
	fcmovnu(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCMOVU_ST0_ST:
	fcmovu(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCOM:
	fcom();
	break;
case FCOM_M32FP:
	fcom(instr.get_operand<M32Fp>(0));
	break;
case FCOM_M64FP:
	fcom(instr.get_operand<M64Fp>(0));
	break;
case FCOM_ST:
	fcom(instr.get_operand<St>(0));
	break;
case FCOMI_ST0_ST:
	fcomi(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCOMIP_ST0_ST:
	fcomip(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FCOMP:
	fcomp();
	break;
case FCOMP_M32FP:
	fcomp(instr.get_operand<M32Fp>(0));
	break;
case FCOMP_M64FP:
	fcomp(instr.get_operand<M64Fp>(0));
	break;
case FCOMP_ST:
	fcomp(instr.get_operand<St>(0));
	break;
case FCOMPP:
	fcompp();
	break;
case FCOS:
	fcos();
	break;
case FDECSTP:
	fdecstp();
	break;
case FDIV_M32FP:
	fdiv(instr.get_operand<M32Fp>(0));
	break;
case FDIV_M64FP:
	fdiv(instr.get_operand<M64Fp>(0));
	break;
case FDIV_ST_ST0:
	fdiv(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FDIV_ST0_ST:
	fdiv(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FDIVP:
	fdivp();
	break;
case FDIVP_ST_ST0:
	fdivp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FDIVR_M32FP:
	fdivr(instr.get_operand<M32Fp>(0));
	break;
case FDIVR_M64FP:
	fdivr(instr.get_operand<M64Fp>(0));
	break;
case FDIVR_ST_ST0:
	fdivr(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FDIVR_ST0_ST:
	fdivr(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FDIVRP:
	fdivrp();
	break;
case FDIVRP_ST_ST0:
	fdivrp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FFREE_ST:
	ffree(instr.get_operand<St>(0));
	break;
case FIADD_M16INT:
	fiadd(instr.get_operand<M16Int>(0));
	break;
case FIADD_M32INT:
	fiadd(instr.get_operand<M32Int>(0));
	break;
case FICOM_M16INT:
	ficom(instr.get_operand<M16Int>(0));
	break;
case FICOM_M32INT:
	ficom(instr.get_operand<M32Int>(0));
	break;
case FICOMP_M16INT:
	ficomp(instr.get_operand<M16Int>(0));
	break;
case FICOMP_M32INT:
	ficomp(instr.get_operand<M32Int>(0));
	break;
case FIDIV_M16INT:
	fidiv(instr.get_operand<M16Int>(0));
	break;
case FIDIV_M32INT:
	fidiv(instr.get_operand<M32Int>(0));
	break;
case FIDIVR_M16INT:
	fidivr(instr.get_operand<M16Int>(0));
	break;
case FIDIVR_M32INT:
	fidivr(instr.get_operand<M32Int>(0));
	break;
case FILD_M16INT:
	fild(instr.get_operand<M16Int>(0));
	break;
case FILD_M32INT:
	fild(instr.get_operand<M32Int>(0));
	break;
case FILD_M64INT:
	fild(instr.get_operand<M64Int>(0));
	break;
case FIMUL_M16INT:
	fimul(instr.get_operand<M16Int>(0));
	break;
case FIMUL_M32INT:
	fimul(instr.get_operand<M32Int>(0));
	break;
case FINCSTP:
	fincstp();
	break;
case FINIT:
	finit();
	break;
case FIST_M16INT:
	fist(instr.get_operand<M16Int>(0));
	break;
case FIST_M32INT:
	fist(instr.get_operand<M32Int>(0));
	break;
case FISTP_M16INT:
	fistp(instr.get_operand<M16Int>(0));
	break;
case FISTP_M32INT:
	fistp(instr.get_operand<M32Int>(0));
	break;
case FISTP_M64INT:
	fistp(instr.get_operand<M64Int>(0));
	break;
case FISTTP_M16INT:
	fisttp(instr.get_operand<M16Int>(0));
	break;
case FISTTP_M32INT:
	fisttp(instr.get_operand<M32Int>(0));
	break;
case FISTTP_M64INT:
	fisttp(instr.get_operand<M64Int>(0));
	break;
case FISUB_M16INT:
	fisub(instr.get_operand<M16Int>(0));
	break;
case FISUB_M32INT:
	fisub(instr.get_operand<M32Int>(0));
	break;
case FISUBR_M16INT:
	fisubr(instr.get_operand<M16Int>(0));
	break;
case FISUBR_M32INT:
	fisubr(instr.get_operand<M32Int>(0));
	break;
case FLD_M32FP:
	fld(instr.get_operand<M32Fp>(0));
	break;
case FLD_M64FP:
	fld(instr.get_operand<M64Fp>(0));
	break;
case FLD_M80FP:
	fld(instr.get_operand<M80Fp>(0));
	break;
case FLD_ST:
	fld(instr.get_operand<St>(0));
	break;
case FLD1:
	fld1();
	break;
case FLDCW_M2BYTE:
	fldcw(instr.get_operand<M2Byte>(0));
	break;
case FLDENV_M28BYTE:
	fldenv(instr.get_operand<M28Byte>(0));
	break;
case FLDL2E:
	fldl2e();
	break;
case FLDL2T:
	fldl2t();
	break;
case FLDLG2:
	fldlg2();
	break;
case FLDLN2:
	fldln2();
	break;
case FLDPI:
	fldpi();
	break;
case FLDZ:
	fldz();
	break;
case FMUL_M32FP:
	fmul(instr.get_operand<M32Fp>(0));
	break;
case FMUL_M64FP:
	fmul(instr.get_operand<M64Fp>(0));
	break;
case FMUL_ST_ST0:
	fmul(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FMUL_ST0_ST:
	fmul(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FMULP:
	fmulp();
	break;
case FMULP_ST_ST0:
	fmulp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FNCLEX:
	fnclex();
	break;
case FNINIT:
	fninit();
	break;
case FNOP:
	fnop();
	break;
case FNSAVE_M108BYTE:
	fnsave(instr.get_operand<M108Byte>(0));
	break;
case FNSTCW_M2BYTE:
	fnstcw(instr.get_operand<M2Byte>(0));
	break;
case FNSTENV_M28BYTE:
	fnstenv(instr.get_operand<M28Byte>(0));
	break;
case FNSTSW_AX:
	fnstsw(instr.get_operand<Ax>(0));
	break;
case FNSTSW_M2BYTE:
	fnstsw(instr.get_operand<M2Byte>(0));
	break;
case FPATAN:
	fpatan();
	break;
case FPREM:
	fprem();
	break;
case FPREM1:
	fprem1();
	break;
case FPTAN:
	fptan();
	break;
case FRNDINT:
	frndint();
	break;
case FRSTOR_M108BYTE:
	frstor(instr.get_operand<M108Byte>(0));
	break;
case FSAVE_M108BYTE:
	fsave(instr.get_operand<M108Byte>(0));
	break;
case FSCALE:
	fscale();
	break;
case FSIN:
	fsin();
	break;
case FSINCOS:
	fsincos();
	break;
case FSQRT:
	fsqrt();
	break;
case FST_M32FP:
	fst(instr.get_operand<M32Fp>(0));
	break;
case FST_M64FP:
	fst(instr.get_operand<M64Fp>(0));
	break;
case FST_ST:
	fst(instr.get_operand<St>(0));
	break;
case FSTCW_M2BYTE:
	fstcw(instr.get_operand<M2Byte>(0));
	break;
case FSTENV_M28BYTE:
	fstenv(instr.get_operand<M28Byte>(0));
	break;
case FSTP_M32FP:
	fstp(instr.get_operand<M32Fp>(0));
	break;
case FSTP_M64FP:
	fstp(instr.get_operand<M64Fp>(0));
	break;
case FSTP_M80FP:
	fstp(instr.get_operand<M80Fp>(0));
	break;
case FSTP_ST:
	fstp(instr.get_operand<St>(0));
	break;
case FSTSW_AX:
	fstsw(instr.get_operand<Ax>(0));
	break;
case FSTSW_M2BYTE:
	fstsw(instr.get_operand<M2Byte>(0));
	break;
case FSUB_M32FP:
	fsub(instr.get_operand<M32Fp>(0));
	break;
case FSUB_M64FP:
	fsub(instr.get_operand<M64Fp>(0));
	break;
case FSUB_ST_ST0:
	fsub(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FSUB_ST0_ST:
	fsub(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FSUBP:
	fsubp();
	break;
case FSUBP_ST_ST0:
	fsubp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FSUBR_M32FP:
	fsubr(instr.get_operand<M32Fp>(0));
	break;
case FSUBR_M64FP:
	fsubr(instr.get_operand<M64Fp>(0));
	break;
case FSUBR_ST_ST0:
	fsubr(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FSUBR_ST0_ST:
	fsubr(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FSUBRP:
	fsubrp();
	break;
case FSUBRP_ST_ST0:
	fsubrp(instr.get_operand<St>(0), instr.get_operand<St0>(1));
	break;
case FTST:
	ftst();
	break;
case FUCOM:
	fucom();
	break;
case FUCOM_ST:
	fucom(instr.get_operand<St>(0));
	break;
case FUCOMI_ST0_ST:
	fucomi(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FUCOMIP_ST0_ST:
	fucomip(instr.get_operand<St0>(0), instr.get_operand<St>(1));
	break;
case FUCOMP:
	fucomp();
	break;
case FUCOMP_ST:
	fucomp(instr.get_operand<St>(0));
	break;
case FUCOMPP:
	fucompp();
	break;
case FWAIT:
	fwait();
	break;
case FXAM:
	fxam();
	break;
case FXCH:
	fxch();
	break;
case FXCH_ST:
	fxch(instr.get_operand<St>(0));
	break;
case FXRSTOR_M512BYTE:
	fxrstor(instr.get_operand<M512Byte>(0));
	break;
case FXRSTOR64_M512BYTE:
	fxrstor64(instr.get_operand<M512Byte>(0));
	break;
case FXSAVE_M512BYTE:
	fxsave(instr.get_operand<M512Byte>(0));
	break;
case FXSAVE64_M512BYTE:
	fxsave64(instr.get_operand<M512Byte>(0));
	break;
case FXTRACT:
	fxtract();
	break;
case FYL2X:
	fyl2x();
	break;
case FYL2XP1:
	fyl2xp1();
	break;
case HADDPD_XMM_M128:
	haddpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case HADDPD_XMM_XMM:
	haddpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case HADDPS_XMM_M128:
	haddps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case HADDPS_XMM_XMM:
	haddps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case HSUBPD_XMM_M128:
	hsubpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case HSUBPD_XMM_XMM:
	hsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case HSUBPS_XMM_M128:
	hsubps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case HSUBPS_XMM_XMM:
	hsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case IDIV_M16:
	idiv(instr.get_operand<M16>(0));
	break;
case IDIV_M32:
	idiv(instr.get_operand<M32>(0));
	break;
case IDIV_M64:
	idiv(instr.get_operand<M64>(0));
	break;
case IDIV_M8:
	idiv(instr.get_operand<M8>(0));
	break;
case IDIV_R16:
	idiv(instr.get_operand<R16>(0));
	break;
case IDIV_R32:
	idiv(instr.get_operand<R32>(0));
	break;
case IDIV_R64:
	idiv(instr.get_operand<R64>(0));
	break;
case IDIV_R8:
	idiv(instr.get_operand<R8>(0));
	break;
case IDIV_RH:
	idiv(instr.get_operand<Rh>(0));
	break;
case IMUL_M16:
	imul(instr.get_operand<M16>(0));
	break;
case IMUL_M32:
	imul(instr.get_operand<M32>(0));
	break;
case IMUL_M64:
	imul(instr.get_operand<M64>(0));
	break;
case IMUL_M8:
	imul(instr.get_operand<M8>(0));
	break;
case IMUL_R16:
	imul(instr.get_operand<R16>(0));
	break;
case IMUL_R16_M16:
	imul(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case IMUL_R16_M16_IMM16:
	imul(instr.get_operand<R16>(0), instr.get_operand<M16>(1), instr.get_operand<Imm16>(2));
	break;
case IMUL_R16_M16_IMM8:
	imul(instr.get_operand<R16>(0), instr.get_operand<M16>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R16_R16:
	imul(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case IMUL_R16_R16_IMM16:
	imul(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm16>(2));
	break;
case IMUL_R16_R16_IMM8:
	imul(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R32:
	imul(instr.get_operand<R32>(0));
	break;
case IMUL_R32_M32:
	imul(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case IMUL_R32_M32_IMM32:
	imul(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<Imm32>(2));
	break;
case IMUL_R32_M32_IMM8:
	imul(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R32_R32:
	imul(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case IMUL_R32_R32_IMM32:
	imul(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm32>(2));
	break;
case IMUL_R32_R32_IMM8:
	imul(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R64:
	imul(instr.get_operand<R64>(0));
	break;
case IMUL_R64_M64:
	imul(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case IMUL_R64_M64_IMM32:
	imul(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<Imm32>(2));
	break;
case IMUL_R64_M64_IMM8:
	imul(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R64_R64:
	imul(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case IMUL_R64_R64_IMM32:
	imul(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm32>(2));
	break;
case IMUL_R64_R64_IMM8:
	imul(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case IMUL_R8:
	imul(instr.get_operand<R8>(0));
	break;
case IMUL_RH:
	imul(instr.get_operand<Rh>(0));
	break;
case IN_AL_DX:
	in(instr.get_operand<Al>(0), instr.get_operand<Dx>(1));
	break;
case IN_AL_IMM8:
	in(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case IN_AX_DX:
	in(instr.get_operand<Ax>(0), instr.get_operand<Dx>(1));
	break;
case IN_AX_IMM8:
	in(instr.get_operand<Ax>(0), instr.get_operand<Imm8>(1));
	break;
case IN_EAX_DX:
	in(instr.get_operand<Eax>(0), instr.get_operand<Dx>(1));
	break;
case IN_EAX_IMM8:
	in(instr.get_operand<Eax>(0), instr.get_operand<Imm8>(1));
	break;
case INC_M16:
	inc(instr.get_operand<M16>(0));
	break;
case INC_M32:
	inc(instr.get_operand<M32>(0));
	break;
case INC_M64:
	inc(instr.get_operand<M64>(0));
	break;
case INC_M8:
	inc(instr.get_operand<M8>(0));
	break;
case INC_R16:
	inc(instr.get_operand<R16>(0));
	break;
case INC_R32:
	inc(instr.get_operand<R32>(0));
	break;
case INC_R64:
	inc(instr.get_operand<R64>(0));
	break;
case INC_R8:
	inc(instr.get_operand<R8>(0));
	break;
case INC_RH:
	inc(instr.get_operand<Rh>(0));
	break;
case INS_M16_DX:
	ins(instr.get_operand<M16>(0), instr.get_operand<Dx>(1));
	break;
case INS_M32_DX:
	ins(instr.get_operand<M32>(0), instr.get_operand<Dx>(1));
	break;
case INS_M8_DX:
	ins(instr.get_operand<M8>(0), instr.get_operand<Dx>(1));
	break;
case INSB:
	insb();
	break;
case INSD:
	insd();
	break;
case INSERTPS_XMM_M32_IMM8:
	insertps(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case INSERTPS_XMM_XMM_IMM8:
	insertps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case INSW:
	insw();
	break;
case INT_IMM8:
	int_(instr.get_operand<Imm8>(0));
	break;
case INT_THREE:
	int_(instr.get_operand<Three>(0));
	break;
case INVPCID_R64_M128:
	invpcid(instr.get_operand<R64>(0), instr.get_operand<M128>(1));
	break;
case IRET:
	iret();
	break;
case IRETD:
	iretd();
	break;
case IRETQ:
	iretq();
	break;
case JA_LABEL:
	ja(instr.get_operand<Label>(0));
	break;
case JA_LABEL_1:
	ja_1(instr.get_operand<Label>(0));
	break;
case JA_LABEL_HINT:
	ja(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JA_LABEL_HINT_1:
	ja_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JA_REL32:
	ja(instr.get_operand<Rel32>(0));
	break;
case JA_REL32_HINT:
	ja(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JA_REL8:
	ja(instr.get_operand<Rel8>(0));
	break;
case JA_REL8_HINT:
	ja(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JAE_LABEL:
	jae(instr.get_operand<Label>(0));
	break;
case JAE_LABEL_1:
	jae_1(instr.get_operand<Label>(0));
	break;
case JAE_LABEL_HINT:
	jae(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JAE_LABEL_HINT_1:
	jae_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JAE_REL32:
	jae(instr.get_operand<Rel32>(0));
	break;
case JAE_REL32_HINT:
	jae(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JAE_REL8:
	jae(instr.get_operand<Rel8>(0));
	break;
case JAE_REL8_HINT:
	jae(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JB_LABEL:
	jb(instr.get_operand<Label>(0));
	break;
case JB_LABEL_1:
	jb_1(instr.get_operand<Label>(0));
	break;
case JB_LABEL_HINT:
	jb(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JB_LABEL_HINT_1:
	jb_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JB_REL32:
	jb(instr.get_operand<Rel32>(0));
	break;
case JB_REL32_HINT:
	jb(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JB_REL8:
	jb(instr.get_operand<Rel8>(0));
	break;
case JB_REL8_HINT:
	jb(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JBE_LABEL:
	jbe(instr.get_operand<Label>(0));
	break;
case JBE_LABEL_1:
	jbe_1(instr.get_operand<Label>(0));
	break;
case JBE_LABEL_HINT:
	jbe(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JBE_LABEL_HINT_1:
	jbe_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JBE_REL32:
	jbe(instr.get_operand<Rel32>(0));
	break;
case JBE_REL32_HINT:
	jbe(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JBE_REL8:
	jbe(instr.get_operand<Rel8>(0));
	break;
case JBE_REL8_HINT:
	jbe(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JC_LABEL:
	jc(instr.get_operand<Label>(0));
	break;
case JC_LABEL_1:
	jc_1(instr.get_operand<Label>(0));
	break;
case JC_LABEL_HINT:
	jc(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JC_LABEL_HINT_1:
	jc_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JC_REL32:
	jc(instr.get_operand<Rel32>(0));
	break;
case JC_REL32_HINT:
	jc(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JC_REL8:
	jc(instr.get_operand<Rel8>(0));
	break;
case JC_REL8_HINT:
	jc(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JE_LABEL:
	je(instr.get_operand<Label>(0));
	break;
case JE_LABEL_1:
	je_1(instr.get_operand<Label>(0));
	break;
case JE_LABEL_HINT:
	je(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JE_LABEL_HINT_1:
	je_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JE_REL32:
	je(instr.get_operand<Rel32>(0));
	break;
case JE_REL32_HINT:
	je(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JE_REL8:
	je(instr.get_operand<Rel8>(0));
	break;
case JE_REL8_HINT:
	je(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JECXZ_LABEL:
	jecxz(instr.get_operand<Label>(0));
	break;
case JECXZ_LABEL_HINT:
	jecxz(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JECXZ_REL8:
	jecxz(instr.get_operand<Rel8>(0));
	break;
case JECXZ_REL8_HINT:
	jecxz(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JG_LABEL:
	jg(instr.get_operand<Label>(0));
	break;
case JG_LABEL_1:
	jg_1(instr.get_operand<Label>(0));
	break;
case JG_LABEL_HINT:
	jg(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JG_LABEL_HINT_1:
	jg_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JG_REL32:
	jg(instr.get_operand<Rel32>(0));
	break;
case JG_REL32_HINT:
	jg(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JG_REL8:
	jg(instr.get_operand<Rel8>(0));
	break;
case JG_REL8_HINT:
	jg(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JGE_LABEL:
	jge(instr.get_operand<Label>(0));
	break;
case JGE_LABEL_1:
	jge_1(instr.get_operand<Label>(0));
	break;
case JGE_LABEL_HINT:
	jge(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JGE_LABEL_HINT_1:
	jge_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JGE_REL32:
	jge(instr.get_operand<Rel32>(0));
	break;
case JGE_REL32_HINT:
	jge(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JGE_REL8:
	jge(instr.get_operand<Rel8>(0));
	break;
case JGE_REL8_HINT:
	jge(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JL_LABEL:
	jl(instr.get_operand<Label>(0));
	break;
case JL_LABEL_1:
	jl_1(instr.get_operand<Label>(0));
	break;
case JL_LABEL_HINT:
	jl(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JL_LABEL_HINT_1:
	jl_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JL_REL32:
	jl(instr.get_operand<Rel32>(0));
	break;
case JL_REL32_HINT:
	jl(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JL_REL8:
	jl(instr.get_operand<Rel8>(0));
	break;
case JL_REL8_HINT:
	jl(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JLE_LABEL:
	jle(instr.get_operand<Label>(0));
	break;
case JLE_LABEL_1:
	jle_1(instr.get_operand<Label>(0));
	break;
case JLE_LABEL_HINT:
	jle(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JLE_LABEL_HINT_1:
	jle_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JLE_REL32:
	jle(instr.get_operand<Rel32>(0));
	break;
case JLE_REL32_HINT:
	jle(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JLE_REL8:
	jle(instr.get_operand<Rel8>(0));
	break;
case JLE_REL8_HINT:
	jle(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JMP_FARPTR1616:
	jmp(instr.get_operand<FarPtr1616>(0));
	break;
case JMP_FARPTR1632:
	jmp(instr.get_operand<FarPtr1632>(0));
	break;
case JMP_FARPTR1664:
	jmp(instr.get_operand<FarPtr1664>(0));
	break;
case JMP_LABEL:
	jmp(instr.get_operand<Label>(0));
	break;
case JMP_LABEL_1:
	jmp_1(instr.get_operand<Label>(0));
	break;
case JMP_M64:
	jmp(instr.get_operand<M64>(0));
	break;
case JMP_R64:
	jmp(instr.get_operand<R64>(0));
	break;
case JMP_REL32:
	jmp(instr.get_operand<Rel32>(0));
	break;
case JMP_REL8:
	jmp(instr.get_operand<Rel8>(0));
	break;
case JNA_LABEL:
	jna(instr.get_operand<Label>(0));
	break;
case JNA_LABEL_1:
	jna_1(instr.get_operand<Label>(0));
	break;
case JNA_LABEL_HINT:
	jna(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNA_LABEL_HINT_1:
	jna_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNA_REL32:
	jna(instr.get_operand<Rel32>(0));
	break;
case JNA_REL32_HINT:
	jna(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNA_REL8:
	jna(instr.get_operand<Rel8>(0));
	break;
case JNA_REL8_HINT:
	jna(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNAE_LABEL:
	jnae(instr.get_operand<Label>(0));
	break;
case JNAE_LABEL_1:
	jnae_1(instr.get_operand<Label>(0));
	break;
case JNAE_LABEL_HINT:
	jnae(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNAE_LABEL_HINT_1:
	jnae_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNAE_REL32:
	jnae(instr.get_operand<Rel32>(0));
	break;
case JNAE_REL32_HINT:
	jnae(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNAE_REL8:
	jnae(instr.get_operand<Rel8>(0));
	break;
case JNAE_REL8_HINT:
	jnae(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNB_LABEL:
	jnb(instr.get_operand<Label>(0));
	break;
case JNB_LABEL_1:
	jnb_1(instr.get_operand<Label>(0));
	break;
case JNB_LABEL_HINT:
	jnb(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNB_LABEL_HINT_1:
	jnb_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNB_REL32:
	jnb(instr.get_operand<Rel32>(0));
	break;
case JNB_REL32_HINT:
	jnb(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNB_REL8:
	jnb(instr.get_operand<Rel8>(0));
	break;
case JNB_REL8_HINT:
	jnb(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNBE_LABEL:
	jnbe(instr.get_operand<Label>(0));
	break;
case JNBE_LABEL_1:
	jnbe_1(instr.get_operand<Label>(0));
	break;
case JNBE_LABEL_HINT:
	jnbe(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNBE_LABEL_HINT_1:
	jnbe_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNBE_REL32:
	jnbe(instr.get_operand<Rel32>(0));
	break;
case JNBE_REL32_HINT:
	jnbe(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNBE_REL8:
	jnbe(instr.get_operand<Rel8>(0));
	break;
case JNBE_REL8_HINT:
	jnbe(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNC_LABEL:
	jnc(instr.get_operand<Label>(0));
	break;
case JNC_LABEL_1:
	jnc_1(instr.get_operand<Label>(0));
	break;
case JNC_LABEL_HINT:
	jnc(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNC_LABEL_HINT_1:
	jnc_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNC_REL32:
	jnc(instr.get_operand<Rel32>(0));
	break;
case JNC_REL32_HINT:
	jnc(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNC_REL8:
	jnc(instr.get_operand<Rel8>(0));
	break;
case JNC_REL8_HINT:
	jnc(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNE_LABEL:
	jne(instr.get_operand<Label>(0));
	break;
case JNE_LABEL_1:
	jne_1(instr.get_operand<Label>(0));
	break;
case JNE_LABEL_HINT:
	jne(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNE_LABEL_HINT_1:
	jne_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNE_REL32:
	jne(instr.get_operand<Rel32>(0));
	break;
case JNE_REL32_HINT:
	jne(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNE_REL8:
	jne(instr.get_operand<Rel8>(0));
	break;
case JNE_REL8_HINT:
	jne(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNG_LABEL:
	jng(instr.get_operand<Label>(0));
	break;
case JNG_LABEL_1:
	jng_1(instr.get_operand<Label>(0));
	break;
case JNG_LABEL_HINT:
	jng(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNG_LABEL_HINT_1:
	jng_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNG_REL32:
	jng(instr.get_operand<Rel32>(0));
	break;
case JNG_REL32_HINT:
	jng(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNG_REL8:
	jng(instr.get_operand<Rel8>(0));
	break;
case JNG_REL8_HINT:
	jng(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNGE_LABEL:
	jnge(instr.get_operand<Label>(0));
	break;
case JNGE_LABEL_1:
	jnge_1(instr.get_operand<Label>(0));
	break;
case JNGE_LABEL_HINT:
	jnge(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNGE_LABEL_HINT_1:
	jnge_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNGE_REL32:
	jnge(instr.get_operand<Rel32>(0));
	break;
case JNGE_REL32_HINT:
	jnge(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNGE_REL8:
	jnge(instr.get_operand<Rel8>(0));
	break;
case JNGE_REL8_HINT:
	jnge(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNL_LABEL:
	jnl(instr.get_operand<Label>(0));
	break;
case JNL_LABEL_1:
	jnl_1(instr.get_operand<Label>(0));
	break;
case JNL_LABEL_HINT:
	jnl(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNL_LABEL_HINT_1:
	jnl_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNL_REL32:
	jnl(instr.get_operand<Rel32>(0));
	break;
case JNL_REL32_HINT:
	jnl(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNL_REL8:
	jnl(instr.get_operand<Rel8>(0));
	break;
case JNL_REL8_HINT:
	jnl(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNLE_LABEL:
	jnle(instr.get_operand<Label>(0));
	break;
case JNLE_LABEL_1:
	jnle_1(instr.get_operand<Label>(0));
	break;
case JNLE_LABEL_HINT:
	jnle(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNLE_LABEL_HINT_1:
	jnle_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNLE_REL32:
	jnle(instr.get_operand<Rel32>(0));
	break;
case JNLE_REL32_HINT:
	jnle(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNLE_REL8:
	jnle(instr.get_operand<Rel8>(0));
	break;
case JNLE_REL8_HINT:
	jnle(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNO_LABEL:
	jno(instr.get_operand<Label>(0));
	break;
case JNO_LABEL_1:
	jno_1(instr.get_operand<Label>(0));
	break;
case JNO_LABEL_HINT:
	jno(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNO_LABEL_HINT_1:
	jno_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNO_REL32:
	jno(instr.get_operand<Rel32>(0));
	break;
case JNO_REL32_HINT:
	jno(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNO_REL8:
	jno(instr.get_operand<Rel8>(0));
	break;
case JNO_REL8_HINT:
	jno(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNP_LABEL:
	jnp(instr.get_operand<Label>(0));
	break;
case JNP_LABEL_1:
	jnp_1(instr.get_operand<Label>(0));
	break;
case JNP_LABEL_HINT:
	jnp(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNP_LABEL_HINT_1:
	jnp_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNP_REL32:
	jnp(instr.get_operand<Rel32>(0));
	break;
case JNP_REL32_HINT:
	jnp(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNP_REL8:
	jnp(instr.get_operand<Rel8>(0));
	break;
case JNP_REL8_HINT:
	jnp(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNS_LABEL:
	jns(instr.get_operand<Label>(0));
	break;
case JNS_LABEL_1:
	jns_1(instr.get_operand<Label>(0));
	break;
case JNS_LABEL_HINT:
	jns(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNS_LABEL_HINT_1:
	jns_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNS_REL32:
	jns(instr.get_operand<Rel32>(0));
	break;
case JNS_REL32_HINT:
	jns(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNS_REL8:
	jns(instr.get_operand<Rel8>(0));
	break;
case JNS_REL8_HINT:
	jns(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JNZ_LABEL:
	jnz(instr.get_operand<Label>(0));
	break;
case JNZ_LABEL_1:
	jnz_1(instr.get_operand<Label>(0));
	break;
case JNZ_LABEL_HINT:
	jnz(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNZ_LABEL_HINT_1:
	jnz_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JNZ_REL32:
	jnz(instr.get_operand<Rel32>(0));
	break;
case JNZ_REL32_HINT:
	jnz(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JNZ_REL8:
	jnz(instr.get_operand<Rel8>(0));
	break;
case JNZ_REL8_HINT:
	jnz(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JO_LABEL:
	jo(instr.get_operand<Label>(0));
	break;
case JO_LABEL_1:
	jo_1(instr.get_operand<Label>(0));
	break;
case JO_LABEL_HINT:
	jo(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JO_LABEL_HINT_1:
	jo_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JO_REL32:
	jo(instr.get_operand<Rel32>(0));
	break;
case JO_REL32_HINT:
	jo(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JO_REL8:
	jo(instr.get_operand<Rel8>(0));
	break;
case JO_REL8_HINT:
	jo(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JP_LABEL:
	jp(instr.get_operand<Label>(0));
	break;
case JP_LABEL_1:
	jp_1(instr.get_operand<Label>(0));
	break;
case JP_LABEL_HINT:
	jp(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JP_LABEL_HINT_1:
	jp_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JP_REL32:
	jp(instr.get_operand<Rel32>(0));
	break;
case JP_REL32_HINT:
	jp(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JP_REL8:
	jp(instr.get_operand<Rel8>(0));
	break;
case JP_REL8_HINT:
	jp(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JPE_LABEL:
	jpe(instr.get_operand<Label>(0));
	break;
case JPE_LABEL_1:
	jpe_1(instr.get_operand<Label>(0));
	break;
case JPE_LABEL_HINT:
	jpe(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JPE_LABEL_HINT_1:
	jpe_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JPE_REL32:
	jpe(instr.get_operand<Rel32>(0));
	break;
case JPE_REL32_HINT:
	jpe(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JPE_REL8:
	jpe(instr.get_operand<Rel8>(0));
	break;
case JPE_REL8_HINT:
	jpe(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JPO_LABEL:
	jpo(instr.get_operand<Label>(0));
	break;
case JPO_LABEL_1:
	jpo_1(instr.get_operand<Label>(0));
	break;
case JPO_LABEL_HINT:
	jpo(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JPO_LABEL_HINT_1:
	jpo_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JPO_REL32:
	jpo(instr.get_operand<Rel32>(0));
	break;
case JPO_REL32_HINT:
	jpo(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JPO_REL8:
	jpo(instr.get_operand<Rel8>(0));
	break;
case JPO_REL8_HINT:
	jpo(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JRCXZ_LABEL:
	jrcxz(instr.get_operand<Label>(0));
	break;
case JRCXZ_LABEL_HINT:
	jrcxz(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JRCXZ_REL8:
	jrcxz(instr.get_operand<Rel8>(0));
	break;
case JRCXZ_REL8_HINT:
	jrcxz(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JS_LABEL:
	js(instr.get_operand<Label>(0));
	break;
case JS_LABEL_1:
	js_1(instr.get_operand<Label>(0));
	break;
case JS_LABEL_HINT:
	js(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JS_LABEL_HINT_1:
	js_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JS_REL32:
	js(instr.get_operand<Rel32>(0));
	break;
case JS_REL32_HINT:
	js(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JS_REL8:
	js(instr.get_operand<Rel8>(0));
	break;
case JS_REL8_HINT:
	js(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case JZ_LABEL:
	jz(instr.get_operand<Label>(0));
	break;
case JZ_LABEL_1:
	jz_1(instr.get_operand<Label>(0));
	break;
case JZ_LABEL_HINT:
	jz(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JZ_LABEL_HINT_1:
	jz_1(instr.get_operand<Label>(0), instr.get_operand<Hint>(1));
	break;
case JZ_REL32:
	jz(instr.get_operand<Rel32>(0));
	break;
case JZ_REL32_HINT:
	jz(instr.get_operand<Rel32>(0), instr.get_operand<Hint>(1));
	break;
case JZ_REL8:
	jz(instr.get_operand<Rel8>(0));
	break;
case JZ_REL8_HINT:
	jz(instr.get_operand<Rel8>(0), instr.get_operand<Hint>(1));
	break;
case LAHF:
	lahf();
	break;
case LAR_R16_M16:
	lar(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case LAR_R16_R16:
	lar(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case LAR_R32_M16:
	lar(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case LAR_R32_R32:
	lar(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case LAR_R64_M16:
	lar(instr.get_operand<R64>(0), instr.get_operand<M16>(1));
	break;
case LAR_R64_R32:
	lar(instr.get_operand<R64>(0), instr.get_operand<R32>(1));
	break;
case LDDQU_XMM_M128:
	lddqu(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case LDMXCSR_M32:
	ldmxcsr(instr.get_operand<M32>(0));
	break;
case LEA_R16_M16:
	lea(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case LEA_R16_M32:
	lea(instr.get_operand<R16>(0), instr.get_operand<M32>(1));
	break;
case LEA_R16_M64:
	lea(instr.get_operand<R16>(0), instr.get_operand<M64>(1));
	break;
case LEA_R32_M16:
	lea(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case LEA_R32_M32:
	lea(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case LEA_R32_M64:
	lea(instr.get_operand<R32>(0), instr.get_operand<M64>(1));
	break;
case LEA_R64_M16:
	lea(instr.get_operand<R64>(0), instr.get_operand<M16>(1));
	break;
case LEA_R64_M32:
	lea(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case LEA_R64_M64:
	lea(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case LEAVE:
	leave();
	break;
case LEAVE_PREF66:
	leave(instr.get_operand<Pref66>(0));
	break;
case LFENCE:
	lfence();
	break;
case LFS_R16_FARPTR1616:
	lfs(instr.get_operand<R16>(0), instr.get_operand<FarPtr1616>(1));
	break;
case LFS_R32_FARPTR1632:
	lfs(instr.get_operand<R32>(0), instr.get_operand<FarPtr1632>(1));
	break;
case LFS_R64_FARPTR1664:
	lfs(instr.get_operand<R64>(0), instr.get_operand<FarPtr1664>(1));
	break;
case LGS_R16_FARPTR1616:
	lgs(instr.get_operand<R16>(0), instr.get_operand<FarPtr1616>(1));
	break;
case LGS_R32_FARPTR1632:
	lgs(instr.get_operand<R32>(0), instr.get_operand<FarPtr1632>(1));
	break;
case LGS_R64_FARPTR1664:
	lgs(instr.get_operand<R64>(0), instr.get_operand<FarPtr1664>(1));
	break;
case LOCK:
	lock();
	break;
case LODS_M16:
	lods(instr.get_operand<M16>(0));
	break;
case LODS_M32:
	lods(instr.get_operand<M32>(0));
	break;
case LODS_M64:
	lods(instr.get_operand<M64>(0));
	break;
case LODS_M8:
	lods(instr.get_operand<M8>(0));
	break;
case LODSB:
	lodsb();
	break;
case LODSD:
	lodsd();
	break;
case LODSQ:
	lodsq();
	break;
case LODSW:
	lodsw();
	break;
case LOOP_LABEL:
	loop(instr.get_operand<Label>(0));
	break;
case LOOP_REL8:
	loop(instr.get_operand<Rel8>(0));
	break;
case LOOPE_LABEL:
	loope(instr.get_operand<Label>(0));
	break;
case LOOPE_REL8:
	loope(instr.get_operand<Rel8>(0));
	break;
case LOOPNE_LABEL:
	loopne(instr.get_operand<Label>(0));
	break;
case LOOPNE_REL8:
	loopne(instr.get_operand<Rel8>(0));
	break;
case LSL_R16_M16:
	lsl(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case LSL_R16_R16:
	lsl(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case LSL_R32_M16:
	lsl(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case LSL_R32_R32:
	lsl(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case LSL_R64_M16:
	lsl(instr.get_operand<R64>(0), instr.get_operand<M16>(1));
	break;
case LSL_R64_R32:
	lsl(instr.get_operand<R64>(0), instr.get_operand<R32>(1));
	break;
case LSS_R16_FARPTR1616:
	lss(instr.get_operand<R16>(0), instr.get_operand<FarPtr1616>(1));
	break;
case LSS_R32_FARPTR1632:
	lss(instr.get_operand<R32>(0), instr.get_operand<FarPtr1632>(1));
	break;
case LSS_R64_FARPTR1664:
	lss(instr.get_operand<R64>(0), instr.get_operand<FarPtr1664>(1));
	break;
case LZCNT_R16_M16:
	lzcnt(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case LZCNT_R16_R16:
	lzcnt(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case LZCNT_R32_M32:
	lzcnt(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case LZCNT_R32_R32:
	lzcnt(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case LZCNT_R64_M64:
	lzcnt(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case LZCNT_R64_R64:
	lzcnt(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case MASKMOVDQU_XMM_XMM:
	maskmovdqu(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MASKMOVQ_MM_MM:
	maskmovq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case MAXPD_XMM_M128:
	maxpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MAXPD_XMM_XMM:
	maxpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MAXPS_XMM_M128:
	maxps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MAXPS_XMM_XMM:
	maxps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MAXSD_XMM_M64:
	maxsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MAXSD_XMM_XMM:
	maxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MAXSS_XMM_M32:
	maxss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case MAXSS_XMM_XMM:
	maxss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MFENCE:
	mfence();
	break;
case MINPD_XMM_M128:
	minpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MINPD_XMM_XMM:
	minpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MINPS_XMM_M128:
	minps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MINPS_XMM_XMM:
	minps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MINSD_XMM_M64:
	minsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MINSD_XMM_XMM:
	minsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MINSS_XMM_M32:
	minss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case MINSS_XMM_XMM:
	minss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MONITOR:
	monitor();
	break;
case MOV_AL_MOFFS8:
	mov(instr.get_operand<Al>(0), instr.get_operand<Moffs8>(1));
	break;
case MOV_AL_MOFFS8_PREFREXW:
	mov(instr.get_operand<Al>(0), instr.get_operand<Moffs8>(1), instr.get_operand<PrefRexW>(2));
	break;
case MOV_AX_MOFFS16:
	mov(instr.get_operand<Ax>(0), instr.get_operand<Moffs16>(1));
	break;
case MOV_EAX_MOFFS32:
	mov(instr.get_operand<Eax>(0), instr.get_operand<Moffs32>(1));
	break;
case MOV_M16_IMM16:
	mov(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case MOV_M16_R16:
	mov(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case MOV_M16_SREG:
	mov(instr.get_operand<M16>(0), instr.get_operand<Sreg>(1));
	break;
case MOV_M32_IMM32:
	mov(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case MOV_M32_R32:
	mov(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case MOV_M64_IMM32:
	mov(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case MOV_M64_R64:
	mov(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case MOV_M64_SREG:
	mov(instr.get_operand<M64>(0), instr.get_operand<Sreg>(1));
	break;
case MOV_M8_IMM8:
	mov(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case MOV_M8_R8:
	mov(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case MOV_M8_RH:
	mov(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case MOV_MOFFS16_AX:
	mov(instr.get_operand<Moffs16>(0), instr.get_operand<Ax>(1));
	break;
case MOV_MOFFS32_EAX:
	mov(instr.get_operand<Moffs32>(0), instr.get_operand<Eax>(1));
	break;
case MOV_MOFFS64_RAX:
	mov(instr.get_operand<Moffs64>(0), instr.get_operand<Rax>(1));
	break;
case MOV_MOFFS8_AL:
	mov(instr.get_operand<Moffs8>(0), instr.get_operand<Al>(1));
	break;
case MOV_MOFFS8_AL_PREFREXW:
	mov(instr.get_operand<Moffs8>(0), instr.get_operand<Al>(1), instr.get_operand<PrefRexW>(2));
	break;
case MOV_R16_IMM16:
	mov(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case MOV_R16_IMM16_1:
	mov_1(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case MOV_R16_M16:
	mov(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case MOV_R16_R16:
	mov(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case MOV_R16_R16_1:
	mov_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case MOV_R16_SREG:
	mov(instr.get_operand<R16>(0), instr.get_operand<Sreg>(1));
	break;
case MOV_R32_IMM32:
	mov(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case MOV_R32_IMM32_1:
	mov_1(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case MOV_R32_M32:
	mov(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case MOV_R32_R32:
	mov(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case MOV_R32_R32_1:
	mov_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case MOV_R64_IMM32:
	mov(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case MOV_R64_IMM64:
	mov(instr.get_operand<R64>(0), instr.get_operand<Imm64>(1));
	break;
case MOV_R64_M64:
	mov(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case MOV_R64_R64:
	mov(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case MOV_R64_R64_1:
	mov_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case MOV_R64_SREG:
	mov(instr.get_operand<R64>(0), instr.get_operand<Sreg>(1));
	break;
case MOV_R8_IMM8:
	mov(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case MOV_R8_IMM8_1:
	mov_1(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case MOV_R8_M8:
	mov(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case MOV_R8_R8:
	mov(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case MOV_R8_R8_1:
	mov_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case MOV_R8_RH:
	mov(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case MOV_R8_RH_1:
	mov_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case MOV_RAX_MOFFS64:
	mov(instr.get_operand<Rax>(0), instr.get_operand<Moffs64>(1));
	break;
case MOV_RH_IMM8:
	mov(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case MOV_RH_IMM8_1:
	mov_1(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case MOV_RH_M8:
	mov(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case MOV_RH_R8:
	mov(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case MOV_RH_R8_1:
	mov_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case MOV_RH_RH:
	mov(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case MOV_RH_RH_1:
	mov_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case MOV_SREG_M16:
	mov(instr.get_operand<Sreg>(0), instr.get_operand<M16>(1));
	break;
case MOV_SREG_M64:
	mov(instr.get_operand<Sreg>(0), instr.get_operand<M64>(1));
	break;
case MOV_SREG_R16:
	mov(instr.get_operand<Sreg>(0), instr.get_operand<R16>(1));
	break;
case MOV_SREG_R64:
	mov(instr.get_operand<Sreg>(0), instr.get_operand<R64>(1));
	break;
case MOVAPD_M128_XMM:
	movapd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVAPD_XMM_M128:
	movapd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVAPD_XMM_XMM:
	movapd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVAPD_XMM_XMM_1:
	movapd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVAPS_M128_XMM:
	movaps(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVAPS_XMM_M128:
	movaps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVAPS_XMM_XMM:
	movaps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVAPS_XMM_XMM_1:
	movaps_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVBE_M16_R16:
	movbe(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case MOVBE_M32_R32:
	movbe(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case MOVBE_M64_R64:
	movbe(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case MOVBE_R16_M16:
	movbe(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case MOVBE_R32_M32:
	movbe(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case MOVBE_R64_M64:
	movbe(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case MOVD_M32_MM:
	movd(instr.get_operand<M32>(0), instr.get_operand<Mm>(1));
	break;
case MOVD_M32_XMM:
	movd(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1));
	break;
case MOVD_MM_M32:
	movd(instr.get_operand<Mm>(0), instr.get_operand<M32>(1));
	break;
case MOVD_MM_R32:
	movd(instr.get_operand<Mm>(0), instr.get_operand<R32>(1));
	break;
case MOVD_R32_MM:
	movd(instr.get_operand<R32>(0), instr.get_operand<Mm>(1));
	break;
case MOVD_R32_XMM:
	movd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case MOVD_XMM_M32:
	movd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case MOVD_XMM_R32:
	movd(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1));
	break;
case MOVDDUP_XMM_M64:
	movddup(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVDDUP_XMM_XMM:
	movddup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQ2Q_MM_XMM:
	movdq2q(instr.get_operand<Mm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQA_M128_XMM:
	movdqa(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQA_XMM_M128:
	movdqa(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVDQA_XMM_XMM:
	movdqa(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQA_XMM_XMM_1:
	movdqa_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQU_M128_XMM:
	movdqu(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQU_XMM_M128:
	movdqu(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVDQU_XMM_XMM:
	movdqu(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVDQU_XMM_XMM_1:
	movdqu_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVHLPS_XMM_XMM:
	movhlps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVHPD_M64_XMM:
	movhpd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVHPD_XMM_M64:
	movhpd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVHPS_M64_XMM:
	movhps(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVHPS_XMM_M64:
	movhps(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVLHPS_XMM_XMM:
	movlhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVLPD_M64_XMM:
	movlpd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVLPD_XMM_M64:
	movlpd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVLPS_M64_XMM:
	movlps(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVLPS_XMM_M64:
	movlps(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVMSKPD_R32_XMM:
	movmskpd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case MOVMSKPD_R64_XMM:
	movmskpd(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVMSKPS_R32_XMM:
	movmskps(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case MOVMSKPS_R64_XMM:
	movmskps(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVNTDQ_M128_XMM:
	movntdq(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVNTDQ_M256_YMM:
	movntdq(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case MOVNTDQA_XMM_M128:
	movntdqa(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVNTI_M32_R32:
	movnti(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case MOVNTI_M64_R64:
	movnti(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case MOVNTPD_M128_XMM:
	movntpd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVNTPS_M128_XMM:
	movntps(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVNTQ_M64_MM:
	movntq(instr.get_operand<M64>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_M64_MM:
	movq(instr.get_operand<M64>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_M64_MM_1:
	movq_1(instr.get_operand<M64>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_M64_XMM:
	movq(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVQ_M64_XMM_1:
	movq_1(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVQ_MM_M64:
	movq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case MOVQ_MM_M64_1:
	movq_1(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case MOVQ_MM_MM:
	movq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_MM_MM_1:
	movq_1(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_MM_R64:
	movq(instr.get_operand<Mm>(0), instr.get_operand<R64>(1));
	break;
case MOVQ_R64_MM:
	movq(instr.get_operand<R64>(0), instr.get_operand<Mm>(1));
	break;
case MOVQ_R64_XMM:
	movq(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVQ_XMM_M64:
	movq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVQ_XMM_M64_1:
	movq_1(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVQ_XMM_R64:
	movq(instr.get_operand<Xmm>(0), instr.get_operand<R64>(1));
	break;
case MOVQ_XMM_XMM:
	movq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVQ_XMM_XMM_1:
	movq_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVQ2DQ_XMM_MM:
	movq2dq(instr.get_operand<Xmm>(0), instr.get_operand<Mm>(1));
	break;
case MOVS_M16_M16:
	movs(instr.get_operand<M16>(0), instr.get_operand<M16>(1));
	break;
case MOVS_M32_M32:
	movs(instr.get_operand<M32>(0), instr.get_operand<M32>(1));
	break;
case MOVS_M64_M64:
	movs(instr.get_operand<M64>(0), instr.get_operand<M64>(1));
	break;
case MOVS_M8_M8:
	movs(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case MOVSB:
	movsb();
	break;
case MOVSD:
	movsd();
	break;
case MOVSD_M64_XMM:
	movsd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSD_XMM_M64:
	movsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MOVSD_XMM_XMM:
	movsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSD_XMM_XMM_1:
	movsd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSHDUP_XMM_M128:
	movshdup(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVSHDUP_XMM_XMM:
	movshdup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSLDUP_XMM_M128:
	movsldup(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVSLDUP_XMM_XMM:
	movsldup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSQ:
	movsq();
	break;
case MOVSS_M32_XMM:
	movss(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSS_XMM_M32:
	movss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case MOVSS_XMM_XMM:
	movss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSS_XMM_XMM_1:
	movss_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVSW:
	movsw();
	break;
case MOVSX_R16_M8:
	movsx(instr.get_operand<R16>(0), instr.get_operand<M8>(1));
	break;
case MOVSX_R16_R8:
	movsx(instr.get_operand<R16>(0), instr.get_operand<R8>(1));
	break;
case MOVSX_R16_RH:
	movsx(instr.get_operand<R16>(0), instr.get_operand<Rh>(1));
	break;
case MOVSX_R32_M16:
	movsx(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case MOVSX_R32_M8:
	movsx(instr.get_operand<R32>(0), instr.get_operand<M8>(1));
	break;
case MOVSX_R32_R16:
	movsx(instr.get_operand<R32>(0), instr.get_operand<R16>(1));
	break;
case MOVSX_R32_R8:
	movsx(instr.get_operand<R32>(0), instr.get_operand<R8>(1));
	break;
case MOVSX_R32_RH:
	movsx(instr.get_operand<R32>(0), instr.get_operand<Rh>(1));
	break;
case MOVSX_R64_M16:
	movsx(instr.get_operand<R64>(0), instr.get_operand<M16>(1));
	break;
case MOVSX_R64_M8:
	movsx(instr.get_operand<R64>(0), instr.get_operand<M8>(1));
	break;
case MOVSX_R64_R16:
	movsx(instr.get_operand<R64>(0), instr.get_operand<R16>(1));
	break;
case MOVSX_R64_R8:
	movsx(instr.get_operand<R64>(0), instr.get_operand<R8>(1));
	break;
case MOVSXD_R64_M32:
	movsxd(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case MOVSXD_R64_R32:
	movsxd(instr.get_operand<R64>(0), instr.get_operand<R32>(1));
	break;
case MOVUPD_M128_XMM:
	movupd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVUPD_XMM_M128:
	movupd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVUPD_XMM_XMM:
	movupd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVUPD_XMM_XMM_1:
	movupd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVUPS_M128_XMM:
	movups(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case MOVUPS_XMM_M128:
	movups(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MOVUPS_XMM_XMM:
	movups(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVUPS_XMM_XMM_1:
	movups_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MOVZX_R16_M8:
	movzx(instr.get_operand<R16>(0), instr.get_operand<M8>(1));
	break;
case MOVZX_R16_R8:
	movzx(instr.get_operand<R16>(0), instr.get_operand<R8>(1));
	break;
case MOVZX_R16_RH:
	movzx(instr.get_operand<R16>(0), instr.get_operand<Rh>(1));
	break;
case MOVZX_R32_M16:
	movzx(instr.get_operand<R32>(0), instr.get_operand<M16>(1));
	break;
case MOVZX_R32_M8:
	movzx(instr.get_operand<R32>(0), instr.get_operand<M8>(1));
	break;
case MOVZX_R32_R16:
	movzx(instr.get_operand<R32>(0), instr.get_operand<R16>(1));
	break;
case MOVZX_R32_R8:
	movzx(instr.get_operand<R32>(0), instr.get_operand<R8>(1));
	break;
case MOVZX_R32_RH:
	movzx(instr.get_operand<R32>(0), instr.get_operand<Rh>(1));
	break;
case MOVZX_R64_M16:
	movzx(instr.get_operand<R64>(0), instr.get_operand<M16>(1));
	break;
case MOVZX_R64_M8:
	movzx(instr.get_operand<R64>(0), instr.get_operand<M8>(1));
	break;
case MOVZX_R64_R16:
	movzx(instr.get_operand<R64>(0), instr.get_operand<R16>(1));
	break;
case MOVZX_R64_R8:
	movzx(instr.get_operand<R64>(0), instr.get_operand<R8>(1));
	break;
case MPSADBW_XMM_M128_IMM8:
	mpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case MPSADBW_XMM_XMM_IMM8:
	mpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case MUL_M16:
	mul(instr.get_operand<M16>(0));
	break;
case MUL_M32:
	mul(instr.get_operand<M32>(0));
	break;
case MUL_M64:
	mul(instr.get_operand<M64>(0));
	break;
case MUL_M8:
	mul(instr.get_operand<M8>(0));
	break;
case MUL_R16:
	mul(instr.get_operand<R16>(0));
	break;
case MUL_R32:
	mul(instr.get_operand<R32>(0));
	break;
case MUL_R64:
	mul(instr.get_operand<R64>(0));
	break;
case MUL_R8:
	mul(instr.get_operand<R8>(0));
	break;
case MUL_RH:
	mul(instr.get_operand<Rh>(0));
	break;
case MULPD_XMM_M128:
	mulpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MULPD_XMM_XMM:
	mulpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MULPS_XMM_M128:
	mulps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case MULPS_XMM_XMM:
	mulps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MULSD_XMM_M64:
	mulsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case MULSD_XMM_XMM:
	mulsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MULSS_XMM_M32:
	mulss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case MULSS_XMM_XMM:
	mulss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case MULX_R32_R32_M32:
	mulx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<M32>(2));
	break;
case MULX_R32_R32_R32:
	mulx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case MULX_R64_R64_M64:
	mulx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<M64>(2));
	break;
case MULX_R64_R64_R64:
	mulx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case MWAIT:
	mwait();
	break;
case NEG_M16:
	neg(instr.get_operand<M16>(0));
	break;
case NEG_M32:
	neg(instr.get_operand<M32>(0));
	break;
case NEG_M64:
	neg(instr.get_operand<M64>(0));
	break;
case NEG_M8:
	neg(instr.get_operand<M8>(0));
	break;
case NEG_R16:
	neg(instr.get_operand<R16>(0));
	break;
case NEG_R32:
	neg(instr.get_operand<R32>(0));
	break;
case NEG_R64:
	neg(instr.get_operand<R64>(0));
	break;
case NEG_R8:
	neg(instr.get_operand<R8>(0));
	break;
case NEG_RH:
	neg(instr.get_operand<Rh>(0));
	break;
case NOP:
	nop();
	break;
case NOP_M16:
	nop(instr.get_operand<M16>(0));
	break;
case NOP_M32:
	nop(instr.get_operand<M32>(0));
	break;
case NOP_R16:
	nop(instr.get_operand<R16>(0));
	break;
case NOP_R32:
	nop(instr.get_operand<R32>(0));
	break;
case NOT_M16:
	not_(instr.get_operand<M16>(0));
	break;
case NOT_M32:
	not_(instr.get_operand<M32>(0));
	break;
case NOT_M64:
	not_(instr.get_operand<M64>(0));
	break;
case NOT_M8:
	not_(instr.get_operand<M8>(0));
	break;
case NOT_R16:
	not_(instr.get_operand<R16>(0));
	break;
case NOT_R32:
	not_(instr.get_operand<R32>(0));
	break;
case NOT_R64:
	not_(instr.get_operand<R64>(0));
	break;
case NOT_R8:
	not_(instr.get_operand<R8>(0));
	break;
case NOT_RH:
	not_(instr.get_operand<Rh>(0));
	break;
case OR_AL_IMM8:
	or_(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case OR_AX_IMM16:
	or_(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case OR_EAX_IMM32:
	or_(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case OR_M16_IMM16:
	or_(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case OR_M16_IMM8:
	or_(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case OR_M16_R16:
	or_(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case OR_M32_IMM32:
	or_(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case OR_M32_IMM8:
	or_(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case OR_M32_R32:
	or_(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case OR_M64_IMM32:
	or_(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case OR_M64_IMM8:
	or_(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case OR_M64_R64:
	or_(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case OR_M8_IMM8:
	or_(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case OR_M8_R8:
	or_(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case OR_M8_RH:
	or_(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case OR_R16_IMM16:
	or_(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case OR_R16_IMM8:
	or_(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case OR_R16_M16:
	or_(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case OR_R16_R16:
	or_(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case OR_R16_R16_1:
	or__1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case OR_R32_IMM32:
	or_(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case OR_R32_IMM8:
	or_(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case OR_R32_M32:
	or_(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case OR_R32_R32:
	or_(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case OR_R32_R32_1:
	or__1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case OR_R64_IMM32:
	or_(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case OR_R64_IMM8:
	or_(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case OR_R64_M64:
	or_(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case OR_R64_R64:
	or_(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case OR_R64_R64_1:
	or__1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case OR_R8_IMM8:
	or_(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case OR_R8_M8:
	or_(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case OR_R8_R8:
	or_(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case OR_R8_R8_1:
	or__1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case OR_R8_RH:
	or_(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case OR_R8_RH_1:
	or__1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case OR_RAX_IMM32:
	or_(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case OR_RH_IMM8:
	or_(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case OR_RH_M8:
	or_(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case OR_RH_R8:
	or_(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case OR_RH_R8_1:
	or__1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case OR_RH_RH:
	or_(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case OR_RH_RH_1:
	or__1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case ORPD_XMM_M128:
	orpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ORPD_XMM_XMM:
	orpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case ORPS_XMM_M128:
	orps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case ORPS_XMM_XMM:
	orps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case OUT_DX_AL:
	out(instr.get_operand<Dx>(0), instr.get_operand<Al>(1));
	break;
case OUT_DX_AX:
	out(instr.get_operand<Dx>(0), instr.get_operand<Ax>(1));
	break;
case OUT_DX_EAX:
	out(instr.get_operand<Dx>(0), instr.get_operand<Eax>(1));
	break;
case OUT_IMM8_AL:
	out(instr.get_operand<Imm8>(0), instr.get_operand<Al>(1));
	break;
case OUT_IMM8_AX:
	out(instr.get_operand<Imm8>(0), instr.get_operand<Ax>(1));
	break;
case OUT_IMM8_EAX:
	out(instr.get_operand<Imm8>(0), instr.get_operand<Eax>(1));
	break;
case OUTS_DX_M16:
	outs(instr.get_operand<Dx>(0), instr.get_operand<M16>(1));
	break;
case OUTS_DX_M32:
	outs(instr.get_operand<Dx>(0), instr.get_operand<M32>(1));
	break;
case OUTS_DX_M8:
	outs(instr.get_operand<Dx>(0), instr.get_operand<M8>(1));
	break;
case OUTSB:
	outsb();
	break;
case OUTSD:
	outsd();
	break;
case OUTSW:
	outsw();
	break;
case PABSB_MM_M64:
	pabsb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PABSB_MM_MM:
	pabsb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PABSB_XMM_M128:
	pabsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PABSB_XMM_XMM:
	pabsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PABSD_MM_M64:
	pabsd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PABSD_MM_MM:
	pabsd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PABSD_XMM_M128:
	pabsd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PABSD_XMM_XMM:
	pabsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PABSW_MM_M64:
	pabsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PABSW_MM_MM:
	pabsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PABSW_XMM_M128:
	pabsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PABSW_XMM_XMM:
	pabsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PACKSSDW_MM_M64:
	packssdw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PACKSSDW_MM_MM:
	packssdw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PACKSSDW_XMM_M128:
	packssdw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PACKSSDW_XMM_XMM:
	packssdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PACKSSWB_MM_M64:
	packsswb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PACKSSWB_MM_MM:
	packsswb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PACKSSWB_XMM_M128:
	packsswb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PACKSSWB_XMM_XMM:
	packsswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PACKUSDW_XMM_M128:
	packusdw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PACKUSDW_XMM_XMM:
	packusdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PACKUSWB_MM_M64:
	packuswb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PACKUSWB_MM_MM:
	packuswb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PACKUSWB_XMM_M128:
	packuswb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PACKUSWB_XMM_XMM:
	packuswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDB_MM_M64:
	paddb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDB_MM_MM:
	paddb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDB_XMM_M128:
	paddb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDB_XMM_XMM:
	paddb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDD_MM_M64:
	paddd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDD_MM_MM:
	paddd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDD_XMM_M128:
	paddd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDD_XMM_XMM:
	paddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDQ_MM_M64:
	paddq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDQ_MM_MM:
	paddq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDQ_XMM_M128:
	paddq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDQ_XMM_XMM:
	paddq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDSB_MM_M64:
	paddsb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDSB_MM_MM:
	paddsb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDSB_XMM_M128:
	paddsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDSB_XMM_XMM:
	paddsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDSW_MM_M64:
	paddsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDSW_MM_MM:
	paddsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDSW_XMM_M128:
	paddsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDSW_XMM_XMM:
	paddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDUSB_MM_M64:
	paddusb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDUSB_MM_MM:
	paddusb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDUSB_XMM_M128:
	paddusb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDUSB_XMM_XMM:
	paddusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDUSW_MM_M64:
	paddusw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDUSW_MM_MM:
	paddusw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDUSW_XMM_M128:
	paddusw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDUSW_XMM_XMM:
	paddusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PADDW_MM_M64:
	paddw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PADDW_MM_MM:
	paddw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PADDW_XMM_M128:
	paddw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PADDW_XMM_XMM:
	paddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PALIGNR_MM_M64_IMM8:
	palignr(instr.get_operand<Mm>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case PALIGNR_MM_MM_IMM8:
	palignr(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1), instr.get_operand<Imm8>(2));
	break;
case PALIGNR_XMM_M128_IMM8:
	palignr(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PALIGNR_XMM_XMM_IMM8:
	palignr(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PAND_MM_M64:
	pand(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PAND_MM_MM:
	pand(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PAND_XMM_M128:
	pand(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PAND_XMM_XMM:
	pand(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PANDN_MM_M64:
	pandn(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PANDN_MM_MM:
	pandn(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PANDN_XMM_M128:
	pandn(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PANDN_XMM_XMM:
	pandn(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PAUSE:
	pause();
	break;
case PAVGB_MM_M64:
	pavgb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PAVGB_MM_MM:
	pavgb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PAVGB_XMM_M128:
	pavgb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PAVGB_XMM_XMM:
	pavgb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PAVGW_MM_M64:
	pavgw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PAVGW_MM_MM:
	pavgw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PAVGW_XMM_M128:
	pavgw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PAVGW_XMM_XMM:
	pavgw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PBLENDVB_XMM_M128_XMM0:
	pblendvb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Xmm0>(2));
	break;
case PBLENDVB_XMM_XMM_XMM0:
	pblendvb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm0>(2));
	break;
case PBLENDW_XMM_M128_IMM8:
	pblendw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PBLENDW_XMM_XMM_IMM8:
	pblendw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PCLMULQDQ_XMM_M128_IMM8:
	pclmulqdq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PCLMULQDQ_XMM_XMM_IMM8:
	pclmulqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPEQB_MM_M64:
	pcmpeqb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPEQB_MM_MM:
	pcmpeqb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPEQB_XMM_M128:
	pcmpeqb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPEQB_XMM_XMM:
	pcmpeqb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPEQD_MM_M64:
	pcmpeqd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPEQD_MM_MM:
	pcmpeqd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPEQD_XMM_M128:
	pcmpeqd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPEQD_XMM_XMM:
	pcmpeqd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPEQQ_XMM_M128:
	pcmpeqq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPEQQ_XMM_XMM:
	pcmpeqq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPEQW_MM_M64:
	pcmpeqw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPEQW_MM_MM:
	pcmpeqw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPEQW_XMM_M128:
	pcmpeqw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPEQW_XMM_XMM:
	pcmpeqw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPESTRI_XMM_M128_IMM8:
	pcmpestri(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPESTRI_XMM_XMM_IMM8:
	pcmpestri(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPESTRM_XMM_M128_IMM8:
	pcmpestrm(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPESTRM_XMM_XMM_IMM8:
	pcmpestrm(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPGTB_MM_M64:
	pcmpgtb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPGTB_MM_MM:
	pcmpgtb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPGTB_XMM_M128:
	pcmpgtb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPGTB_XMM_XMM:
	pcmpgtb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPGTD_MM_M64:
	pcmpgtd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPGTD_MM_MM:
	pcmpgtd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPGTD_XMM_M128:
	pcmpgtd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPGTD_XMM_XMM:
	pcmpgtd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPGTQ_XMM_M128:
	pcmpgtq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPGTQ_XMM_XMM:
	pcmpgtq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPGTW_MM_M64:
	pcmpgtw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PCMPGTW_MM_MM:
	pcmpgtw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PCMPGTW_XMM_M128:
	pcmpgtw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PCMPGTW_XMM_XMM:
	pcmpgtw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PCMPISTRI_XMM_M128_IMM8:
	pcmpistri(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPISTRI_XMM_XMM_IMM8:
	pcmpistri(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPISTRM_XMM_M128_IMM8:
	pcmpistrm(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PCMPISTRM_XMM_XMM_IMM8:
	pcmpistrm(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PDEP_R32_R32_M32:
	pdep(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<M32>(2));
	break;
case PDEP_R32_R32_R32:
	pdep(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case PDEP_R64_R64_M64:
	pdep(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<M64>(2));
	break;
case PDEP_R64_R64_R64:
	pdep(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case PEXT_R32_R32_M32:
	pext(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<M32>(2));
	break;
case PEXT_R32_R32_R32:
	pext(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case PEXT_R64_R64_M64:
	pext(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<M64>(2));
	break;
case PEXT_R64_R64_R64:
	pext(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case PEXTRB_M8_XMM_IMM8:
	pextrb(instr.get_operand<M8>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRB_R32_XMM_IMM8:
	pextrb(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRB_R64_XMM_IMM8:
	pextrb(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRD_M32_XMM_IMM8:
	pextrd(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRD_R32_XMM_IMM8:
	pextrd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRQ_M64_XMM_IMM8:
	pextrq(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRQ_R64_XMM_IMM8:
	pextrq(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_M16_XMM_IMM8:
	pextrw(instr.get_operand<M16>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R32_MM_IMM8:
	pextrw(instr.get_operand<R32>(0), instr.get_operand<Mm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R32_XMM_IMM8:
	pextrw(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R32_XMM_IMM8_1:
	pextrw_1(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R64_MM_IMM8:
	pextrw(instr.get_operand<R64>(0), instr.get_operand<Mm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R64_XMM_IMM8:
	pextrw(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PEXTRW_R64_XMM_IMM8_1:
	pextrw_1(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PHADDD_MM_M64:
	phaddd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHADDD_MM_MM:
	phaddd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHADDD_XMM_M128:
	phaddd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHADDD_XMM_XMM:
	phaddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHADDSW_MM_M64:
	phaddsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHADDSW_MM_MM:
	phaddsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHADDSW_XMM_M128:
	phaddsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHADDSW_XMM_XMM:
	phaddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHADDW_MM_M64:
	phaddw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHADDW_MM_MM:
	phaddw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHADDW_XMM_M128:
	phaddw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHADDW_XMM_XMM:
	phaddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHMINPOSUW_XMM_M128:
	phminposuw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHMINPOSUW_XMM_XMM:
	phminposuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHSUBD_MM_M64:
	phsubd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHSUBD_MM_MM:
	phsubd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHSUBD_XMM_M128:
	phsubd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHSUBD_XMM_XMM:
	phsubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHSUBSW_MM_M64:
	phsubsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHSUBSW_MM_MM:
	phsubsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHSUBSW_XMM_M128:
	phsubsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHSUBSW_XMM_XMM:
	phsubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PHSUBW_MM_M64:
	phsubw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PHSUBW_MM_MM:
	phsubw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PHSUBW_XMM_M128:
	phsubw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PHSUBW_XMM_XMM:
	phsubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PINSRB_XMM_M8_IMM8:
	pinsrb(instr.get_operand<Xmm>(0), instr.get_operand<M8>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRB_XMM_R32_IMM8:
	pinsrb(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRD_XMM_M32_IMM8:
	pinsrd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRD_XMM_R32_IMM8:
	pinsrd(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRW_MM_M16_IMM8:
	pinsrw(instr.get_operand<Mm>(0), instr.get_operand<M16>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRW_MM_R32_IMM8:
	pinsrw(instr.get_operand<Mm>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRW_XMM_M16_IMM8:
	pinsrw(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1), instr.get_operand<Imm8>(2));
	break;
case PINSRW_XMM_R32_IMM8:
	pinsrw(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case PMADDUBSW_MM_M64:
	pmaddubsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMADDUBSW_MM_MM:
	pmaddubsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMADDUBSW_XMM_M128:
	pmaddubsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMADDUBSW_XMM_XMM:
	pmaddubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMADDWD_MM_M64:
	pmaddwd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMADDWD_MM_MM:
	pmaddwd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMADDWD_XMM_M128:
	pmaddwd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMADDWD_XMM_XMM:
	pmaddwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXSB_XMM_M128:
	pmaxsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXSB_XMM_XMM:
	pmaxsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXSD_XMM_M128:
	pmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXSD_XMM_XMM:
	pmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXSW_MM_M64:
	pmaxsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMAXSW_MM_MM:
	pmaxsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMAXSW_XMM_M128:
	pmaxsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXSW_XMM_XMM:
	pmaxsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXUB_MM_M64:
	pmaxub(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMAXUB_MM_MM:
	pmaxub(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMAXUB_XMM_M128:
	pmaxub(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXUB_XMM_XMM:
	pmaxub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXUD_XMM_M128:
	pmaxud(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXUD_XMM_XMM:
	pmaxud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMAXUW_XMM_M128:
	pmaxuw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMAXUW_XMM_XMM:
	pmaxuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINSB_XMM_M128:
	pminsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINSB_XMM_XMM:
	pminsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINSD_XMM_M128:
	pminsd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINSD_XMM_XMM:
	pminsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINSW_MM_M64:
	pminsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMINSW_MM_MM:
	pminsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMINSW_XMM_M128:
	pminsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINSW_XMM_XMM:
	pminsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINUB_MM_M64:
	pminub(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMINUB_MM_MM:
	pminub(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMINUB_XMM_M128:
	pminub(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINUB_XMM_XMM:
	pminub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINUD_XMM_M128:
	pminud(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINUD_XMM_XMM:
	pminud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMINUW_XMM_M128:
	pminuw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMINUW_XMM_XMM:
	pminuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVMSKB_R32_MM:
	pmovmskb(instr.get_operand<R32>(0), instr.get_operand<Mm>(1));
	break;
case PMOVMSKB_R32_XMM:
	pmovmskb(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVMSKB_R64_MM:
	pmovmskb(instr.get_operand<R64>(0), instr.get_operand<Mm>(1));
	break;
case PMOVMSKB_R64_XMM:
	pmovmskb(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXBD_XMM_M32:
	pmovsxbd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case PMOVSXBD_XMM_XMM:
	pmovsxbd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXBQ_XMM_M16:
	pmovsxbq(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1));
	break;
case PMOVSXBQ_XMM_XMM:
	pmovsxbq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXBW_XMM_M64:
	pmovsxbw(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVSXBW_XMM_XMM:
	pmovsxbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXDQ_XMM_M64:
	pmovsxdq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVSXDQ_XMM_XMM:
	pmovsxdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXWD_XMM_M64:
	pmovsxwd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVSXWD_XMM_XMM:
	pmovsxwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVSXWQ_XMM_M32:
	pmovsxwq(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case PMOVSXWQ_XMM_XMM:
	pmovsxwq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXBD_XMM_M32:
	pmovzxbd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case PMOVZXBD_XMM_XMM:
	pmovzxbd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXBQ_XMM_M16:
	pmovzxbq(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1));
	break;
case PMOVZXBQ_XMM_XMM:
	pmovzxbq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXBW_XMM_M64:
	pmovzxbw(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVZXBW_XMM_XMM:
	pmovzxbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXDQ_XMM_M64:
	pmovzxdq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVZXDQ_XMM_XMM:
	pmovzxdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXWD_XMM_M64:
	pmovzxwd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case PMOVZXWD_XMM_XMM:
	pmovzxwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMOVZXWQ_XMM_M32:
	pmovzxwq(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case PMOVZXWQ_XMM_XMM:
	pmovzxwq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULDQ_XMM_M128:
	pmuldq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULDQ_XMM_XMM:
	pmuldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULHRSW_MM_M64:
	pmulhrsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMULHRSW_MM_MM:
	pmulhrsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMULHRSW_XMM_M128:
	pmulhrsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULHRSW_XMM_XMM:
	pmulhrsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULHUW_MM_M64:
	pmulhuw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMULHUW_MM_MM:
	pmulhuw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMULHUW_XMM_M128:
	pmulhuw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULHUW_XMM_XMM:
	pmulhuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULHW_MM_M64:
	pmulhw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMULHW_MM_MM:
	pmulhw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMULHW_XMM_M128:
	pmulhw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULHW_XMM_XMM:
	pmulhw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULLD_XMM_M128:
	pmulld(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULLD_XMM_XMM:
	pmulld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULLW_MM_M64:
	pmullw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMULLW_MM_MM:
	pmullw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMULLW_XMM_M128:
	pmullw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULLW_XMM_XMM:
	pmullw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PMULUDQ_MM_M64:
	pmuludq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PMULUDQ_MM_MM:
	pmuludq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PMULUDQ_XMM_M128:
	pmuludq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PMULUDQ_XMM_XMM:
	pmuludq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case POP_FS:
	pop(instr.get_operand<Fs>(0));
	break;
case POP_FS_PREF66:
	pop(instr.get_operand<Fs>(0), instr.get_operand<Pref66>(1));
	break;
case POP_GS:
	pop(instr.get_operand<Gs>(0));
	break;
case POP_GS_PREF66:
	pop(instr.get_operand<Gs>(0), instr.get_operand<Pref66>(1));
	break;
case POP_M16:
	pop(instr.get_operand<M16>(0));
	break;
case POP_M64:
	pop(instr.get_operand<M64>(0));
	break;
case POP_R16:
	pop(instr.get_operand<R16>(0));
	break;
case POP_R16_1:
	pop_1(instr.get_operand<R16>(0));
	break;
case POP_R64:
	pop(instr.get_operand<R64>(0));
	break;
case POP_R64_1:
	pop_1(instr.get_operand<R64>(0));
	break;
case POPCNT_R16_M16:
	popcnt(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case POPCNT_R16_R16:
	popcnt(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case POPCNT_R32_M32:
	popcnt(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case POPCNT_R32_R32:
	popcnt(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case POPCNT_R64_M64:
	popcnt(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case POPCNT_R64_R64:
	popcnt(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case POPF:
	popf();
	break;
case POPFQ:
	popfq();
	break;
case POR_MM_M64:
	por(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case POR_MM_MM:
	por(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case POR_XMM_M128:
	por(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case POR_XMM_XMM:
	por(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PREFETCHNTA_M8:
	prefetchnta(instr.get_operand<M8>(0));
	break;
case PREFETCHT0_M8:
	prefetcht0(instr.get_operand<M8>(0));
	break;
case PREFETCHT1_M8:
	prefetcht1(instr.get_operand<M8>(0));
	break;
case PREFETCHT2_M8:
	prefetcht2(instr.get_operand<M8>(0));
	break;
case PSADBW_MM_M64:
	psadbw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSADBW_MM_MM:
	psadbw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSADBW_XMM_M128:
	psadbw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSADBW_XMM_XMM:
	psadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSHUFB_MM_M64:
	pshufb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSHUFB_MM_MM:
	pshufb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSHUFB_XMM_M128:
	pshufb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSHUFB_XMM_XMM:
	pshufb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSHUFD_XMM_M128_IMM8:
	pshufd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFD_XMM_XMM_IMM8:
	pshufd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFHW_XMM_M128_IMM8:
	pshufhw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFHW_XMM_XMM_IMM8:
	pshufhw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFLW_XMM_M128_IMM8:
	pshuflw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFLW_XMM_XMM_IMM8:
	pshuflw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFW_MM_M64_IMM8:
	pshufw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case PSHUFW_MM_MM_IMM8:
	pshufw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1), instr.get_operand<Imm8>(2));
	break;
case PSIGNB_MM_M64:
	psignb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSIGNB_MM_MM:
	psignb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSIGNB_XMM_M128:
	psignb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSIGNB_XMM_XMM:
	psignb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSIGND_MM_M64:
	psignd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSIGND_MM_MM:
	psignd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSIGND_XMM_M128:
	psignd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSIGND_XMM_XMM:
	psignd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSIGNW_MM_M64:
	psignw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSIGNW_MM_MM:
	psignw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSIGNW_XMM_M128:
	psignw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSIGNW_XMM_XMM:
	psignw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSLLD_MM_IMM8:
	pslld(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLD_MM_M64:
	pslld(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSLLD_MM_MM:
	pslld(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSLLD_XMM_IMM8:
	pslld(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLD_XMM_M128:
	pslld(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSLLD_XMM_XMM:
	pslld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSLLDQ_XMM_IMM8:
	pslldq(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLQ_MM_IMM8:
	psllq(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLQ_MM_M64:
	psllq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSLLQ_MM_MM:
	psllq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSLLQ_XMM_IMM8:
	psllq(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLQ_XMM_M128:
	psllq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSLLQ_XMM_XMM:
	psllq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSLLW_MM_IMM8:
	psllw(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLW_MM_M64:
	psllw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSLLW_MM_MM:
	psllw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSLLW_XMM_IMM8:
	psllw(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSLLW_XMM_M128:
	psllw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSLLW_XMM_XMM:
	psllw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSRAD_MM_IMM8:
	psrad(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRAD_MM_M64:
	psrad(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSRAD_MM_MM:
	psrad(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSRAD_XMM_IMM8:
	psrad(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRAD_XMM_M128:
	psrad(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSRAD_XMM_XMM:
	psrad(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSRAW_MM_IMM8:
	psraw(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRAW_MM_M64:
	psraw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSRAW_MM_MM:
	psraw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSRAW_XMM_IMM8:
	psraw(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRAW_XMM_M128:
	psraw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSRAW_XMM_XMM:
	psraw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSRLD_MM_IMM8:
	psrld(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLD_MM_M64:
	psrld(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSRLD_MM_MM:
	psrld(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSRLD_XMM_IMM8:
	psrld(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLD_XMM_M128:
	psrld(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSRLD_XMM_XMM:
	psrld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSRLDQ_XMM_IMM8:
	psrldq(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLQ_MM_IMM8:
	psrlq(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLQ_MM_M64:
	psrlq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSRLQ_MM_MM:
	psrlq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSRLQ_XMM_IMM8:
	psrlq(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLQ_XMM_M128:
	psrlq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSRLQ_XMM_XMM:
	psrlq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSRLW_MM_IMM8:
	psrlw(instr.get_operand<Mm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLW_MM_M64:
	psrlw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSRLW_MM_MM:
	psrlw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSRLW_XMM_IMM8:
	psrlw(instr.get_operand<Xmm>(0), instr.get_operand<Imm8>(1));
	break;
case PSRLW_XMM_M128:
	psrlw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSRLW_XMM_XMM:
	psrlw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBB_MM_M64:
	psubb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBB_MM_MM:
	psubb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBB_XMM_M128:
	psubb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBB_XMM_XMM:
	psubb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBD_MM_M64:
	psubd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBD_MM_MM:
	psubd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBD_XMM_M128:
	psubd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBD_XMM_XMM:
	psubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBQ_MM_M64:
	psubq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBQ_MM_MM:
	psubq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBQ_XMM_M128:
	psubq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBQ_XMM_XMM:
	psubq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBSB_MM_M64:
	psubsb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBSB_MM_MM:
	psubsb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBSB_XMM_M128:
	psubsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBSB_XMM_XMM:
	psubsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBSW_MM_M64:
	psubsw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBSW_MM_MM:
	psubsw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBSW_XMM_M128:
	psubsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBSW_XMM_XMM:
	psubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBUSB_MM_M64:
	psubusb(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBUSB_MM_MM:
	psubusb(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBUSB_XMM_M128:
	psubusb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBUSB_XMM_XMM:
	psubusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBUSW_MM_M64:
	psubusw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBUSW_MM_MM:
	psubusw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBUSW_XMM_M128:
	psubusw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBUSW_XMM_XMM:
	psubusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PSUBW_MM_M64:
	psubw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PSUBW_MM_MM:
	psubw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PSUBW_XMM_M128:
	psubw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PSUBW_XMM_XMM:
	psubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PTEST_XMM_M128:
	ptest(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PTEST_XMM_XMM:
	ptest(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKHBW_MM_M64:
	punpckhbw(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PUNPCKHBW_MM_MM:
	punpckhbw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKHBW_XMM_M128:
	punpckhbw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKHBW_XMM_XMM:
	punpckhbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKHDQ_MM_M64:
	punpckhdq(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PUNPCKHDQ_MM_MM:
	punpckhdq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKHDQ_XMM_M128:
	punpckhdq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKHDQ_XMM_XMM:
	punpckhdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKHQDQ_XMM_M128:
	punpckhqdq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKHQDQ_XMM_XMM:
	punpckhqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKHWD_MM_M64:
	punpckhwd(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PUNPCKHWD_MM_MM:
	punpckhwd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKHWD_XMM_M128:
	punpckhwd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKHWD_XMM_XMM:
	punpckhwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKLBW_MM_M32:
	punpcklbw(instr.get_operand<Mm>(0), instr.get_operand<M32>(1));
	break;
case PUNPCKLBW_MM_MM:
	punpcklbw(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKLBW_XMM_M128:
	punpcklbw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKLBW_XMM_XMM:
	punpcklbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKLDQ_MM_M32:
	punpckldq(instr.get_operand<Mm>(0), instr.get_operand<M32>(1));
	break;
case PUNPCKLDQ_MM_MM:
	punpckldq(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKLDQ_XMM_M128:
	punpckldq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKLDQ_XMM_XMM:
	punpckldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKLQDQ_XMM_M128:
	punpcklqdq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKLQDQ_XMM_XMM:
	punpcklqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUNPCKLWD_MM_M32:
	punpcklwd(instr.get_operand<Mm>(0), instr.get_operand<M32>(1));
	break;
case PUNPCKLWD_MM_MM:
	punpcklwd(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PUNPCKLWD_XMM_M128:
	punpcklwd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PUNPCKLWD_XMM_XMM:
	punpcklwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case PUSH_FS:
	push(instr.get_operand<Fs>(0));
	break;
case PUSH_GS:
	push(instr.get_operand<Gs>(0));
	break;
case PUSH_M16:
	push(instr.get_operand<M16>(0));
	break;
case PUSH_M64:
	push(instr.get_operand<M64>(0));
	break;
case PUSH_R16:
	push(instr.get_operand<R16>(0));
	break;
case PUSH_R16_1:
	push_1(instr.get_operand<R16>(0));
	break;
case PUSH_R64:
	push(instr.get_operand<R64>(0));
	break;
case PUSH_R64_1:
	push_1(instr.get_operand<R64>(0));
	break;
case PUSHF:
	pushf();
	break;
case PUSHFQ:
	pushfq();
	break;
case PUSHQ_IMM16:
	pushq(instr.get_operand<Imm16>(0));
	break;
case PUSHQ_IMM32:
	pushq(instr.get_operand<Imm32>(0));
	break;
case PUSHQ_IMM8:
	pushq(instr.get_operand<Imm8>(0));
	break;
case PUSHW_IMM16:
	pushw(instr.get_operand<Imm16>(0));
	break;
case PUSHW_IMM8:
	pushw(instr.get_operand<Imm8>(0));
	break;
case PXOR_MM_M64:
	pxor(instr.get_operand<Mm>(0), instr.get_operand<M64>(1));
	break;
case PXOR_MM_MM:
	pxor(instr.get_operand<Mm>(0), instr.get_operand<Mm>(1));
	break;
case PXOR_XMM_M128:
	pxor(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case PXOR_XMM_XMM:
	pxor(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case RCL_M16_CL:
	rcl(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case RCL_M16_IMM8:
	rcl(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_M16_ONE:
	rcl(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case RCL_M32_CL:
	rcl(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case RCL_M32_IMM8:
	rcl(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_M32_ONE:
	rcl(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case RCL_M64_CL:
	rcl(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case RCL_M64_IMM8:
	rcl(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_M64_ONE:
	rcl(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case RCL_M8_CL:
	rcl(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case RCL_M8_IMM8:
	rcl(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_M8_ONE:
	rcl(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case RCL_R16_CL:
	rcl(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case RCL_R16_IMM8:
	rcl(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_R16_ONE:
	rcl(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case RCL_R32_CL:
	rcl(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case RCL_R32_IMM8:
	rcl(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_R32_ONE:
	rcl(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case RCL_R64_CL:
	rcl(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case RCL_R64_IMM8:
	rcl(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_R64_ONE:
	rcl(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case RCL_R8_CL:
	rcl(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case RCL_R8_IMM8:
	rcl(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_R8_ONE:
	rcl(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case RCL_RH_CL:
	rcl(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case RCL_RH_IMM8:
	rcl(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case RCL_RH_ONE:
	rcl(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case RCPPS_XMM_M128:
	rcpps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case RCPPS_XMM_XMM:
	rcpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case RCPSS_XMM_M32:
	rcpss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case RCPSS_XMM_XMM:
	rcpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case RCR_M16_CL:
	rcr(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case RCR_M16_IMM8:
	rcr(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_M16_ONE:
	rcr(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case RCR_M32_CL:
	rcr(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case RCR_M32_IMM8:
	rcr(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_M32_ONE:
	rcr(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case RCR_M64_CL:
	rcr(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case RCR_M64_IMM8:
	rcr(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_M64_ONE:
	rcr(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case RCR_M8_CL:
	rcr(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case RCR_M8_IMM8:
	rcr(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_M8_ONE:
	rcr(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case RCR_R16_CL:
	rcr(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case RCR_R16_IMM8:
	rcr(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_R16_ONE:
	rcr(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case RCR_R32_CL:
	rcr(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case RCR_R32_IMM8:
	rcr(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_R32_ONE:
	rcr(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case RCR_R64_CL:
	rcr(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case RCR_R64_IMM8:
	rcr(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_R64_ONE:
	rcr(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case RCR_R8_CL:
	rcr(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case RCR_R8_IMM8:
	rcr(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_R8_ONE:
	rcr(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case RCR_RH_CL:
	rcr(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case RCR_RH_IMM8:
	rcr(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case RCR_RH_ONE:
	rcr(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case RDFSBASE_R32:
	rdfsbase(instr.get_operand<R32>(0));
	break;
case RDFSBASE_R64:
	rdfsbase(instr.get_operand<R64>(0));
	break;
case RDGSBASE_R32:
	rdgsbase(instr.get_operand<R32>(0));
	break;
case RDGSBASE_R64:
	rdgsbase(instr.get_operand<R64>(0));
	break;
case RDRAND_R16:
	rdrand(instr.get_operand<R16>(0));
	break;
case RDRAND_R32:
	rdrand(instr.get_operand<R32>(0));
	break;
case RDRAND_R64:
	rdrand(instr.get_operand<R64>(0));
	break;
case REP_INS_M16_DX:
	rep_ins(instr.get_operand<M16>(0), instr.get_operand<Dx>(1));
	break;
case REP_INS_M32_DX:
	rep_ins(instr.get_operand<M32>(0), instr.get_operand<Dx>(1));
	break;
case REP_INS_M64_DX:
	rep_ins(instr.get_operand<M64>(0), instr.get_operand<Dx>(1));
	break;
case REP_INS_M8_DX:
	rep_ins(instr.get_operand<M8>(0), instr.get_operand<Dx>(1));
	break;
case REP_INS_M8_DX_1:
	rep_ins_1(instr.get_operand<M8>(0), instr.get_operand<Dx>(1));
	break;
case REP_LODS_AL:
	rep_lods(instr.get_operand<Al>(0));
	break;
case REP_LODS_AL_1:
	rep_lods_1(instr.get_operand<Al>(0));
	break;
case REP_LODS_AX:
	rep_lods(instr.get_operand<Ax>(0));
	break;
case REP_LODS_EAX:
	rep_lods(instr.get_operand<Eax>(0));
	break;
case REP_LODS_RAX:
	rep_lods(instr.get_operand<Rax>(0));
	break;
case REP_MOVS_M16_M16:
	rep_movs(instr.get_operand<M16>(0), instr.get_operand<M16>(1));
	break;
case REP_MOVS_M32_M32:
	rep_movs(instr.get_operand<M32>(0), instr.get_operand<M32>(1));
	break;
case REP_MOVS_M64_M64:
	rep_movs(instr.get_operand<M64>(0), instr.get_operand<M64>(1));
	break;
case REP_MOVS_M8_M8:
	rep_movs(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REP_MOVS_M8_M8_1:
	rep_movs_1(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REP_OUTS_DX_M16:
	rep_outs(instr.get_operand<Dx>(0), instr.get_operand<M16>(1));
	break;
case REP_OUTS_DX_M32:
	rep_outs(instr.get_operand<Dx>(0), instr.get_operand<M32>(1));
	break;
case REP_OUTS_DX_M64:
	rep_outs(instr.get_operand<Dx>(0), instr.get_operand<M64>(1));
	break;
case REP_OUTS_DX_M8:
	rep_outs(instr.get_operand<Dx>(0), instr.get_operand<M8>(1));
	break;
case REP_OUTS_DX_M8_1:
	rep_outs_1(instr.get_operand<Dx>(0), instr.get_operand<M8>(1));
	break;
case REP_STOS_M16:
	rep_stos(instr.get_operand<M16>(0));
	break;
case REP_STOS_M32:
	rep_stos(instr.get_operand<M32>(0));
	break;
case REP_STOS_M64:
	rep_stos(instr.get_operand<M64>(0));
	break;
case REP_STOS_M8:
	rep_stos(instr.get_operand<M8>(0));
	break;
case REP_STOS_M8_1:
	rep_stos_1(instr.get_operand<M8>(0));
	break;
case REPE_CMPS_M16_M16:
	repe_cmps(instr.get_operand<M16>(0), instr.get_operand<M16>(1));
	break;
case REPE_CMPS_M32_M32:
	repe_cmps(instr.get_operand<M32>(0), instr.get_operand<M32>(1));
	break;
case REPE_CMPS_M64_M64:
	repe_cmps(instr.get_operand<M64>(0), instr.get_operand<M64>(1));
	break;
case REPE_CMPS_M8_M8:
	repe_cmps(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REPE_CMPS_M8_M8_1:
	repe_cmps_1(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REPE_SCAS_M16:
	repe_scas(instr.get_operand<M16>(0));
	break;
case REPE_SCAS_M32:
	repe_scas(instr.get_operand<M32>(0));
	break;
case REPE_SCAS_M64:
	repe_scas(instr.get_operand<M64>(0));
	break;
case REPE_SCAS_M8:
	repe_scas(instr.get_operand<M8>(0));
	break;
case REPE_SCAS_M8_1:
	repe_scas_1(instr.get_operand<M8>(0));
	break;
case REPNE_CMPS_M16_M16:
	repne_cmps(instr.get_operand<M16>(0), instr.get_operand<M16>(1));
	break;
case REPNE_CMPS_M32_M32:
	repne_cmps(instr.get_operand<M32>(0), instr.get_operand<M32>(1));
	break;
case REPNE_CMPS_M64_M64:
	repne_cmps(instr.get_operand<M64>(0), instr.get_operand<M64>(1));
	break;
case REPNE_CMPS_M8_M8:
	repne_cmps(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REPNE_CMPS_M8_M8_1:
	repne_cmps_1(instr.get_operand<M8>(0), instr.get_operand<M8>(1));
	break;
case REPNE_SCAS_M16:
	repne_scas(instr.get_operand<M16>(0));
	break;
case REPNE_SCAS_M32:
	repne_scas(instr.get_operand<M32>(0));
	break;
case REPNE_SCAS_M64:
	repne_scas(instr.get_operand<M64>(0));
	break;
case REPNE_SCAS_M8:
	repne_scas(instr.get_operand<M8>(0));
	break;
case REPNE_SCAS_M8_1:
	repne_scas_1(instr.get_operand<M8>(0));
	break;
case RET:
	ret();
	break;
case RET_FAR:
	ret(instr.get_operand<Far>(0));
	break;
case RET_IMM16:
	ret(instr.get_operand<Imm16>(0));
	break;
case RET_IMM16_FAR:
	ret(instr.get_operand<Imm16>(0), instr.get_operand<Far>(1));
	break;
case ROL_M16_CL:
	rol(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case ROL_M16_IMM8:
	rol(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_M16_ONE:
	rol(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case ROL_M32_CL:
	rol(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case ROL_M32_IMM8:
	rol(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_M32_ONE:
	rol(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case ROL_M64_CL:
	rol(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case ROL_M64_IMM8:
	rol(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_M64_ONE:
	rol(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case ROL_M8_CL:
	rol(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case ROL_M8_IMM8:
	rol(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_M8_ONE:
	rol(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case ROL_R16_CL:
	rol(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case ROL_R16_IMM8:
	rol(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_R16_ONE:
	rol(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case ROL_R32_CL:
	rol(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case ROL_R32_IMM8:
	rol(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_R32_ONE:
	rol(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case ROL_R64_CL:
	rol(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case ROL_R64_IMM8:
	rol(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_R64_ONE:
	rol(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case ROL_R8_CL:
	rol(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case ROL_R8_IMM8:
	rol(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_R8_ONE:
	rol(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case ROL_RH_CL:
	rol(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case ROL_RH_IMM8:
	rol(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case ROL_RH_ONE:
	rol(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case ROR_M16_CL:
	ror(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case ROR_M16_IMM8:
	ror(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_M16_ONE:
	ror(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case ROR_M32_CL:
	ror(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case ROR_M32_IMM8:
	ror(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_M32_ONE:
	ror(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case ROR_M64_CL:
	ror(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case ROR_M64_IMM8:
	ror(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_M64_ONE:
	ror(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case ROR_M8_CL:
	ror(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case ROR_M8_IMM8:
	ror(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_M8_ONE:
	ror(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case ROR_R16_CL:
	ror(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case ROR_R16_IMM8:
	ror(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_R16_ONE:
	ror(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case ROR_R32_CL:
	ror(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case ROR_R32_IMM8:
	ror(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_R32_ONE:
	ror(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case ROR_R64_CL:
	ror(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case ROR_R64_IMM8:
	ror(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_R64_ONE:
	ror(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case ROR_R8_CL:
	ror(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case ROR_R8_IMM8:
	ror(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_R8_ONE:
	ror(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case ROR_RH_CL:
	ror(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case ROR_RH_IMM8:
	ror(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case ROR_RH_ONE:
	ror(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case RORX_R32_M32_IMM8:
	rorx(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case RORX_R32_R32_IMM8:
	rorx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case RORX_R64_M64_IMM8:
	rorx(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case RORX_R64_R64_IMM8:
	rorx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDPD_XMM_M128_IMM8:
	roundpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDPD_XMM_XMM_IMM8:
	roundpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDPS_XMM_M128_IMM8:
	roundps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDPS_XMM_XMM_IMM8:
	roundps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDSD_XMM_M64_IMM8:
	roundsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDSD_XMM_XMM_IMM8:
	roundsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDSS_XMM_M32_IMM8:
	roundss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Imm8>(2));
	break;
case ROUNDSS_XMM_XMM_IMM8:
	roundss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case RSQRTPS_XMM_M128:
	rsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case RSQRTPS_XMM_XMM:
	rsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case RSQRTSS_XMM_M32:
	rsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case RSQRTSS_XMM_XMM:
	rsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SAHF:
	sahf();
	break;
case SAL_M16_CL:
	sal(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case SAL_M16_IMM8:
	sal(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_M16_ONE:
	sal(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case SAL_M32_CL:
	sal(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case SAL_M32_IMM8:
	sal(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_M32_ONE:
	sal(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case SAL_M64_CL:
	sal(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case SAL_M64_IMM8:
	sal(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_M64_ONE:
	sal(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case SAL_M8_CL:
	sal(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case SAL_M8_IMM8:
	sal(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_M8_ONE:
	sal(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case SAL_R16_CL:
	sal(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case SAL_R16_IMM8:
	sal(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_R16_ONE:
	sal(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case SAL_R32_CL:
	sal(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case SAL_R32_IMM8:
	sal(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_R32_ONE:
	sal(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case SAL_R64_CL:
	sal(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case SAL_R64_IMM8:
	sal(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_R64_ONE:
	sal(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case SAL_R8_CL:
	sal(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case SAL_R8_IMM8:
	sal(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_R8_ONE:
	sal(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case SAL_RH_CL:
	sal(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case SAL_RH_IMM8:
	sal(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SAL_RH_ONE:
	sal(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case SAR_M16_CL:
	sar(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case SAR_M16_IMM8:
	sar(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_M16_ONE:
	sar(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case SAR_M32_CL:
	sar(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case SAR_M32_IMM8:
	sar(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_M32_ONE:
	sar(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case SAR_M64_CL:
	sar(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case SAR_M64_IMM8:
	sar(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_M64_ONE:
	sar(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case SAR_M8_CL:
	sar(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case SAR_M8_IMM8:
	sar(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_M8_ONE:
	sar(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case SAR_R16_CL:
	sar(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case SAR_R16_IMM8:
	sar(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_R16_ONE:
	sar(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case SAR_R32_CL:
	sar(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case SAR_R32_IMM8:
	sar(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_R32_ONE:
	sar(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case SAR_R64_CL:
	sar(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case SAR_R64_IMM8:
	sar(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_R64_ONE:
	sar(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case SAR_R8_CL:
	sar(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case SAR_R8_IMM8:
	sar(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_R8_ONE:
	sar(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case SAR_RH_CL:
	sar(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case SAR_RH_IMM8:
	sar(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SAR_RH_ONE:
	sar(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case SARX_R32_M32_R32:
	sarx(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<R32>(2));
	break;
case SARX_R32_R32_R32:
	sarx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case SARX_R64_M64_R64:
	sarx(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<R64>(2));
	break;
case SARX_R64_R64_R64:
	sarx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case SBB_AL_IMM8:
	sbb(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_AX_IMM16:
	sbb(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case SBB_EAX_IMM32:
	sbb(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_M16_IMM16:
	sbb(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case SBB_M16_IMM8:
	sbb(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_M16_R16:
	sbb(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case SBB_M32_IMM32:
	sbb(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_M32_IMM8:
	sbb(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_M32_R32:
	sbb(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case SBB_M64_IMM32:
	sbb(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_M64_IMM8:
	sbb(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_M64_R64:
	sbb(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case SBB_M8_IMM8:
	sbb(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_M8_R8:
	sbb(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case SBB_M8_RH:
	sbb(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case SBB_R16_IMM16:
	sbb(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case SBB_R16_IMM8:
	sbb(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_R16_M16:
	sbb(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case SBB_R16_R16:
	sbb(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case SBB_R16_R16_1:
	sbb_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case SBB_R32_IMM32:
	sbb(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_R32_IMM8:
	sbb(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_R32_M32:
	sbb(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case SBB_R32_R32:
	sbb(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case SBB_R32_R32_1:
	sbb_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case SBB_R64_IMM32:
	sbb(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_R64_IMM8:
	sbb(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_R64_M64:
	sbb(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case SBB_R64_R64:
	sbb(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case SBB_R64_R64_1:
	sbb_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case SBB_R8_IMM8:
	sbb(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_R8_M8:
	sbb(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case SBB_R8_R8:
	sbb(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case SBB_R8_R8_1:
	sbb_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case SBB_R8_RH:
	sbb(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case SBB_R8_RH_1:
	sbb_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case SBB_RAX_IMM32:
	sbb(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case SBB_RH_IMM8:
	sbb(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SBB_RH_M8:
	sbb(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case SBB_RH_R8:
	sbb(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case SBB_RH_R8_1:
	sbb_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case SBB_RH_RH:
	sbb(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case SBB_RH_RH_1:
	sbb_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case SCAS_M16:
	scas(instr.get_operand<M16>(0));
	break;
case SCAS_M32:
	scas(instr.get_operand<M32>(0));
	break;
case SCAS_M64:
	scas(instr.get_operand<M64>(0));
	break;
case SCAS_M8:
	scas(instr.get_operand<M8>(0));
	break;
case SCASB:
	scasb();
	break;
case SCASD:
	scasd();
	break;
case SCASQ:
	scasq();
	break;
case SCASW:
	scasw();
	break;
case SETA_M8:
	seta(instr.get_operand<M8>(0));
	break;
case SETA_R8:
	seta(instr.get_operand<R8>(0));
	break;
case SETA_RH:
	seta(instr.get_operand<Rh>(0));
	break;
case SETAE_M8:
	setae(instr.get_operand<M8>(0));
	break;
case SETAE_R8:
	setae(instr.get_operand<R8>(0));
	break;
case SETAE_RH:
	setae(instr.get_operand<Rh>(0));
	break;
case SETB_M8:
	setb(instr.get_operand<M8>(0));
	break;
case SETB_R8:
	setb(instr.get_operand<R8>(0));
	break;
case SETB_RH:
	setb(instr.get_operand<Rh>(0));
	break;
case SETBE_M8:
	setbe(instr.get_operand<M8>(0));
	break;
case SETBE_R8:
	setbe(instr.get_operand<R8>(0));
	break;
case SETBE_RH:
	setbe(instr.get_operand<Rh>(0));
	break;
case SETC_M8:
	setc(instr.get_operand<M8>(0));
	break;
case SETC_R8:
	setc(instr.get_operand<R8>(0));
	break;
case SETC_RH:
	setc(instr.get_operand<Rh>(0));
	break;
case SETE_M8:
	sete(instr.get_operand<M8>(0));
	break;
case SETE_R8:
	sete(instr.get_operand<R8>(0));
	break;
case SETE_RH:
	sete(instr.get_operand<Rh>(0));
	break;
case SETG_M8:
	setg(instr.get_operand<M8>(0));
	break;
case SETG_R8:
	setg(instr.get_operand<R8>(0));
	break;
case SETG_RH:
	setg(instr.get_operand<Rh>(0));
	break;
case SETGE_M8:
	setge(instr.get_operand<M8>(0));
	break;
case SETGE_R8:
	setge(instr.get_operand<R8>(0));
	break;
case SETGE_RH:
	setge(instr.get_operand<Rh>(0));
	break;
case SETL_M8:
	setl(instr.get_operand<M8>(0));
	break;
case SETL_R8:
	setl(instr.get_operand<R8>(0));
	break;
case SETL_RH:
	setl(instr.get_operand<Rh>(0));
	break;
case SETLE_M8:
	setle(instr.get_operand<M8>(0));
	break;
case SETLE_R8:
	setle(instr.get_operand<R8>(0));
	break;
case SETLE_RH:
	setle(instr.get_operand<Rh>(0));
	break;
case SETNA_M8:
	setna(instr.get_operand<M8>(0));
	break;
case SETNA_R8:
	setna(instr.get_operand<R8>(0));
	break;
case SETNA_RH:
	setna(instr.get_operand<Rh>(0));
	break;
case SETNAE_M8:
	setnae(instr.get_operand<M8>(0));
	break;
case SETNAE_R8:
	setnae(instr.get_operand<R8>(0));
	break;
case SETNAE_RH:
	setnae(instr.get_operand<Rh>(0));
	break;
case SETNB_M8:
	setnb(instr.get_operand<M8>(0));
	break;
case SETNB_R8:
	setnb(instr.get_operand<R8>(0));
	break;
case SETNB_RH:
	setnb(instr.get_operand<Rh>(0));
	break;
case SETNBE_M8:
	setnbe(instr.get_operand<M8>(0));
	break;
case SETNBE_R8:
	setnbe(instr.get_operand<R8>(0));
	break;
case SETNBE_RH:
	setnbe(instr.get_operand<Rh>(0));
	break;
case SETNC_M8:
	setnc(instr.get_operand<M8>(0));
	break;
case SETNC_R8:
	setnc(instr.get_operand<R8>(0));
	break;
case SETNC_RH:
	setnc(instr.get_operand<Rh>(0));
	break;
case SETNE_M8:
	setne(instr.get_operand<M8>(0));
	break;
case SETNE_R8:
	setne(instr.get_operand<R8>(0));
	break;
case SETNE_RH:
	setne(instr.get_operand<Rh>(0));
	break;
case SETNG_M8:
	setng(instr.get_operand<M8>(0));
	break;
case SETNG_R8:
	setng(instr.get_operand<R8>(0));
	break;
case SETNG_RH:
	setng(instr.get_operand<Rh>(0));
	break;
case SETNGE_M8:
	setnge(instr.get_operand<M8>(0));
	break;
case SETNGE_R8:
	setnge(instr.get_operand<R8>(0));
	break;
case SETNGE_RH:
	setnge(instr.get_operand<Rh>(0));
	break;
case SETNL_M8:
	setnl(instr.get_operand<M8>(0));
	break;
case SETNL_R8:
	setnl(instr.get_operand<R8>(0));
	break;
case SETNL_RH:
	setnl(instr.get_operand<Rh>(0));
	break;
case SETNLE_M8:
	setnle(instr.get_operand<M8>(0));
	break;
case SETNLE_R8:
	setnle(instr.get_operand<R8>(0));
	break;
case SETNLE_RH:
	setnle(instr.get_operand<Rh>(0));
	break;
case SETNO_M8:
	setno(instr.get_operand<M8>(0));
	break;
case SETNO_R8:
	setno(instr.get_operand<R8>(0));
	break;
case SETNO_RH:
	setno(instr.get_operand<Rh>(0));
	break;
case SETNP_M8:
	setnp(instr.get_operand<M8>(0));
	break;
case SETNP_R8:
	setnp(instr.get_operand<R8>(0));
	break;
case SETNP_RH:
	setnp(instr.get_operand<Rh>(0));
	break;
case SETNS_M8:
	setns(instr.get_operand<M8>(0));
	break;
case SETNS_R8:
	setns(instr.get_operand<R8>(0));
	break;
case SETNS_RH:
	setns(instr.get_operand<Rh>(0));
	break;
case SETNZ_M8:
	setnz(instr.get_operand<M8>(0));
	break;
case SETNZ_R8:
	setnz(instr.get_operand<R8>(0));
	break;
case SETNZ_RH:
	setnz(instr.get_operand<Rh>(0));
	break;
case SETO_M8:
	seto(instr.get_operand<M8>(0));
	break;
case SETO_R8:
	seto(instr.get_operand<R8>(0));
	break;
case SETO_RH:
	seto(instr.get_operand<Rh>(0));
	break;
case SETP_M8:
	setp(instr.get_operand<M8>(0));
	break;
case SETP_R8:
	setp(instr.get_operand<R8>(0));
	break;
case SETP_RH:
	setp(instr.get_operand<Rh>(0));
	break;
case SETPE_M8:
	setpe(instr.get_operand<M8>(0));
	break;
case SETPE_R8:
	setpe(instr.get_operand<R8>(0));
	break;
case SETPE_RH:
	setpe(instr.get_operand<Rh>(0));
	break;
case SETPO_M8:
	setpo(instr.get_operand<M8>(0));
	break;
case SETPO_R8:
	setpo(instr.get_operand<R8>(0));
	break;
case SETPO_RH:
	setpo(instr.get_operand<Rh>(0));
	break;
case SETS_M8:
	sets(instr.get_operand<M8>(0));
	break;
case SETS_R8:
	sets(instr.get_operand<R8>(0));
	break;
case SETS_RH:
	sets(instr.get_operand<Rh>(0));
	break;
case SETZ_M8:
	setz(instr.get_operand<M8>(0));
	break;
case SETZ_R8:
	setz(instr.get_operand<R8>(0));
	break;
case SETZ_RH:
	setz(instr.get_operand<Rh>(0));
	break;
case SFENCE:
	sfence();
	break;
case SHL_M16_CL:
	shl(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case SHL_M16_IMM8:
	shl(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_M16_ONE:
	shl(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case SHL_M32_CL:
	shl(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case SHL_M32_IMM8:
	shl(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_M32_ONE:
	shl(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case SHL_M64_CL:
	shl(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case SHL_M64_IMM8:
	shl(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_M64_ONE:
	shl(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case SHL_M8_CL:
	shl(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case SHL_M8_IMM8:
	shl(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_M8_ONE:
	shl(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case SHL_R16_CL:
	shl(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case SHL_R16_IMM8:
	shl(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_R16_ONE:
	shl(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case SHL_R32_CL:
	shl(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case SHL_R32_IMM8:
	shl(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_R32_ONE:
	shl(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case SHL_R64_CL:
	shl(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case SHL_R64_IMM8:
	shl(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_R64_ONE:
	shl(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case SHL_R8_CL:
	shl(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case SHL_R8_IMM8:
	shl(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_R8_ONE:
	shl(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case SHL_RH_CL:
	shl(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case SHL_RH_IMM8:
	shl(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SHL_RH_ONE:
	shl(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case SHLD_M16_R16_CL:
	shld(instr.get_operand<M16>(0), instr.get_operand<R16>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_M16_R16_IMM8:
	shld(instr.get_operand<M16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm8>(2));
	break;
case SHLD_M32_R32_CL:
	shld(instr.get_operand<M32>(0), instr.get_operand<R32>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_M32_R32_IMM8:
	shld(instr.get_operand<M32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case SHLD_M64_R64_CL:
	shld(instr.get_operand<M64>(0), instr.get_operand<R64>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_M64_R64_IMM8:
	shld(instr.get_operand<M64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case SHLD_R16_R16_CL:
	shld(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_R16_R16_IMM8:
	shld(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm8>(2));
	break;
case SHLD_R32_R32_CL:
	shld(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_R32_R32_IMM8:
	shld(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case SHLD_R64_R64_CL:
	shld(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Cl>(2));
	break;
case SHLD_R64_R64_IMM8:
	shld(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case SHLX_R32_M32_R32:
	shlx(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<R32>(2));
	break;
case SHLX_R32_R32_R32:
	shlx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case SHLX_R64_M64_R64:
	shlx(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<R64>(2));
	break;
case SHLX_R64_R64_R64:
	shlx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case SHR_M16_CL:
	shr(instr.get_operand<M16>(0), instr.get_operand<Cl>(1));
	break;
case SHR_M16_IMM8:
	shr(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_M16_ONE:
	shr(instr.get_operand<M16>(0), instr.get_operand<One>(1));
	break;
case SHR_M32_CL:
	shr(instr.get_operand<M32>(0), instr.get_operand<Cl>(1));
	break;
case SHR_M32_IMM8:
	shr(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_M32_ONE:
	shr(instr.get_operand<M32>(0), instr.get_operand<One>(1));
	break;
case SHR_M64_CL:
	shr(instr.get_operand<M64>(0), instr.get_operand<Cl>(1));
	break;
case SHR_M64_IMM8:
	shr(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_M64_ONE:
	shr(instr.get_operand<M64>(0), instr.get_operand<One>(1));
	break;
case SHR_M8_CL:
	shr(instr.get_operand<M8>(0), instr.get_operand<Cl>(1));
	break;
case SHR_M8_IMM8:
	shr(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_M8_ONE:
	shr(instr.get_operand<M8>(0), instr.get_operand<One>(1));
	break;
case SHR_R16_CL:
	shr(instr.get_operand<R16>(0), instr.get_operand<Cl>(1));
	break;
case SHR_R16_IMM8:
	shr(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_R16_ONE:
	shr(instr.get_operand<R16>(0), instr.get_operand<One>(1));
	break;
case SHR_R32_CL:
	shr(instr.get_operand<R32>(0), instr.get_operand<Cl>(1));
	break;
case SHR_R32_IMM8:
	shr(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_R32_ONE:
	shr(instr.get_operand<R32>(0), instr.get_operand<One>(1));
	break;
case SHR_R64_CL:
	shr(instr.get_operand<R64>(0), instr.get_operand<Cl>(1));
	break;
case SHR_R64_IMM8:
	shr(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_R64_ONE:
	shr(instr.get_operand<R64>(0), instr.get_operand<One>(1));
	break;
case SHR_R8_CL:
	shr(instr.get_operand<R8>(0), instr.get_operand<Cl>(1));
	break;
case SHR_R8_IMM8:
	shr(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_R8_ONE:
	shr(instr.get_operand<R8>(0), instr.get_operand<One>(1));
	break;
case SHR_RH_CL:
	shr(instr.get_operand<Rh>(0), instr.get_operand<Cl>(1));
	break;
case SHR_RH_IMM8:
	shr(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SHR_RH_ONE:
	shr(instr.get_operand<Rh>(0), instr.get_operand<One>(1));
	break;
case SHRD_M16_R16_CL:
	shrd(instr.get_operand<M16>(0), instr.get_operand<R16>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_M16_R16_IMM8:
	shrd(instr.get_operand<M16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm8>(2));
	break;
case SHRD_M32_R32_CL:
	shrd(instr.get_operand<M32>(0), instr.get_operand<R32>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_M32_R32_IMM8:
	shrd(instr.get_operand<M32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case SHRD_M64_R64_CL:
	shrd(instr.get_operand<M64>(0), instr.get_operand<R64>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_M64_R64_IMM8:
	shrd(instr.get_operand<M64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case SHRD_R16_R16_CL:
	shrd(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_R16_R16_IMM8:
	shrd(instr.get_operand<R16>(0), instr.get_operand<R16>(1), instr.get_operand<Imm8>(2));
	break;
case SHRD_R32_R32_CL:
	shrd(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_R32_R32_IMM8:
	shrd(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<Imm8>(2));
	break;
case SHRD_R64_R64_CL:
	shrd(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Cl>(2));
	break;
case SHRD_R64_R64_IMM8:
	shrd(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<Imm8>(2));
	break;
case SHRX_R32_M32_R32:
	shrx(instr.get_operand<R32>(0), instr.get_operand<M32>(1), instr.get_operand<R32>(2));
	break;
case SHRX_R32_R32_R32:
	shrx(instr.get_operand<R32>(0), instr.get_operand<R32>(1), instr.get_operand<R32>(2));
	break;
case SHRX_R64_M64_R64:
	shrx(instr.get_operand<R64>(0), instr.get_operand<M64>(1), instr.get_operand<R64>(2));
	break;
case SHRX_R64_R64_R64:
	shrx(instr.get_operand<R64>(0), instr.get_operand<R64>(1), instr.get_operand<R64>(2));
	break;
case SHUFPD_XMM_M128_IMM8:
	shufpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case SHUFPD_XMM_XMM_IMM8:
	shufpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case SHUFPS_XMM_M128_IMM8:
	shufps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case SHUFPS_XMM_XMM_IMM8:
	shufps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case SQRTPD_XMM_M128:
	sqrtpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case SQRTPD_XMM_XMM:
	sqrtpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SQRTPS_XMM_M128:
	sqrtps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case SQRTPS_XMM_XMM:
	sqrtps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SQRTSD_XMM_M64:
	sqrtsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case SQRTSD_XMM_XMM:
	sqrtsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SQRTSS_XMM_M32:
	sqrtss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case SQRTSS_XMM_XMM:
	sqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case STC:
	stc();
	break;
case STD:
	std_();
	break;
case STI:
	sti();
	break;
case STMXCSR_M32:
	stmxcsr(instr.get_operand<M32>(0));
	break;
case STOS_M16:
	stos(instr.get_operand<M16>(0));
	break;
case STOS_M32:
	stos(instr.get_operand<M32>(0));
	break;
case STOS_M64:
	stos(instr.get_operand<M64>(0));
	break;
case STOS_M8:
	stos(instr.get_operand<M8>(0));
	break;
case STOSB:
	stosb();
	break;
case STOSD:
	stosd();
	break;
case STOSQ:
	stosq();
	break;
case STOSW:
	stosw();
	break;
case SUB_AL_IMM8:
	sub(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_AX_IMM16:
	sub(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case SUB_EAX_IMM32:
	sub(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_M16_IMM16:
	sub(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case SUB_M16_IMM8:
	sub(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_M16_R16:
	sub(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case SUB_M32_IMM32:
	sub(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_M32_IMM8:
	sub(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_M32_R32:
	sub(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case SUB_M64_IMM32:
	sub(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_M64_IMM8:
	sub(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_M64_R64:
	sub(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case SUB_M8_IMM8:
	sub(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_M8_R8:
	sub(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case SUB_M8_RH:
	sub(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case SUB_R16_IMM16:
	sub(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case SUB_R16_IMM8:
	sub(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_R16_M16:
	sub(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case SUB_R16_R16:
	sub(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case SUB_R16_R16_1:
	sub_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case SUB_R32_IMM32:
	sub(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_R32_IMM8:
	sub(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_R32_M32:
	sub(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case SUB_R32_R32:
	sub(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case SUB_R32_R32_1:
	sub_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case SUB_R64_IMM32:
	sub(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_R64_IMM8:
	sub(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_R64_M64:
	sub(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case SUB_R64_R64:
	sub(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case SUB_R64_R64_1:
	sub_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case SUB_R8_IMM8:
	sub(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_R8_M8:
	sub(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case SUB_R8_R8:
	sub(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case SUB_R8_R8_1:
	sub_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case SUB_R8_RH:
	sub(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case SUB_R8_RH_1:
	sub_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case SUB_RAX_IMM32:
	sub(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case SUB_RH_IMM8:
	sub(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case SUB_RH_M8:
	sub(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case SUB_RH_R8:
	sub(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case SUB_RH_R8_1:
	sub_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case SUB_RH_RH:
	sub(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case SUB_RH_RH_1:
	sub_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case SUBPD_XMM_M128:
	subpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case SUBPD_XMM_XMM:
	subpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SUBPS_XMM_M128:
	subps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case SUBPS_XMM_XMM:
	subps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SUBSD_XMM_M64:
	subsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case SUBSD_XMM_XMM:
	subsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SUBSS_XMM_M32:
	subss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case SUBSS_XMM_XMM:
	subss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case SWAPGS:
	swapgs();
	break;
case SYSCALL:
	syscall();
	break;
case SYSENTER:
	sysenter();
	break;
case SYSEXIT:
	sysexit();
	break;
case SYSEXIT_PREFREXW:
	sysexit(instr.get_operand<PrefRexW>(0));
	break;
case SYSRET:
	sysret();
	break;
case SYSRET_PREFREXW:
	sysret(instr.get_operand<PrefRexW>(0));
	break;
case TEST_AL_IMM8:
	test(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case TEST_AX_IMM16:
	test(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case TEST_EAX_IMM32:
	test(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_M16_IMM16:
	test(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case TEST_M16_R16:
	test(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case TEST_M32_IMM32:
	test(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_M32_R32:
	test(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case TEST_M64_IMM32:
	test(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_M64_R64:
	test(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case TEST_M8_IMM8:
	test(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case TEST_M8_R8:
	test(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case TEST_M8_RH:
	test(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case TEST_R16_IMM16:
	test(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case TEST_R16_R16:
	test(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case TEST_R32_IMM32:
	test(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_R32_R32:
	test(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case TEST_R64_IMM32:
	test(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_R64_R64:
	test(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case TEST_R8_IMM8:
	test(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case TEST_R8_R8:
	test(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case TEST_R8_RH:
	test(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case TEST_RAX_IMM32:
	test(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case TEST_RH_IMM8:
	test(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case TEST_RH_R8:
	test(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case TEST_RH_RH:
	test(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case TZCNT_R16_M16:
	tzcnt(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case TZCNT_R16_R16:
	tzcnt(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case TZCNT_R32_M32:
	tzcnt(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case TZCNT_R32_R32:
	tzcnt(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case TZCNT_R64_M64:
	tzcnt(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case TZCNT_R64_R64:
	tzcnt(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case UCOMISD_XMM_M64:
	ucomisd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case UCOMISD_XMM_XMM:
	ucomisd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case UCOMISS_XMM_M32:
	ucomiss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case UCOMISS_XMM_XMM:
	ucomiss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case UD2:
	ud2();
	break;
case UNPCKHPD_XMM_M128:
	unpckhpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case UNPCKHPD_XMM_XMM:
	unpckhpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case UNPCKHPS_XMM_M128:
	unpckhps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case UNPCKHPS_XMM_XMM:
	unpckhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case UNPCKLPD_XMM_M128:
	unpcklpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case UNPCKLPD_XMM_XMM:
	unpcklpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case UNPCKLPS_XMM_M128:
	unpcklps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case UNPCKLPS_XMM_XMM:
	unpcklps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VADDPD_XMM_XMM_M128:
	vaddpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VADDPD_XMM_XMM_XMM:
	vaddpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDPD_YMM_YMM_M256:
	vaddpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VADDPD_YMM_YMM_YMM:
	vaddpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VADDPS_XMM_XMM_M128:
	vaddps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VADDPS_XMM_XMM_XMM:
	vaddps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDPS_YMM_YMM_M256:
	vaddps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VADDPS_YMM_YMM_YMM:
	vaddps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VADDSD_XMM_XMM_M64:
	vaddsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VADDSD_XMM_XMM_XMM:
	vaddsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDSS_XMM_XMM_M32:
	vaddss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VADDSS_XMM_XMM_XMM:
	vaddss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDSUBPD_XMM_XMM_M128:
	vaddsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VADDSUBPD_XMM_XMM_XMM:
	vaddsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDSUBPD_YMM_YMM_M256:
	vaddsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VADDSUBPD_YMM_YMM_YMM:
	vaddsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VADDSUBPS_XMM_XMM_M128:
	vaddsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VADDSUBPS_XMM_XMM_XMM:
	vaddsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VADDSUBPS_YMM_YMM_M256:
	vaddsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VADDSUBPS_YMM_YMM_YMM:
	vaddsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VAESDEC_XMM_XMM_M128:
	vaesdec(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VAESDEC_XMM_XMM_XMM:
	vaesdec(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VAESDECLAST_XMM_XMM_M128:
	vaesdeclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VAESDECLAST_XMM_XMM_XMM:
	vaesdeclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VAESENC_XMM_XMM_M128:
	vaesenc(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VAESENC_XMM_XMM_XMM:
	vaesenc(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VAESENCLAST_XMM_XMM_M128:
	vaesenclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VAESENCLAST_XMM_XMM_XMM:
	vaesenclast(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VAESIMC_XMM_M128:
	vaesimc(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VAESIMC_XMM_XMM:
	vaesimc(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VAESKEYGENASSIST_XMM_M128_IMM8:
	vaeskeygenassist(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VAESKEYGENASSIST_XMM_XMM_IMM8:
	vaeskeygenassist(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VANDNPD_XMM_XMM_M128:
	vandnpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VANDNPD_XMM_XMM_XMM:
	vandnpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VANDNPD_YMM_YMM_M256:
	vandnpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VANDNPD_YMM_YMM_YMM:
	vandnpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VANDNPS_XMM_XMM_M128:
	vandnps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VANDNPS_XMM_XMM_XMM:
	vandnps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VANDNPS_YMM_YMM_M256:
	vandnps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VANDNPS_YMM_YMM_YMM:
	vandnps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VANDPD_XMM_XMM_M128:
	vandpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VANDPD_XMM_XMM_XMM:
	vandpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VANDPD_YMM_YMM_M256:
	vandpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VANDPD_YMM_YMM_YMM:
	vandpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VANDPS_XMM_XMM_M128:
	vandps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VANDPS_XMM_XMM_XMM:
	vandps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VANDPS_YMM_YMM_M256:
	vandps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VANDPS_YMM_YMM_YMM:
	vandps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VBLENDPD_XMM_XMM_M128_IMM8:
	vblendpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPD_XMM_XMM_XMM_IMM8:
	vblendpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPD_YMM_YMM_M256_IMM8:
	vblendpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPD_YMM_YMM_YMM_IMM8:
	vblendpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPS_XMM_XMM_M128_IMM8:
	vblendps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPS_XMM_XMM_XMM_IMM8:
	vblendps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPS_YMM_YMM_M256_IMM8:
	vblendps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDPS_YMM_YMM_YMM_IMM8:
	vblendps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VBLENDVPD_XMM_XMM_M128_XMM:
	vblendvpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Xmm>(3));
	break;
case VBLENDVPD_XMM_XMM_XMM_XMM:
	vblendvpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Xmm>(3));
	break;
case VBLENDVPD_YMM_YMM_M256_YMM:
	vblendvpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Ymm>(3));
	break;
case VBLENDVPD_YMM_YMM_YMM_YMM:
	vblendvpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Ymm>(3));
	break;
case VBLENDVPS_XMM_XMM_M128_XMM:
	vblendvps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Xmm>(3));
	break;
case VBLENDVPS_XMM_XMM_XMM_XMM:
	vblendvps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Xmm>(3));
	break;
case VBLENDVPS_YMM_YMM_M256_YMM:
	vblendvps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Ymm>(3));
	break;
case VBLENDVPS_YMM_YMM_YMM_YMM:
	vblendvps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Ymm>(3));
	break;
case VBROADCASTF128_YMM_M128:
	vbroadcastf128(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VBROADCASTI128_YMM_M128:
	vbroadcasti128(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VBROADCASTSD_YMM_M64:
	vbroadcastsd(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VBROADCASTSD_YMM_XMM:
	vbroadcastsd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VBROADCASTSS_XMM_M32:
	vbroadcastss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VBROADCASTSS_XMM_XMM:
	vbroadcastss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VBROADCASTSS_YMM_M32:
	vbroadcastss(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1));
	break;
case VBROADCASTSS_YMM_XMM:
	vbroadcastss(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VCMPPD_XMM_XMM_M128_IMM8:
	vcmppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPD_XMM_XMM_XMM_IMM8:
	vcmppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPD_YMM_YMM_M256_IMM8:
	vcmppd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPD_YMM_YMM_YMM_IMM8:
	vcmppd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPS_XMM_XMM_M128_IMM8:
	vcmpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPS_XMM_XMM_XMM_IMM8:
	vcmpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPS_YMM_YMM_M256_IMM8:
	vcmpps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPPS_YMM_YMM_YMM_IMM8:
	vcmpps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPSD_XMM_XMM_M64_IMM8:
	vcmpsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPSD_XMM_XMM_XMM_IMM8:
	vcmpsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPSS_XMM_XMM_M32_IMM8:
	vcmpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2), instr.get_operand<Imm8>(3));
	break;
case VCMPSS_XMM_XMM_XMM_IMM8:
	vcmpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VCOMISD_XMM_M64:
	vcomisd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VCOMISD_XMM_XMM:
	vcomisd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCOMISS_XMM_M32:
	vcomiss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VCOMISS_XMM_XMM:
	vcomiss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTDQ2PD_XMM_M64:
	vcvtdq2pd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VCVTDQ2PD_XMM_XMM:
	vcvtdq2pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTDQ2PD_YMM_M128:
	vcvtdq2pd(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VCVTDQ2PD_YMM_YMM:
	vcvtdq2pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTDQ2PS_XMM_M128:
	vcvtdq2ps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTDQ2PS_XMM_XMM:
	vcvtdq2ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTDQ2PS_YMM_M256:
	vcvtdq2ps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VCVTDQ2PS_YMM_YMM:
	vcvtdq2ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTPD2DQ_XMM_M128:
	vcvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTPD2DQ_XMM_M256:
	vcvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M256>(1));
	break;
case VCVTPD2DQ_XMM_XMM:
	vcvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPD2DQ_XMM_YMM:
	vcvtpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTPD2PS_XMM_M128:
	vcvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTPD2PS_XMM_M256:
	vcvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<M256>(1));
	break;
case VCVTPD2PS_XMM_XMM:
	vcvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPD2PS_XMM_YMM:
	vcvtpd2ps(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTPH2PS_XMM_M64:
	vcvtph2ps(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VCVTPH2PS_XMM_XMM:
	vcvtph2ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPH2PS_YMM_M128:
	vcvtph2ps(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VCVTPH2PS_YMM_XMM:
	vcvtph2ps(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPS2DQ_XMM_M128:
	vcvtps2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTPS2DQ_XMM_XMM:
	vcvtps2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPS2DQ_YMM_M256:
	vcvtps2dq(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VCVTPS2DQ_YMM_YMM:
	vcvtps2dq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTPS2PD_XMM_M64:
	vcvtps2pd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VCVTPS2PD_XMM_XMM:
	vcvtps2pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPS2PD_YMM_M128:
	vcvtps2pd(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VCVTPS2PD_YMM_XMM:
	vcvtps2pd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTPS2PH_M128_YMM_IMM8:
	vcvtps2ph(instr.get_operand<M128>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VCVTPS2PH_M64_XMM_IMM8:
	vcvtps2ph(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VCVTPS2PH_XMM_XMM_IMM8:
	vcvtps2ph(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VCVTPS2PH_XMM_YMM_IMM8:
	vcvtps2ph(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VCVTSD2SI_R32_M64:
	vcvtsd2si(instr.get_operand<R32>(0), instr.get_operand<M64>(1));
	break;
case VCVTSD2SI_R32_XMM:
	vcvtsd2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTSD2SI_R64_M64:
	vcvtsd2si(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case VCVTSD2SI_R64_XMM:
	vcvtsd2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTSD2SS_XMM_XMM_M64:
	vcvtsd2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VCVTSD2SS_XMM_XMM_XMM:
	vcvtsd2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VCVTSI2SD_XMM_XMM_M32:
	vcvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VCVTSI2SD_XMM_XMM_M64:
	vcvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VCVTSI2SD_XMM_XMM_R32:
	vcvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R32>(2));
	break;
case VCVTSI2SD_XMM_XMM_R64:
	vcvtsi2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R64>(2));
	break;
case VCVTSI2SS_XMM_XMM_M32:
	vcvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VCVTSI2SS_XMM_XMM_M64:
	vcvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VCVTSI2SS_XMM_XMM_R32:
	vcvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R32>(2));
	break;
case VCVTSI2SS_XMM_XMM_R64:
	vcvtsi2ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R64>(2));
	break;
case VCVTSS2SD_XMM_XMM_M32:
	vcvtss2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VCVTSS2SD_XMM_XMM_XMM:
	vcvtss2sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VCVTSS2SI_R32_M32:
	vcvtss2si(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case VCVTSS2SI_R32_XMM:
	vcvtss2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTSS2SI_R64_M32:
	vcvtss2si(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case VCVTSS2SI_R64_XMM:
	vcvtss2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTPD2DQ_XMM_M128:
	vcvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTTPD2DQ_XMM_M256:
	vcvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<M256>(1));
	break;
case VCVTTPD2DQ_XMM_XMM:
	vcvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTPD2DQ_XMM_YMM:
	vcvttpd2dq(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTTPS2DQ_XMM_M128:
	vcvttps2dq(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VCVTTPS2DQ_XMM_XMM:
	vcvttps2dq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTPS2DQ_YMM_M256:
	vcvttps2dq(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VCVTTPS2DQ_YMM_YMM:
	vcvttps2dq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VCVTTSD2SI_R32_M64:
	vcvttsd2si(instr.get_operand<R32>(0), instr.get_operand<M64>(1));
	break;
case VCVTTSD2SI_R32_XMM:
	vcvttsd2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTSD2SI_R64_M64:
	vcvttsd2si(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case VCVTTSD2SI_R64_XMM:
	vcvttsd2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTSS2SI_R32_M32:
	vcvttss2si(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case VCVTTSS2SI_R32_XMM:
	vcvttss2si(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VCVTTSS2SI_R64_M32:
	vcvttss2si(instr.get_operand<R64>(0), instr.get_operand<M32>(1));
	break;
case VCVTTSS2SI_R64_XMM:
	vcvttss2si(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VDIVPD_XMM_XMM_M128:
	vdivpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VDIVPD_XMM_XMM_XMM:
	vdivpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VDIVPD_YMM_YMM_M256:
	vdivpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VDIVPD_YMM_YMM_YMM:
	vdivpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VDIVPS_XMM_XMM_M128:
	vdivps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VDIVPS_XMM_XMM_XMM:
	vdivps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VDIVPS_YMM_YMM_M256:
	vdivps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VDIVPS_YMM_YMM_YMM:
	vdivps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VDIVSD_XMM_XMM_M64:
	vdivsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VDIVSD_XMM_XMM_XMM:
	vdivsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VDIVSS_XMM_XMM_M32:
	vdivss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VDIVSS_XMM_XMM_XMM:
	vdivss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VDPPD_XMM_XMM_M128_IMM8:
	vdppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VDPPD_XMM_XMM_XMM_IMM8:
	vdppd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VDPPS_XMM_XMM_M128_IMM8:
	vdpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VDPPS_XMM_XMM_XMM_IMM8:
	vdpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VDPPS_YMM_YMM_M256_IMM8:
	vdpps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VDPPS_YMM_YMM_YMM_IMM8:
	vdpps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VERR_M16:
	verr(instr.get_operand<M16>(0));
	break;
case VERR_R16:
	verr(instr.get_operand<R16>(0));
	break;
case VERW_M16:
	verw(instr.get_operand<M16>(0));
	break;
case VERW_R16:
	verw(instr.get_operand<R16>(0));
	break;
case VEXTRACTF128_M128_YMM_IMM8:
	vextractf128(instr.get_operand<M128>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VEXTRACTF128_XMM_YMM_IMM8:
	vextractf128(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VEXTRACTI128_M128_YMM_IMM8:
	vextracti128(instr.get_operand<M128>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VEXTRACTI128_XMM_YMM_IMM8:
	vextracti128(instr.get_operand<Xmm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VEXTRACTPS_M32_XMM_IMM8:
	vextractps(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VEXTRACTPS_R32_XMM_IMM8:
	vextractps(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VFMADD132PD_XMM_XMM_M128:
	vfmadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD132PD_XMM_XMM_XMM:
	vfmadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD132PD_YMM_YMM_M256:
	vfmadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD132PD_YMM_YMM_YMM:
	vfmadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD132PS_XMM_XMM_M128:
	vfmadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD132PS_XMM_XMM_XMM:
	vfmadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD132PS_YMM_YMM_M256:
	vfmadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD132PS_YMM_YMM_YMM:
	vfmadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD132SD_XMM_XMM_M64:
	vfmadd132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMADD132SD_XMM_XMM_XMM:
	vfmadd132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD132SS_XMM_XMM_M32:
	vfmadd132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMADD132SS_XMM_XMM_XMM:
	vfmadd132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD213PD_XMM_XMM_M128:
	vfmadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD213PD_XMM_XMM_XMM:
	vfmadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD213PD_YMM_YMM_M256:
	vfmadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD213PD_YMM_YMM_YMM:
	vfmadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD213PS_XMM_XMM_M128:
	vfmadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD213PS_XMM_XMM_XMM:
	vfmadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD213PS_YMM_YMM_M256:
	vfmadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD213PS_YMM_YMM_YMM:
	vfmadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD213SD_XMM_XMM_M64:
	vfmadd213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMADD213SD_XMM_XMM_XMM:
	vfmadd213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD213SS_XMM_XMM_M32:
	vfmadd213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMADD213SS_XMM_XMM_XMM:
	vfmadd213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD231PD_XMM_XMM_M128:
	vfmadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD231PD_XMM_XMM_XMM:
	vfmadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD231PD_YMM_YMM_M256:
	vfmadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD231PD_YMM_YMM_YMM:
	vfmadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD231PS_XMM_XMM_M128:
	vfmadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADD231PS_XMM_XMM_XMM:
	vfmadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD231PS_YMM_YMM_M256:
	vfmadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADD231PS_YMM_YMM_YMM:
	vfmadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADD231SD_XMM_XMM_M64:
	vfmadd231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMADD231SD_XMM_XMM_XMM:
	vfmadd231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADD231SS_XMM_XMM_M32:
	vfmadd231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMADD231SS_XMM_XMM_XMM:
	vfmadd231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB132PD_XMM_XMM_M128:
	vfmaddsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB132PD_XMM_XMM_XMM:
	vfmaddsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB132PD_YMM_YMM_M256:
	vfmaddsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB132PD_YMM_YMM_YMM:
	vfmaddsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADDSUB132PS_XMM_XMM_M128:
	vfmaddsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB132PS_XMM_XMM_XMM:
	vfmaddsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB132PS_YMM_YMM_M256:
	vfmaddsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB132PS_YMM_YMM_YMM:
	vfmaddsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADDSUB213PD_XMM_XMM_M128:
	vfmaddsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB213PD_XMM_XMM_XMM:
	vfmaddsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB213PD_YMM_YMM_M256:
	vfmaddsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB213PD_YMM_YMM_YMM:
	vfmaddsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADDSUB213PS_XMM_XMM_M128:
	vfmaddsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB213PS_XMM_XMM_XMM:
	vfmaddsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB213PS_YMM_YMM_M256:
	vfmaddsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB213PS_YMM_YMM_YMM:
	vfmaddsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADDSUB231PD_XMM_XMM_M128:
	vfmaddsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB231PD_XMM_XMM_XMM:
	vfmaddsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB231PD_YMM_YMM_M256:
	vfmaddsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB231PD_YMM_YMM_YMM:
	vfmaddsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMADDSUB231PS_XMM_XMM_M128:
	vfmaddsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMADDSUB231PS_XMM_XMM_XMM:
	vfmaddsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMADDSUB231PS_YMM_YMM_M256:
	vfmaddsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMADDSUB231PS_YMM_YMM_YMM:
	vfmaddsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB132PD_XMM_XMM_M128:
	vfmsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB132PD_XMM_XMM_XMM:
	vfmsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB132PD_YMM_YMM_M256:
	vfmsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB132PD_YMM_YMM_YMM:
	vfmsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB132PS_XMM_XMM_M128:
	vfmsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB132PS_XMM_XMM_XMM:
	vfmsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB132PS_YMM_YMM_M256:
	vfmsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB132PS_YMM_YMM_YMM:
	vfmsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB132SD_XMM_XMM_M64:
	vfmsub132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMSUB132SD_XMM_XMM_XMM:
	vfmsub132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB132SS_XMM_XMM_M32:
	vfmsub132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMSUB132SS_XMM_XMM_XMM:
	vfmsub132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB213PD_XMM_XMM_M128:
	vfmsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB213PD_XMM_XMM_XMM:
	vfmsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB213PD_YMM_YMM_M256:
	vfmsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB213PD_YMM_YMM_YMM:
	vfmsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB213PS_XMM_XMM_M128:
	vfmsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB213PS_XMM_XMM_XMM:
	vfmsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB213PS_YMM_YMM_M256:
	vfmsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB213PS_YMM_YMM_YMM:
	vfmsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB213SD_XMM_XMM_M64:
	vfmsub213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMSUB213SD_XMM_XMM_XMM:
	vfmsub213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB213SS_XMM_XMM_M32:
	vfmsub213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMSUB213SS_XMM_XMM_XMM:
	vfmsub213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB231PD_XMM_XMM_M128:
	vfmsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB231PD_XMM_XMM_XMM:
	vfmsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB231PD_YMM_YMM_M256:
	vfmsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB231PD_YMM_YMM_YMM:
	vfmsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB231PS_XMM_XMM_M128:
	vfmsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUB231PS_XMM_XMM_XMM:
	vfmsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB231PS_YMM_YMM_M256:
	vfmsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUB231PS_YMM_YMM_YMM:
	vfmsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUB231SD_XMM_XMM_M64:
	vfmsub231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFMSUB231SD_XMM_XMM_XMM:
	vfmsub231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUB231SS_XMM_XMM_M32:
	vfmsub231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFMSUB231SS_XMM_XMM_XMM:
	vfmsub231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD132PD_XMM_XMM_M128:
	vfmsubadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD132PD_XMM_XMM_XMM:
	vfmsubadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD132PD_YMM_YMM_M256:
	vfmsubadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD132PD_YMM_YMM_YMM:
	vfmsubadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUBADD132PS_XMM_XMM_M128:
	vfmsubadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD132PS_XMM_XMM_XMM:
	vfmsubadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD132PS_YMM_YMM_M256:
	vfmsubadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD132PS_YMM_YMM_YMM:
	vfmsubadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUBADD213PD_XMM_XMM_M128:
	vfmsubadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD213PD_XMM_XMM_XMM:
	vfmsubadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD213PD_YMM_YMM_M256:
	vfmsubadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD213PD_YMM_YMM_YMM:
	vfmsubadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUBADD213PS_XMM_XMM_M128:
	vfmsubadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD213PS_XMM_XMM_XMM:
	vfmsubadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD213PS_YMM_YMM_M256:
	vfmsubadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD213PS_YMM_YMM_YMM:
	vfmsubadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUBADD231PD_XMM_XMM_M128:
	vfmsubadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD231PD_XMM_XMM_XMM:
	vfmsubadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD231PD_YMM_YMM_M256:
	vfmsubadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD231PD_YMM_YMM_YMM:
	vfmsubadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFMSUBADD231PS_XMM_XMM_M128:
	vfmsubadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFMSUBADD231PS_XMM_XMM_XMM:
	vfmsubadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFMSUBADD231PS_YMM_YMM_M256:
	vfmsubadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFMSUBADD231PS_YMM_YMM_YMM:
	vfmsubadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD132PD_XMM_XMM_M128:
	vfnmadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD132PD_XMM_XMM_XMM:
	vfnmadd132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD132PD_YMM_YMM_M256:
	vfnmadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD132PD_YMM_YMM_YMM:
	vfnmadd132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD132PS_XMM_XMM_M128:
	vfnmadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD132PS_XMM_XMM_XMM:
	vfnmadd132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD132PS_YMM_YMM_M256:
	vfnmadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD132PS_YMM_YMM_YMM:
	vfnmadd132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD132SD_XMM_XMM_M64:
	vfnmadd132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMADD132SD_XMM_XMM_XMM:
	vfnmadd132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD132SS_XMM_XMM_M32:
	vfnmadd132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMADD132SS_XMM_XMM_XMM:
	vfnmadd132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD213PD_XMM_XMM_M128:
	vfnmadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD213PD_XMM_XMM_XMM:
	vfnmadd213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD213PD_YMM_YMM_M256:
	vfnmadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD213PD_YMM_YMM_YMM:
	vfnmadd213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD213PS_XMM_XMM_M128:
	vfnmadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD213PS_XMM_XMM_XMM:
	vfnmadd213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD213PS_YMM_YMM_M256:
	vfnmadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD213PS_YMM_YMM_YMM:
	vfnmadd213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD213SD_XMM_XMM_M64:
	vfnmadd213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMADD213SD_XMM_XMM_XMM:
	vfnmadd213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD213SS_XMM_XMM_M32:
	vfnmadd213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMADD213SS_XMM_XMM_XMM:
	vfnmadd213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD231PD_XMM_XMM_M128:
	vfnmadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD231PD_XMM_XMM_XMM:
	vfnmadd231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD231PD_YMM_YMM_M256:
	vfnmadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD231PD_YMM_YMM_YMM:
	vfnmadd231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD231PS_XMM_XMM_M128:
	vfnmadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMADD231PS_XMM_XMM_XMM:
	vfnmadd231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD231PS_YMM_YMM_M256:
	vfnmadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMADD231PS_YMM_YMM_YMM:
	vfnmadd231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMADD231SD_XMM_XMM_M64:
	vfnmadd231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMADD231SD_XMM_XMM_XMM:
	vfnmadd231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMADD231SS_XMM_XMM_M32:
	vfnmadd231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMADD231SS_XMM_XMM_XMM:
	vfnmadd231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB132PD_XMM_XMM_M128:
	vfnmsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB132PD_XMM_XMM_XMM:
	vfnmsub132pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB132PD_YMM_YMM_M256:
	vfnmsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB132PD_YMM_YMM_YMM:
	vfnmsub132pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB132PS_XMM_XMM_M128:
	vfnmsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB132PS_XMM_XMM_XMM:
	vfnmsub132ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB132PS_YMM_YMM_M256:
	vfnmsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB132PS_YMM_YMM_YMM:
	vfnmsub132ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB132SD_XMM_XMM_M64:
	vfnmsub132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMSUB132SD_XMM_XMM_XMM:
	vfnmsub132sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB132SS_XMM_XMM_M32:
	vfnmsub132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMSUB132SS_XMM_XMM_XMM:
	vfnmsub132ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB213PD_XMM_XMM_M128:
	vfnmsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB213PD_XMM_XMM_XMM:
	vfnmsub213pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB213PD_YMM_YMM_M256:
	vfnmsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB213PD_YMM_YMM_YMM:
	vfnmsub213pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB213PS_XMM_XMM_M128:
	vfnmsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB213PS_XMM_XMM_XMM:
	vfnmsub213ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB213PS_YMM_YMM_M256:
	vfnmsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB213PS_YMM_YMM_YMM:
	vfnmsub213ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB213SD_XMM_XMM_M64:
	vfnmsub213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMSUB213SD_XMM_XMM_XMM:
	vfnmsub213sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB213SS_XMM_XMM_M32:
	vfnmsub213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMSUB213SS_XMM_XMM_XMM:
	vfnmsub213ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB231PD_XMM_XMM_M128:
	vfnmsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB231PD_XMM_XMM_XMM:
	vfnmsub231pd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB231PD_YMM_YMM_M256:
	vfnmsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB231PD_YMM_YMM_YMM:
	vfnmsub231pd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB231PS_XMM_XMM_M128:
	vfnmsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VFNMSUB231PS_XMM_XMM_XMM:
	vfnmsub231ps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB231PS_YMM_YMM_M256:
	vfnmsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VFNMSUB231PS_YMM_YMM_YMM:
	vfnmsub231ps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VFNMSUB231SD_XMM_XMM_M64:
	vfnmsub231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VFNMSUB231SD_XMM_XMM_XMM:
	vfnmsub231sd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VFNMSUB231SS_XMM_XMM_M32:
	vfnmsub231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VFNMSUB231SS_XMM_XMM_XMM:
	vfnmsub231ss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VGATHERDPD_XMM_M32_XMM:
	vgatherdpd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Xmm>(2));
	break;
case VGATHERDPD_YMM_M32_YMM:
	vgatherdpd(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1), instr.get_operand<Ymm>(2));
	break;
case VGATHERDPS_XMM_M32_XMM:
	vgatherdps(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Xmm>(2));
	break;
case VGATHERDPS_YMM_M32_YMM:
	vgatherdps(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1), instr.get_operand<Ymm>(2));
	break;
case VGATHERQPD_XMM_M64_XMM:
	vgatherqpd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VGATHERQPD_YMM_M64_YMM:
	vgatherqpd(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1), instr.get_operand<Ymm>(2));
	break;
case VGATHERQPS_XMM_M64_XMM:
	vgatherqps(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VGATHERQPS_XMM_M64_XMM_1:
	vgatherqps_1(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VHADDPD_XMM_XMM_M128:
	vhaddpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VHADDPD_XMM_XMM_XMM:
	vhaddpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VHADDPD_YMM_YMM_M256:
	vhaddpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VHADDPD_YMM_YMM_YMM:
	vhaddpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VHADDPS_XMM_XMM_M128:
	vhaddps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VHADDPS_XMM_XMM_XMM:
	vhaddps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VHADDPS_YMM_YMM_M256:
	vhaddps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VHADDPS_YMM_YMM_YMM:
	vhaddps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VHSUBPD_XMM_XMM_M128:
	vhsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VHSUBPD_XMM_XMM_XMM:
	vhsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VHSUBPD_YMM_YMM_M256:
	vhsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VHSUBPD_YMM_YMM_YMM:
	vhsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VHSUBPS_XMM_XMM_M128:
	vhsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VHSUBPS_XMM_XMM_XMM:
	vhsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VHSUBPS_YMM_YMM_M256:
	vhsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VHSUBPS_YMM_YMM_YMM:
	vhsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VINSERTF128_YMM_YMM_M128_IMM8:
	vinsertf128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VINSERTF128_YMM_YMM_XMM_IMM8:
	vinsertf128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VINSERTI128_YMM_YMM_M128_IMM8:
	vinserti128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VINSERTI128_YMM_YMM_XMM_IMM8:
	vinserti128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VINSERTPS_XMM_XMM_M32_IMM8:
	vinsertps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2), instr.get_operand<Imm8>(3));
	break;
case VINSERTPS_XMM_XMM_XMM_IMM8:
	vinsertps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VLDDQU_XMM_M128:
	vlddqu(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VLDDQU_YMM_M256:
	vlddqu(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VLDMXCSR_M32:
	vldmxcsr(instr.get_operand<M32>(0));
	break;
case VMASKMOVDQU_XMM_XMM:
	vmaskmovdqu(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMASKMOVPD_M128_XMM_XMM:
	vmaskmovpd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMASKMOVPD_M256_YMM_YMM:
	vmaskmovpd(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMASKMOVPD_XMM_XMM_M128:
	vmaskmovpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMASKMOVPD_YMM_YMM_M256:
	vmaskmovpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMASKMOVPS_M128_XMM_XMM:
	vmaskmovps(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMASKMOVPS_M256_YMM_YMM:
	vmaskmovps(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMASKMOVPS_XMM_XMM_M128:
	vmaskmovps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMASKMOVPS_YMM_YMM_M256:
	vmaskmovps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMAXPD_XMM_XMM_M128:
	vmaxpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMAXPD_XMM_XMM_XMM:
	vmaxpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMAXPD_YMM_YMM_M256:
	vmaxpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMAXPD_YMM_YMM_YMM:
	vmaxpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMAXPS_XMM_XMM_M128:
	vmaxps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMAXPS_XMM_XMM_XMM:
	vmaxps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMAXPS_YMM_YMM_M256:
	vmaxps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMAXPS_YMM_YMM_YMM:
	vmaxps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMAXSD_XMM_XMM_M64:
	vmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMAXSD_XMM_XMM_XMM:
	vmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMAXSS_XMM_XMM_M32:
	vmaxss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VMAXSS_XMM_XMM_XMM:
	vmaxss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMINPD_XMM_XMM_M128:
	vminpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMINPD_XMM_XMM_XMM:
	vminpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMINPD_YMM_YMM_M256:
	vminpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMINPD_YMM_YMM_YMM:
	vminpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMINPS_XMM_XMM_M128:
	vminps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMINPS_XMM_XMM_XMM:
	vminps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMINPS_YMM_YMM_M256:
	vminps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMINPS_YMM_YMM_YMM:
	vminps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMINSD_XMM_XMM_M64:
	vminsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMINSD_XMM_XMM_XMM:
	vminsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMINSS_XMM_XMM_M32:
	vminss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VMINSS_XMM_XMM_XMM:
	vminss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVAPD_M128_XMM:
	vmovapd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPD_M256_YMM:
	vmovapd(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVAPD_XMM_M128:
	vmovapd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVAPD_XMM_XMM:
	vmovapd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPD_XMM_XMM_1:
	vmovapd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPD_YMM_M256:
	vmovapd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVAPD_YMM_YMM:
	vmovapd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVAPD_YMM_YMM_1:
	vmovapd_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVAPS_M128_XMM:
	vmovaps(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPS_M256_YMM:
	vmovaps(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVAPS_XMM_M128:
	vmovaps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVAPS_XMM_XMM:
	vmovaps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPS_XMM_XMM_1:
	vmovaps_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVAPS_YMM_M256:
	vmovaps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVAPS_YMM_YMM:
	vmovaps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVAPS_YMM_YMM_1:
	vmovaps_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVD_M32_XMM:
	vmovd(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVD_R32_XMM:
	vmovd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVD_XMM_M32:
	vmovd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VMOVD_XMM_R32:
	vmovd(instr.get_operand<Xmm>(0), instr.get_operand<R32>(1));
	break;
case VMOVDDUP_XMM_M64:
	vmovddup(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VMOVDDUP_XMM_XMM:
	vmovddup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDDUP_YMM_M256:
	vmovddup(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVDDUP_YMM_YMM:
	vmovddup(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQA_M128_XMM:
	vmovdqa(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQA_M256_YMM:
	vmovdqa(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQA_XMM_M128:
	vmovdqa(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVDQA_XMM_XMM:
	vmovdqa(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQA_XMM_XMM_1:
	vmovdqa_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQA_YMM_M256:
	vmovdqa(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVDQA_YMM_YMM:
	vmovdqa(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQA_YMM_YMM_1:
	vmovdqa_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQU_M128_XMM:
	vmovdqu(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQU_M256_YMM:
	vmovdqu(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQU_XMM_M128:
	vmovdqu(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVDQU_XMM_XMM:
	vmovdqu(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQU_XMM_XMM_1:
	vmovdqu_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVDQU_YMM_M256:
	vmovdqu(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVDQU_YMM_YMM:
	vmovdqu(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVDQU_YMM_YMM_1:
	vmovdqu_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVHLPS_XMM_XMM_XMM:
	vmovhlps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVHPD_M64_XMM:
	vmovhpd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVHPD_XMM_XMM_M64:
	vmovhpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMOVHPS_M64_XMM:
	vmovhps(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVHPS_XMM_XMM_M64:
	vmovhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMOVLHPS_XMM_XMM_XMM:
	vmovlhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVLPD_M64_XMM:
	vmovlpd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVLPD_XMM_XMM_M64:
	vmovlpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMOVLPS_M64_XMM:
	vmovlps(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVLPS_XMM_XMM_M64:
	vmovlps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMOVMSKPD_R32_XMM:
	vmovmskpd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVMSKPD_R32_YMM:
	vmovmskpd(instr.get_operand<R32>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVMSKPD_R64_XMM:
	vmovmskpd(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVMSKPD_R64_YMM:
	vmovmskpd(instr.get_operand<R64>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVMSKPS_R32_XMM:
	vmovmskps(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVMSKPS_R32_YMM:
	vmovmskps(instr.get_operand<R32>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVMSKPS_R64_XMM:
	vmovmskps(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVMSKPS_R64_YMM:
	vmovmskps(instr.get_operand<R64>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVNTDQ_M128_XMM:
	vmovntdq(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVNTDQA_XMM_M128:
	vmovntdqa(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVNTDQA_YMM_M256:
	vmovntdqa(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVNTPD_M128_XMM:
	vmovntpd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVNTPD_M256_YMM:
	vmovntpd(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVNTPS_M128_XMM:
	vmovntps(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVNTPS_M256_YMM:
	vmovntps(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVQ_M64_XMM:
	vmovq(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVQ_M64_XMM_1:
	vmovq_1(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVQ_R64_XMM:
	vmovq(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVQ_XMM_M64:
	vmovq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VMOVQ_XMM_M64_1:
	vmovq_1(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VMOVQ_XMM_R64:
	vmovq(instr.get_operand<Xmm>(0), instr.get_operand<R64>(1));
	break;
case VMOVQ_XMM_XMM:
	vmovq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVQ_XMM_XMM_1:
	vmovq_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVSD_M64_XMM:
	vmovsd(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVSD_XMM_M64:
	vmovsd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VMOVSD_XMM_XMM_XMM:
	vmovsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVSD_XMM_XMM_XMM_1:
	vmovsd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVSHDUP_XMM_M128:
	vmovshdup(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVSHDUP_XMM_XMM:
	vmovshdup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVSHDUP_YMM_M256:
	vmovshdup(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVSHDUP_YMM_YMM:
	vmovshdup(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVSLDUP_XMM_M128:
	vmovsldup(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVSLDUP_XMM_XMM:
	vmovsldup(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVSLDUP_YMM_M256:
	vmovsldup(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVSLDUP_YMM_YMM:
	vmovsldup(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVSS_M32_XMM:
	vmovss(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVSS_XMM_M32:
	vmovss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VMOVSS_XMM_XMM_XMM:
	vmovss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVSS_XMM_XMM_XMM_1:
	vmovss_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMOVUPD_M128_XMM:
	vmovupd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPD_M256_YMM:
	vmovupd(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVUPD_XMM_M128:
	vmovupd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVUPD_XMM_XMM:
	vmovupd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPD_XMM_XMM_1:
	vmovupd_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPD_YMM_M256:
	vmovupd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVUPD_YMM_YMM:
	vmovupd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVUPD_YMM_YMM_1:
	vmovupd_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVUPS_M128_XMM:
	vmovups(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPS_M256_YMM:
	vmovups(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVUPS_XMM_M128:
	vmovups(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VMOVUPS_XMM_XMM:
	vmovups(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPS_XMM_XMM_1:
	vmovups_1(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VMOVUPS_YMM_M256:
	vmovups(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VMOVUPS_YMM_YMM:
	vmovups(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMOVUPS_YMM_YMM_1:
	vmovups_1(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VMPSADBW_XMM_XMM_M128_IMM8:
	vmpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VMPSADBW_XMM_XMM_XMM_IMM8:
	vmpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VMPSADBW_YMM_YMM_M256_IMM8:
	vmpsadbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VMPSADBW_YMM_YMM_YMM_IMM8:
	vmpsadbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VMULPD_XMM_XMM_M128:
	vmulpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMULPD_XMM_XMM_XMM:
	vmulpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMULPD_YMM_YMM_M256:
	vmulpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMULPD_YMM_YMM_YMM:
	vmulpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMULPS_XMM_XMM_M128:
	vmulps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VMULPS_XMM_XMM_XMM:
	vmulps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMULPS_YMM_YMM_M256:
	vmulps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VMULPS_YMM_YMM_YMM:
	vmulps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VMULSD_XMM_XMM_M64:
	vmulsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VMULSD_XMM_XMM_XMM:
	vmulsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VMULSS_XMM_XMM_M32:
	vmulss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VMULSS_XMM_XMM_XMM:
	vmulss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VORPD_XMM_XMM_M128:
	vorpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VORPD_XMM_XMM_XMM:
	vorpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VORPD_YMM_YMM_M256:
	vorpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VORPD_YMM_YMM_YMM:
	vorpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VORPS_XMM_XMM_M128:
	vorps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VORPS_XMM_XMM_XMM:
	vorps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VORPS_YMM_YMM_M256:
	vorps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VORPS_YMM_YMM_YMM:
	vorps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPABSB_XMM_M128:
	vpabsb(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VPABSB_XMM_XMM:
	vpabsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPABSB_YMM_M256:
	vpabsb(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VPABSB_YMM_YMM:
	vpabsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VPABSD_XMM_M128:
	vpabsd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VPABSD_XMM_XMM:
	vpabsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPABSD_YMM_M256:
	vpabsd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VPABSD_YMM_YMM:
	vpabsd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VPABSW_XMM_M128:
	vpabsw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VPABSW_XMM_XMM:
	vpabsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPABSW_YMM_M256:
	vpabsw(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VPABSW_YMM_YMM:
	vpabsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VPACKSSDW_XMM_XMM_M128:
	vpackssdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPACKSSDW_XMM_XMM_XMM:
	vpackssdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPACKSSDW_YMM_YMM_M256:
	vpackssdw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPACKSSDW_YMM_YMM_YMM:
	vpackssdw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPACKSSWB_XMM_XMM_M128:
	vpacksswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPACKSSWB_XMM_XMM_XMM:
	vpacksswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPACKSSWB_YMM_YMM_M256:
	vpacksswb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPACKSSWB_YMM_YMM_YMM:
	vpacksswb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPACKUSDW_XMM_XMM_M128:
	vpackusdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPACKUSDW_XMM_XMM_XMM:
	vpackusdw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPACKUSDW_YMM_YMM_M256:
	vpackusdw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPACKUSDW_YMM_YMM_YMM:
	vpackusdw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPACKUSWB_XMM_XMM_M128:
	vpackuswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPACKUSWB_XMM_XMM_XMM:
	vpackuswb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPACKUSWB_YMM_YMM_M256:
	vpackuswb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPACKUSWB_YMM_YMM_YMM:
	vpackuswb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDB_XMM_XMM_M128:
	vpaddb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDB_XMM_XMM_XMM:
	vpaddb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDB_YMM_YMM_M256:
	vpaddb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDB_YMM_YMM_YMM:
	vpaddb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDD_XMM_XMM_M128:
	vpaddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDD_XMM_XMM_XMM:
	vpaddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDD_YMM_YMM_M256:
	vpaddd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDD_YMM_YMM_YMM:
	vpaddd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDQ_XMM_XMM_M128:
	vpaddq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDQ_XMM_XMM_XMM:
	vpaddq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDQ_YMM_YMM_M256:
	vpaddq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDQ_YMM_YMM_YMM:
	vpaddq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDSB_XMM_XMM_M128:
	vpaddsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDSB_XMM_XMM_XMM:
	vpaddsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDSB_YMM_YMM_M256:
	vpaddsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDSB_YMM_YMM_YMM:
	vpaddsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDSW_XMM_XMM_M128:
	vpaddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDSW_XMM_XMM_XMM:
	vpaddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDSW_YMM_YMM_M256:
	vpaddsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDSW_YMM_YMM_YMM:
	vpaddsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDUSB_XMM_XMM_M128:
	vpaddusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDUSB_XMM_XMM_XMM:
	vpaddusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDUSB_YMM_YMM_M256:
	vpaddusb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDUSB_YMM_YMM_YMM:
	vpaddusb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDUSW_XMM_XMM_M128:
	vpaddusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDUSW_XMM_XMM_XMM:
	vpaddusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDUSW_YMM_YMM_M256:
	vpaddusw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDUSW_YMM_YMM_YMM:
	vpaddusw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPADDW_XMM_XMM_M128:
	vpaddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPADDW_XMM_XMM_XMM:
	vpaddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPADDW_YMM_YMM_M256:
	vpaddw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPADDW_YMM_YMM_YMM:
	vpaddw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPALIGNR_XMM_XMM_M128_IMM8:
	vpalignr(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VPALIGNR_XMM_XMM_XMM_IMM8:
	vpalignr(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VPALIGNR_YMM_YMM_M256_IMM8:
	vpalignr(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VPALIGNR_YMM_YMM_YMM_IMM8:
	vpalignr(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VPAND_XMM_XMM_M128:
	vpand(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPAND_XMM_XMM_XMM:
	vpand(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPAND_YMM_YMM_M256:
	vpand(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPAND_YMM_YMM_YMM:
	vpand(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPANDN_XMM_XMM_M128:
	vpandn(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPANDN_XMM_XMM_XMM:
	vpandn(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPANDN_YMM_YMM_M256:
	vpandn(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPANDN_YMM_YMM_YMM:
	vpandn(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPAVGB_XMM_XMM_M128:
	vpavgb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPAVGB_XMM_XMM_XMM:
	vpavgb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPAVGB_YMM_YMM_M256:
	vpavgb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPAVGB_YMM_YMM_YMM:
	vpavgb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPAVGW_XMM_XMM_M128:
	vpavgw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPAVGW_XMM_XMM_XMM:
	vpavgw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPAVGW_YMM_YMM_M256:
	vpavgw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPAVGW_YMM_YMM_YMM:
	vpavgw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPBLENDD_XMM_XMM_M128_IMM8:
	vpblendd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDD_XMM_XMM_XMM_IMM8:
	vpblendd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDD_YMM_YMM_M256_IMM8:
	vpblendd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDD_YMM_YMM_YMM_IMM8:
	vpblendd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDVB_XMM_XMM_M128_XMM:
	vpblendvb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Xmm>(3));
	break;
case VPBLENDVB_XMM_XMM_XMM_XMM:
	vpblendvb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Xmm>(3));
	break;
case VPBLENDVB_YMM_YMM_M256_YMM:
	vpblendvb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Ymm>(3));
	break;
case VPBLENDVB_YMM_YMM_YMM_YMM:
	vpblendvb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Ymm>(3));
	break;
case VPBLENDW_XMM_XMM_M128_IMM8:
	vpblendw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDW_XMM_XMM_XMM_IMM8:
	vpblendw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDW_YMM_YMM_M256_IMM8:
	vpblendw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VPBLENDW_YMM_YMM_YMM_IMM8:
	vpblendw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VPBROADCASTB_XMM_M8:
	vpbroadcastb(instr.get_operand<Xmm>(0), instr.get_operand<M8>(1));
	break;
case VPBROADCASTB_XMM_XMM:
	vpbroadcastb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTB_YMM_M8:
	vpbroadcastb(instr.get_operand<Ymm>(0), instr.get_operand<M8>(1));
	break;
case VPBROADCASTB_YMM_XMM:
	vpbroadcastb(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTD_XMM_M32:
	vpbroadcastd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VPBROADCASTD_XMM_XMM:
	vpbroadcastd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTD_YMM_M32:
	vpbroadcastd(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1));
	break;
case VPBROADCASTD_YMM_XMM:
	vpbroadcastd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTQ_XMM_M64:
	vpbroadcastq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPBROADCASTQ_XMM_XMM:
	vpbroadcastq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTQ_YMM_M64:
	vpbroadcastq(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VPBROADCASTQ_YMM_XMM:
	vpbroadcastq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTW_XMM_M16:
	vpbroadcastw(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1));
	break;
case VPBROADCASTW_XMM_XMM:
	vpbroadcastw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPBROADCASTW_YMM_M16:
	vpbroadcastw(instr.get_operand<Ymm>(0), instr.get_operand<M16>(1));
	break;
case VPBROADCASTW_YMM_XMM:
	vpbroadcastw(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPCLMULQDQ_XMM_XMM_M128_IMM8:
	vpclmulqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VPCLMULQDQ_XMM_XMM_XMM_IMM8:
	vpclmulqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VPCMPEQB_XMM_XMM_M128:
	vpcmpeqb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPEQB_XMM_XMM_XMM:
	vpcmpeqb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPEQB_YMM_YMM_M256:
	vpcmpeqb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPEQB_YMM_YMM_YMM:
	vpcmpeqb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPEQD_XMM_XMM_M128:
	vpcmpeqd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPEQD_XMM_XMM_XMM:
	vpcmpeqd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPEQD_YMM_YMM_M256:
	vpcmpeqd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPEQD_YMM_YMM_YMM:
	vpcmpeqd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPEQQ_XMM_XMM_M128:
	vpcmpeqq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPEQQ_XMM_XMM_XMM:
	vpcmpeqq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPEQQ_YMM_YMM_M256:
	vpcmpeqq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPEQQ_YMM_YMM_YMM:
	vpcmpeqq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPEQW_XMM_XMM_M128:
	vpcmpeqw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPEQW_XMM_XMM_XMM:
	vpcmpeqw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPEQW_YMM_YMM_M256:
	vpcmpeqw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPEQW_YMM_YMM_YMM:
	vpcmpeqw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPESTRI_XMM_M128_IMM8:
	vpcmpestri(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPESTRI_XMM_XMM_IMM8:
	vpcmpestri(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPESTRM_XMM_M128_IMM8:
	vpcmpestrm(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPESTRM_XMM_XMM_IMM8:
	vpcmpestrm(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPGTB_XMM_XMM_M128:
	vpcmpgtb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPGTB_XMM_XMM_XMM:
	vpcmpgtb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPGTB_YMM_YMM_M256:
	vpcmpgtb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPGTB_YMM_YMM_YMM:
	vpcmpgtb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPGTD_XMM_XMM_M128:
	vpcmpgtd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPGTD_XMM_XMM_XMM:
	vpcmpgtd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPGTD_YMM_YMM_M256:
	vpcmpgtd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPGTD_YMM_YMM_YMM:
	vpcmpgtd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPGTQ_XMM_XMM_M128:
	vpcmpgtq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPGTQ_XMM_XMM_XMM:
	vpcmpgtq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPGTQ_YMM_YMM_M256:
	vpcmpgtq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPGTQ_YMM_YMM_YMM:
	vpcmpgtq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPGTW_XMM_XMM_M128:
	vpcmpgtw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPCMPGTW_XMM_XMM_XMM:
	vpcmpgtw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPCMPGTW_YMM_YMM_M256:
	vpcmpgtw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPCMPGTW_YMM_YMM_YMM:
	vpcmpgtw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPCMPISTRI_XMM_M128_IMM8:
	vpcmpistri(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPISTRI_XMM_XMM_IMM8:
	vpcmpistri(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPISTRM_XMM_M128_IMM8:
	vpcmpistrm(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPCMPISTRM_XMM_XMM_IMM8:
	vpcmpistrm(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERM2F128_YMM_YMM_M256_IMM8:
	vperm2f128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VPERM2F128_YMM_YMM_YMM_IMM8:
	vperm2f128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VPERM2I128_YMM_YMM_M256_IMM8:
	vperm2i128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VPERM2I128_YMM_YMM_YMM_IMM8:
	vperm2i128(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VPERMD_YMM_YMM_M256:
	vpermd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPERMD_YMM_YMM_YMM:
	vpermd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPERMILPD_XMM_M128_IMM8:
	vpermilpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPD_XMM_XMM_IMM8:
	vpermilpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPD_XMM_XMM_M128:
	vpermilpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPERMILPD_XMM_XMM_XMM:
	vpermilpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPERMILPD_YMM_M256_IMM8:
	vpermilpd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPD_YMM_YMM_IMM8:
	vpermilpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPD_YMM_YMM_M256:
	vpermilpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPERMILPD_YMM_YMM_YMM:
	vpermilpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPERMILPS_XMM_M128_IMM8:
	vpermilps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPS_XMM_XMM_IMM8:
	vpermilps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPS_XMM_XMM_M128:
	vpermilps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPERMILPS_XMM_XMM_XMM:
	vpermilps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPERMILPS_YMM_M256_IMM8:
	vpermilps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPS_YMM_YMM_IMM8:
	vpermilps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMILPS_YMM_YMM_M256:
	vpermilps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPERMILPS_YMM_YMM_YMM:
	vpermilps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPERMPD_YMM_M256_IMM8:
	vpermpd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMPD_YMM_YMM_IMM8:
	vpermpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMPS_YMM_YMM_M256:
	vpermps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPERMPS_YMM_YMM_YMM:
	vpermps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPERMQ_YMM_M256_IMM8:
	vpermq(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPERMQ_YMM_YMM_IMM8:
	vpermq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRB_M8_XMM_IMM8:
	vpextrb(instr.get_operand<M8>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRB_R32_XMM_IMM8:
	vpextrb(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRB_R64_XMM_IMM8:
	vpextrb(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRD_M32_XMM_IMM8:
	vpextrd(instr.get_operand<M32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRD_R32_XMM_IMM8:
	vpextrd(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRQ_M64_XMM_IMM8:
	vpextrq(instr.get_operand<M64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRQ_R64_XMM_IMM8:
	vpextrq(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRW_M16_XMM_IMM8:
	vpextrw(instr.get_operand<M16>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRW_R32_XMM_IMM8:
	vpextrw(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRW_R32_XMM_IMM8_1:
	vpextrw_1(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRW_R64_XMM_IMM8:
	vpextrw(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPEXTRW_R64_XMM_IMM8_1:
	vpextrw_1(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPGATHERDD_XMM_M32_XMM:
	vpgatherdd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Xmm>(2));
	break;
case VPGATHERDD_YMM_M32_YMM:
	vpgatherdd(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1), instr.get_operand<Ymm>(2));
	break;
case VPGATHERDQ_XMM_M32_XMM:
	vpgatherdq(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1), instr.get_operand<Xmm>(2));
	break;
case VPGATHERDQ_YMM_M32_YMM:
	vpgatherdq(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1), instr.get_operand<Ymm>(2));
	break;
case VPGATHERQD_XMM_M64_XMM:
	vpgatherqd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VPGATHERQD_XMM_M64_XMM_1:
	vpgatherqd_1(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VPGATHERQQ_XMM_M64_XMM:
	vpgatherqq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1), instr.get_operand<Xmm>(2));
	break;
case VPGATHERQQ_YMM_M64_YMM:
	vpgatherqq(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1), instr.get_operand<Ymm>(2));
	break;
case VPHADDD_XMM_XMM_M128:
	vphaddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHADDD_XMM_XMM_XMM:
	vphaddd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHADDD_YMM_YMM_M256:
	vphaddd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHADDD_YMM_YMM_YMM:
	vphaddd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPHADDSW_XMM_XMM_M128:
	vphaddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHADDSW_XMM_XMM_XMM:
	vphaddsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHADDSW_YMM_YMM_M256:
	vphaddsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHADDSW_YMM_YMM_YMM:
	vphaddsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPHADDW_XMM_XMM_M128:
	vphaddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHADDW_XMM_XMM_XMM:
	vphaddw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHADDW_YMM_YMM_M256:
	vphaddw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHADDW_YMM_YMM_YMM:
	vphaddw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPHMINPOSUW_XMM_M128:
	vphminposuw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VPHMINPOSUW_XMM_XMM:
	vphminposuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPHSUBD_XMM_XMM_M128:
	vphsubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHSUBD_XMM_XMM_XMM:
	vphsubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHSUBD_YMM_YMM_M256:
	vphsubd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHSUBD_YMM_YMM_YMM:
	vphsubd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPHSUBSW_XMM_XMM_M128:
	vphsubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHSUBSW_XMM_XMM_XMM:
	vphsubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHSUBSW_YMM_YMM_M256:
	vphsubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHSUBSW_YMM_YMM_YMM:
	vphsubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPHSUBW_XMM_XMM_M128:
	vphsubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPHSUBW_XMM_XMM_XMM:
	vphsubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPHSUBW_YMM_YMM_M256:
	vphsubw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPHSUBW_YMM_YMM_YMM:
	vphsubw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPINSRB_XMM_XMM_M8_IMM8:
	vpinsrb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M8>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRB_XMM_XMM_R32_IMM8:
	vpinsrb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R32>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRD_XMM_XMM_M32_IMM8:
	vpinsrd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRD_XMM_XMM_R32_IMM8:
	vpinsrd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R32>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRQ_XMM_XMM_M64_IMM8:
	vpinsrq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRQ_XMM_XMM_R64_IMM8:
	vpinsrq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R64>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRW_XMM_XMM_M16_IMM8:
	vpinsrw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M16>(2), instr.get_operand<Imm8>(3));
	break;
case VPINSRW_XMM_XMM_R32_IMM8:
	vpinsrw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<R32>(2), instr.get_operand<Imm8>(3));
	break;
case VPMADDUBSW_XMM_XMM_M128:
	vpmaddubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMADDUBSW_XMM_XMM_XMM:
	vpmaddubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMADDUBSW_YMM_YMM_M256:
	vpmaddubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMADDUBSW_YMM_YMM_YMM:
	vpmaddubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMADDWD_XMM_XMM_M128:
	vpmaddwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMADDWD_XMM_XMM_XMM:
	vpmaddwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMADDWD_YMM_YMM_M256:
	vpmaddwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMADDWD_YMM_YMM_YMM:
	vpmaddwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMASKMOVD_M128_XMM_XMM:
	vpmaskmovd(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMASKMOVD_M256_YMM_YMM:
	vpmaskmovd(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMASKMOVD_XMM_XMM_M128:
	vpmaskmovd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMASKMOVD_YMM_YMM_M256:
	vpmaskmovd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMASKMOVQ_M128_XMM_XMM:
	vpmaskmovq(instr.get_operand<M128>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMASKMOVQ_M256_YMM_YMM:
	vpmaskmovq(instr.get_operand<M256>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMASKMOVQ_XMM_XMM_M128:
	vpmaskmovq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMASKMOVQ_YMM_YMM_M256:
	vpmaskmovq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXSB_XMM_XMM_M128:
	vpmaxsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXSB_XMM_XMM_XMM:
	vpmaxsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXSB_YMM_YMM_M256:
	vpmaxsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXSB_YMM_YMM_YMM:
	vpmaxsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMAXSD_XMM_XMM_M128:
	vpmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXSD_XMM_XMM_XMM:
	vpmaxsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXSD_YMM_YMM_M256:
	vpmaxsd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXSD_YMM_YMM_YMM:
	vpmaxsd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMAXSW_XMM_XMM_M128:
	vpmaxsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXSW_XMM_XMM_XMM:
	vpmaxsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXSW_YMM_YMM_M256:
	vpmaxsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXSW_YMM_YMM_YMM:
	vpmaxsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMAXUB_XMM_XMM_M128:
	vpmaxub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXUB_XMM_XMM_XMM:
	vpmaxub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXUB_YMM_YMM_M256:
	vpmaxub(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXUB_YMM_YMM_YMM:
	vpmaxub(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMAXUD_XMM_XMM_M128:
	vpmaxud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXUD_XMM_XMM_XMM:
	vpmaxud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXUD_YMM_YMM_M256:
	vpmaxud(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXUD_YMM_YMM_YMM:
	vpmaxud(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMAXUW_XMM_XMM_M128:
	vpmaxuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMAXUW_XMM_XMM_XMM:
	vpmaxuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMAXUW_YMM_YMM_M256:
	vpmaxuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMAXUW_YMM_YMM_YMM:
	vpmaxuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMINSB_XMM_XMM_M128:
	vpminsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINSB_XMM_XMM_XMM:
	vpminsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINSB_YMM_YMM_M256:
	vpminsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMINSB_YMM_YMM_YMM:
	vpminsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMINSD_XMM_XMM_M128:
	vpminsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINSD_XMM_XMM_XMM:
	vpminsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINSD_YMM_YMM_M256:
	vpminsd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMINSD_YMM_YMM_YMM:
	vpminsd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMINSW_XMM_XMM_M128:
	vpminsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINSW_XMM_XMM_XMM:
	vpminsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINUB_XMM_XMM_M128:
	vpminub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINUB_XMM_XMM_XMM:
	vpminub(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINUB_YMM_YMM_M256:
	vpminub(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMINUB_YMM_YMM_YMM:
	vpminub(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMINUD_XMM_XMM_M128:
	vpminud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINUD_XMM_XMM_XMM:
	vpminud(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINUD_YMM_YMM_M256:
	vpminud(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMINUD_YMM_YMM_YMM:
	vpminud(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMINUW_XMM_XMM_M128:
	vpminuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMINUW_XMM_XMM_XMM:
	vpminuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMINUW_YMM_YMM_M256:
	vpminuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMINUW_YMM_YMM_YMM:
	vpminuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMOVMSKB_R32_XMM:
	vpmovmskb(instr.get_operand<R32>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVMSKB_R32_YMM:
	vpmovmskb(instr.get_operand<R32>(0), instr.get_operand<Ymm>(1));
	break;
case VPMOVMSKB_R64_XMM:
	vpmovmskb(instr.get_operand<R64>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVMSKB_R64_YMM:
	vpmovmskb(instr.get_operand<R64>(0), instr.get_operand<Ymm>(1));
	break;
case VPMOVSXBD_XMM_M32:
	vpmovsxbd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVSXBD_XMM_XMM:
	vpmovsxbd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXBD_YMM_M64:
	vpmovsxbd(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVSXBD_YMM_XMM:
	vpmovsxbd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXBQ_XMM_M16:
	vpmovsxbq(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1));
	break;
case VPMOVSXBQ_XMM_XMM:
	vpmovsxbq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXBQ_YMM_M32:
	vpmovsxbq(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVSXBQ_YMM_XMM:
	vpmovsxbq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXBW_XMM_M64:
	vpmovsxbw(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVSXBW_XMM_XMM:
	vpmovsxbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXBW_YMM_M128:
	vpmovsxbw(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVSXBW_YMM_XMM:
	vpmovsxbw(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXDQ_XMM_M64:
	vpmovsxdq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVSXDQ_XMM_XMM:
	vpmovsxdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXDQ_YMM_M128:
	vpmovsxdq(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVSXDQ_YMM_XMM:
	vpmovsxdq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXWD_XMM_M64:
	vpmovsxwd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVSXWD_XMM_XMM:
	vpmovsxwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXWD_YMM_M128:
	vpmovsxwd(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVSXWD_YMM_XMM:
	vpmovsxwd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXWQ_XMM_M32:
	vpmovsxwq(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVSXWQ_XMM_XMM:
	vpmovsxwq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVSXWQ_YMM_M64:
	vpmovsxwq(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVSXWQ_YMM_XMM:
	vpmovsxwq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBD_XMM_M32:
	vpmovzxbd(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVZXBD_XMM_XMM:
	vpmovzxbd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBD_YMM_M64:
	vpmovzxbd(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVZXBD_YMM_XMM:
	vpmovzxbd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBQ_XMM_M16:
	vpmovzxbq(instr.get_operand<Xmm>(0), instr.get_operand<M16>(1));
	break;
case VPMOVZXBQ_XMM_XMM:
	vpmovzxbq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBQ_YMM_M32:
	vpmovzxbq(instr.get_operand<Ymm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVZXBQ_YMM_XMM:
	vpmovzxbq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBW_XMM_M64:
	vpmovzxbw(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVZXBW_XMM_XMM:
	vpmovzxbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXBW_YMM_M128:
	vpmovzxbw(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVZXBW_YMM_XMM:
	vpmovzxbw(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXDQ_XMM_M64:
	vpmovzxdq(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVZXDQ_XMM_XMM:
	vpmovzxdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXDQ_YMM_M128:
	vpmovzxdq(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVZXDQ_YMM_XMM:
	vpmovzxdq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXWD_XMM_M64:
	vpmovzxwd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVZXWD_XMM_XMM:
	vpmovzxwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXWD_YMM_M128:
	vpmovzxwd(instr.get_operand<Ymm>(0), instr.get_operand<M128>(1));
	break;
case VPMOVZXWD_YMM_XMM:
	vpmovzxwd(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXWQ_XMM_M32:
	vpmovzxwq(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VPMOVZXWQ_XMM_XMM:
	vpmovzxwq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMOVZXWQ_YMM_M64:
	vpmovzxwq(instr.get_operand<Ymm>(0), instr.get_operand<M64>(1));
	break;
case VPMOVZXWQ_YMM_XMM:
	vpmovzxwq(instr.get_operand<Ymm>(0), instr.get_operand<Xmm>(1));
	break;
case VPMULDQ_XMM_XMM_M128:
	vpmuldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULDQ_XMM_XMM_XMM:
	vpmuldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULDQ_YMM_YMM_M256:
	vpmuldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULDQ_YMM_YMM_YMM:
	vpmuldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULHRSW_XMM_XMM_M128:
	vpmulhrsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULHRSW_XMM_XMM_XMM:
	vpmulhrsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULHRSW_YMM_YMM_M256:
	vpmulhrsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULHRSW_YMM_YMM_YMM:
	vpmulhrsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULHUW_XMM_XMM_M128:
	vpmulhuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULHUW_XMM_XMM_XMM:
	vpmulhuw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULHUW_YMM_YMM_M256:
	vpmulhuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULHUW_YMM_YMM_YMM:
	vpmulhuw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULHW_XMM_XMM_M128:
	vpmulhw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULHW_XMM_XMM_XMM:
	vpmulhw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULHW_YMM_YMM_M256:
	vpmulhw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULHW_YMM_YMM_YMM:
	vpmulhw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULLD_XMM_XMM_M128:
	vpmulld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULLD_XMM_XMM_XMM:
	vpmulld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULLD_YMM_YMM_M256:
	vpmulld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULLD_YMM_YMM_YMM:
	vpmulld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULLW_XMM_XMM_M128:
	vpmullw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULLW_XMM_XMM_XMM:
	vpmullw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULLW_YMM_YMM_M256:
	vpmullw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULLW_YMM_YMM_YMM:
	vpmullw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPMULUDQ_XMM_XMM_M128:
	vpmuludq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPMULUDQ_XMM_XMM_XMM:
	vpmuludq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPMULUDQ_YMM_YMM_M256:
	vpmuludq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPMULUDQ_YMM_YMM_YMM:
	vpmuludq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPOR_XMM_XMM_M128:
	vpor(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPOR_XMM_XMM_XMM:
	vpor(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPOR_YMM_YMM_M256:
	vpor(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPOR_YMM_YMM_YMM:
	vpor(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSADBW_XMM_XMM_M128:
	vpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSADBW_XMM_XMM_XMM:
	vpsadbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSADBW_YMM_YMM_M256:
	vpsadbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSADBW_YMM_YMM_YMM:
	vpsadbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSHUFB_XMM_XMM_M128:
	vpshufb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSHUFB_XMM_XMM_XMM:
	vpshufb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSHUFB_YMM_YMM_M256:
	vpshufb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSHUFB_YMM_YMM_YMM:
	vpshufb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSHUFD_XMM_M128_IMM8:
	vpshufd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFD_XMM_XMM_IMM8:
	vpshufd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFD_YMM_M256_IMM8:
	vpshufd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFD_YMM_YMM_IMM8:
	vpshufd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFHW_XMM_M128_IMM8:
	vpshufhw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFHW_XMM_XMM_IMM8:
	vpshufhw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFHW_YMM_M256_IMM8:
	vpshufhw(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFHW_YMM_YMM_IMM8:
	vpshufhw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFLW_XMM_M128_IMM8:
	vpshuflw(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFLW_XMM_XMM_IMM8:
	vpshuflw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFLW_YMM_M256_IMM8:
	vpshuflw(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VPSHUFLW_YMM_YMM_IMM8:
	vpshuflw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSIGNB_XMM_XMM_M128:
	vpsignb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSIGNB_XMM_XMM_XMM:
	vpsignb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSIGND_XMM_XMM_M128:
	vpsignd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSIGND_XMM_XMM_XMM:
	vpsignd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSIGNW_XMM_XMM_M128:
	vpsignw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSIGNW_XMM_XMM_XMM:
	vpsignw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLD_XMM_XMM_IMM8:
	vpslld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLD_XMM_XMM_M128:
	vpslld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLD_XMM_XMM_XMM:
	vpslld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLD_YMM_YMM_IMM8:
	vpslld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLD_YMM_YMM_M128:
	vpslld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLD_YMM_YMM_XMM:
	vpslld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLDQ_XMM_XMM_IMM8:
	vpslldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLDQ_YMM_YMM_IMM8:
	vpslldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLQ_XMM_XMM_IMM8:
	vpsllq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLQ_XMM_XMM_M128:
	vpsllq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLQ_XMM_XMM_XMM:
	vpsllq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLQ_YMM_YMM_IMM8:
	vpsllq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLQ_YMM_YMM_M128:
	vpsllq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLQ_YMM_YMM_XMM:
	vpsllq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLVD_XMM_XMM_M128:
	vpsllvd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLVD_XMM_XMM_XMM:
	vpsllvd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLVD_YMM_YMM_M256:
	vpsllvd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSLLVD_YMM_YMM_YMM:
	vpsllvd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSLLVQ_XMM_XMM_M128:
	vpsllvq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLVQ_XMM_XMM_XMM:
	vpsllvq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLVQ_YMM_YMM_M256:
	vpsllvq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSLLVQ_YMM_YMM_YMM:
	vpsllvq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSLLW_XMM_XMM_IMM8:
	vpsllw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLW_XMM_XMM_M128:
	vpsllw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLW_XMM_XMM_XMM:
	vpsllw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSLLW_YMM_YMM_IMM8:
	vpsllw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSLLW_YMM_YMM_M128:
	vpsllw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSLLW_YMM_YMM_XMM:
	vpsllw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRAD_XMM_XMM_IMM8:
	vpsrad(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRAD_XMM_XMM_M128:
	vpsrad(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRAD_XMM_XMM_XMM:
	vpsrad(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRAD_YMM_YMM_IMM8:
	vpsrad(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRAD_YMM_YMM_M128:
	vpsrad(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSRAD_YMM_YMM_XMM:
	vpsrad(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRAVD_XMM_XMM_M128:
	vpsravd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRAVD_XMM_XMM_XMM:
	vpsravd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRAVD_YMM_YMM_M256:
	vpsravd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSRAVD_YMM_YMM_YMM:
	vpsravd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSRAW_XMM_XMM_IMM8:
	vpsraw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRAW_XMM_XMM_M128:
	vpsraw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRAW_XMM_XMM_XMM:
	vpsraw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRAW_YMM_YMM_IMM8:
	vpsraw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRAW_YMM_YMM_M128:
	vpsraw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSRAW_YMM_YMM_XMM:
	vpsraw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLD_XMM_XMM_IMM8:
	vpsrld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLD_XMM_XMM_M128:
	vpsrld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLD_XMM_XMM_XMM:
	vpsrld(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLD_YMM_YMM_IMM8:
	vpsrld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLD_YMM_YMM_M128:
	vpsrld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLD_YMM_YMM_XMM:
	vpsrld(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLDQ_XMM_XMM_IMM8:
	vpsrldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLDQ_YMM_YMM_IMM8:
	vpsrldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLQ_XMM_XMM_IMM8:
	vpsrlq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLQ_XMM_XMM_M128:
	vpsrlq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLQ_XMM_XMM_XMM:
	vpsrlq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLQ_YMM_YMM_IMM8:
	vpsrlq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLQ_YMM_YMM_M128:
	vpsrlq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLQ_YMM_YMM_XMM:
	vpsrlq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLVD_XMM_XMM_M128:
	vpsrlvd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLVD_XMM_XMM_XMM:
	vpsrlvd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLVD_YMM_YMM_M256:
	vpsrlvd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSRLVD_YMM_YMM_YMM:
	vpsrlvd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSRLVQ_XMM_XMM_M128:
	vpsrlvq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLVQ_XMM_XMM_XMM:
	vpsrlvq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLVQ_YMM_YMM_M256:
	vpsrlvq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSRLVQ_YMM_YMM_YMM:
	vpsrlvq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSRLW_XMM_XMM_IMM8:
	vpsrlw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLW_XMM_XMM_M128:
	vpsrlw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLW_XMM_XMM_XMM:
	vpsrlw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSRLW_YMM_YMM_IMM8:
	vpsrlw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VPSRLW_YMM_YMM_M128:
	vpsrlw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M128>(2));
	break;
case VPSRLW_YMM_YMM_XMM:
	vpsrlw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBB_XMM_XMM_M128:
	vpsubb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBB_XMM_XMM_XMM:
	vpsubb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBB_YMM_YMM_M256:
	vpsubb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBB_YMM_YMM_YMM:
	vpsubb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBD_XMM_XMM_M128:
	vpsubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBD_XMM_XMM_XMM:
	vpsubd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBD_YMM_YMM_M256:
	vpsubd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBD_YMM_YMM_YMM:
	vpsubd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBQ_XMM_XMM_M128:
	vpsubq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBQ_XMM_XMM_XMM:
	vpsubq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBQ_YMM_YMM_M256:
	vpsubq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBQ_YMM_YMM_YMM:
	vpsubq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBSB_XMM_XMM_M128:
	vpsubsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBSB_XMM_XMM_XMM:
	vpsubsb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBSB_YMM_YMM_M256:
	vpsubsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBSB_YMM_YMM_YMM:
	vpsubsb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBSW_XMM_XMM_M128:
	vpsubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBSW_XMM_XMM_XMM:
	vpsubsw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBSW_YMM_YMM_M256:
	vpsubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBSW_YMM_YMM_YMM:
	vpsubsw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBUSB_XMM_XMM_M128:
	vpsubusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBUSB_XMM_XMM_XMM:
	vpsubusb(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBUSB_YMM_YMM_M256:
	vpsubusb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBUSB_YMM_YMM_YMM:
	vpsubusb(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBUSW_XMM_XMM_M128:
	vpsubusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBUSW_XMM_XMM_XMM:
	vpsubusw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBUSW_YMM_YMM_M256:
	vpsubusw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBUSW_YMM_YMM_YMM:
	vpsubusw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPSUBW_XMM_XMM_M128:
	vpsubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPSUBW_XMM_XMM_XMM:
	vpsubw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPSUBW_YMM_YMM_M256:
	vpsubw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPSUBW_YMM_YMM_YMM:
	vpsubw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPTEST_XMM_M128:
	vptest(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VPTEST_XMM_XMM:
	vptest(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VPTEST_YMM_M256:
	vptest(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VPTEST_YMM_YMM:
	vptest(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VPUNPCKHBW_XMM_XMM_M128:
	vpunpckhbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKHBW_XMM_XMM_XMM:
	vpunpckhbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKHBW_YMM_YMM_M256:
	vpunpckhbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKHBW_YMM_YMM_YMM:
	vpunpckhbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKHDQ_XMM_XMM_M128:
	vpunpckhdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKHDQ_XMM_XMM_XMM:
	vpunpckhdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKHDQ_YMM_YMM_M256:
	vpunpckhdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKHDQ_YMM_YMM_YMM:
	vpunpckhdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKHQDQ_XMM_XMM_M128:
	vpunpckhqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKHQDQ_XMM_XMM_XMM:
	vpunpckhqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKHQDQ_YMM_YMM_M256:
	vpunpckhqdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKHQDQ_YMM_YMM_YMM:
	vpunpckhqdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKHWD_XMM_XMM_M128:
	vpunpckhwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKHWD_XMM_XMM_XMM:
	vpunpckhwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKHWD_YMM_YMM_M256:
	vpunpckhwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKHWD_YMM_YMM_YMM:
	vpunpckhwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKLBW_XMM_XMM_M128:
	vpunpcklbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKLBW_XMM_XMM_XMM:
	vpunpcklbw(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKLBW_YMM_YMM_M256:
	vpunpcklbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKLBW_YMM_YMM_YMM:
	vpunpcklbw(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKLDQ_XMM_XMM_M128:
	vpunpckldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKLDQ_XMM_XMM_XMM:
	vpunpckldq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKLDQ_YMM_YMM_M256:
	vpunpckldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKLDQ_YMM_YMM_YMM:
	vpunpckldq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKLQDQ_XMM_XMM_M128:
	vpunpcklqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKLQDQ_XMM_XMM_XMM:
	vpunpcklqdq(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKLQDQ_YMM_YMM_M256:
	vpunpcklqdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKLQDQ_YMM_YMM_YMM:
	vpunpcklqdq(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPUNPCKLWD_XMM_XMM_M128:
	vpunpcklwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPUNPCKLWD_XMM_XMM_XMM:
	vpunpcklwd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPUNPCKLWD_YMM_YMM_M256:
	vpunpcklwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPUNPCKLWD_YMM_YMM_YMM:
	vpunpcklwd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VPXOR_XMM_XMM_M128:
	vpxor(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VPXOR_XMM_XMM_XMM:
	vpxor(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VPXOR_YMM_YMM_M256:
	vpxor(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VPXOR_YMM_YMM_YMM:
	vpxor(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VRCPPS_XMM_M128:
	vrcpps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VRCPPS_XMM_XMM:
	vrcpps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VRCPPS_YMM_M256:
	vrcpps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VRCPPS_YMM_YMM:
	vrcpps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VRCPSS_XMM_XMM_M32:
	vrcpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VRCPSS_XMM_XMM_XMM:
	vrcpss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VROUNDPD_XMM_M128_IMM8:
	vroundpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPD_XMM_XMM_IMM8:
	vroundpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPD_YMM_M256_IMM8:
	vroundpd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPD_YMM_YMM_IMM8:
	vroundpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPS_XMM_M128_IMM8:
	vroundps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPS_XMM_XMM_IMM8:
	vroundps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPS_YMM_M256_IMM8:
	vroundps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDPS_YMM_YMM_IMM8:
	vroundps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Imm8>(2));
	break;
case VROUNDSD_XMM_XMM_M64_IMM8:
	vroundsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2), instr.get_operand<Imm8>(3));
	break;
case VROUNDSD_XMM_XMM_XMM_IMM8:
	vroundsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VROUNDSS_XMM_XMM_M32_IMM8:
	vroundss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2), instr.get_operand<Imm8>(3));
	break;
case VROUNDSS_XMM_XMM_XMM_IMM8:
	vroundss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VRSQRTPS_XMM_M128:
	vrsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VRSQRTPS_XMM_XMM:
	vrsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VRSQRTPS_YMM_M256:
	vrsqrtps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VRSQRTPS_YMM_YMM:
	vrsqrtps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VRSQRTSS_XMM_XMM_M32:
	vrsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VRSQRTSS_XMM_XMM_XMM:
	vrsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSHUFPD_XMM_XMM_M128_IMM8:
	vshufpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPD_XMM_XMM_XMM_IMM8:
	vshufpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPD_YMM_YMM_M256_IMM8:
	vshufpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPD_YMM_YMM_YMM_IMM8:
	vshufpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPS_XMM_XMM_M128_IMM8:
	vshufps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPS_XMM_XMM_XMM_IMM8:
	vshufps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPS_YMM_YMM_M256_IMM8:
	vshufps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2), instr.get_operand<Imm8>(3));
	break;
case VSHUFPS_YMM_YMM_YMM_IMM8:
	vshufps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2), instr.get_operand<Imm8>(3));
	break;
case VSQRTPD_XMM_M128:
	vsqrtpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VSQRTPD_XMM_XMM:
	vsqrtpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VSQRTPD_YMM_M256:
	vsqrtpd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VSQRTPD_YMM_YMM:
	vsqrtpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VSQRTPS_XMM_M128:
	vsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VSQRTPS_XMM_XMM:
	vsqrtps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VSQRTPS_YMM_M256:
	vsqrtps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VSQRTPS_YMM_YMM:
	vsqrtps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VSQRTSD_XMM_XMM_M64:
	vsqrtsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VSQRTSD_XMM_XMM_XMM:
	vsqrtsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSQRTSS_XMM_XMM_M32:
	vsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VSQRTSS_XMM_XMM_XMM:
	vsqrtss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSTMXCSR_M32:
	vstmxcsr(instr.get_operand<M32>(0));
	break;
case VSUBPD_XMM_XMM_M128:
	vsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VSUBPD_XMM_XMM_XMM:
	vsubpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSUBPD_YMM_YMM_M256:
	vsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VSUBPD_YMM_YMM_YMM:
	vsubpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VSUBPS_XMM_XMM_M128:
	vsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VSUBPS_XMM_XMM_XMM:
	vsubps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSUBPS_YMM_YMM_M256:
	vsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VSUBPS_YMM_YMM_YMM:
	vsubps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VSUBSD_XMM_XMM_M64:
	vsubsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M64>(2));
	break;
case VSUBSD_XMM_XMM_XMM:
	vsubsd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VSUBSS_XMM_XMM_M32:
	vsubss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M32>(2));
	break;
case VSUBSS_XMM_XMM_XMM:
	vsubss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VTESTPD_XMM_M128:
	vtestpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VTESTPD_XMM_XMM:
	vtestpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VTESTPD_YMM_M256:
	vtestpd(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VTESTPD_YMM_YMM:
	vtestpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VTESTPS_XMM_M128:
	vtestps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case VTESTPS_XMM_XMM:
	vtestps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VTESTPS_YMM_M256:
	vtestps(instr.get_operand<Ymm>(0), instr.get_operand<M256>(1));
	break;
case VTESTPS_YMM_YMM:
	vtestps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1));
	break;
case VUCOMISD_XMM_M64:
	vucomisd(instr.get_operand<Xmm>(0), instr.get_operand<M64>(1));
	break;
case VUCOMISD_XMM_XMM:
	vucomisd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VUCOMISS_XMM_M32:
	vucomiss(instr.get_operand<Xmm>(0), instr.get_operand<M32>(1));
	break;
case VUCOMISS_XMM_XMM:
	vucomiss(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case VUNPCKHPD_XMM_XMM_M128:
	vunpckhpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VUNPCKHPD_XMM_XMM_XMM:
	vunpckhpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VUNPCKHPD_YMM_YMM_M256:
	vunpckhpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VUNPCKHPD_YMM_YMM_YMM:
	vunpckhpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VUNPCKHPS_XMM_XMM_M128:
	vunpckhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VUNPCKHPS_XMM_XMM_XMM:
	vunpckhps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VUNPCKHPS_YMM_YMM_M256:
	vunpckhps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VUNPCKHPS_YMM_YMM_YMM:
	vunpckhps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VUNPCKLPD_XMM_XMM_M128:
	vunpcklpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VUNPCKLPD_XMM_XMM_XMM:
	vunpcklpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VUNPCKLPD_YMM_YMM_M256:
	vunpcklpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VUNPCKLPD_YMM_YMM_YMM:
	vunpcklpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VUNPCKLPS_XMM_XMM_M128:
	vunpcklps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VUNPCKLPS_XMM_XMM_XMM:
	vunpcklps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VUNPCKLPS_YMM_YMM_M256:
	vunpcklps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VUNPCKLPS_YMM_YMM_YMM:
	vunpcklps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VXORPD_XMM_XMM_M128:
	vxorpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VXORPD_XMM_XMM_XMM:
	vxorpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VXORPD_YMM_YMM_M256:
	vxorpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VXORPD_YMM_YMM_YMM:
	vxorpd(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VXORPS_XMM_XMM_M128:
	vxorps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<M128>(2));
	break;
case VXORPS_XMM_XMM_XMM:
	vxorps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1), instr.get_operand<Xmm>(2));
	break;
case VXORPS_YMM_YMM_M256:
	vxorps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<M256>(2));
	break;
case VXORPS_YMM_YMM_YMM:
	vxorps(instr.get_operand<Ymm>(0), instr.get_operand<Ymm>(1), instr.get_operand<Ymm>(2));
	break;
case VZEROALL:
	vzeroall();
	break;
case VZEROUPPER:
	vzeroupper();
	break;
case WAIT:
	wait();
	break;
case WRFSBASE_R32:
	wrfsbase(instr.get_operand<R32>(0));
	break;
case WRFSBASE_R64:
	wrfsbase(instr.get_operand<R64>(0));
	break;
case WRGSBASE_R32:
	wrgsbase(instr.get_operand<R32>(0));
	break;
case WRGSBASE_R64:
	wrgsbase(instr.get_operand<R64>(0));
	break;
case XABORT_IMM8:
	xabort(instr.get_operand<Imm8>(0));
	break;
case XACQUIRE:
	xacquire();
	break;
case XADD_M16_R16:
	xadd(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case XADD_M32_R32:
	xadd(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case XADD_M64_R64:
	xadd(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case XADD_M8_R8:
	xadd(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case XADD_M8_RH:
	xadd(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case XADD_R16_R16:
	xadd(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case XADD_R32_R32:
	xadd(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case XADD_R64_R64:
	xadd(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case XADD_R8_R8:
	xadd(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case XADD_R8_RH:
	xadd(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case XADD_RH_R8:
	xadd(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case XADD_RH_RH:
	xadd(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case XBEGIN_LABEL:
	xbegin(instr.get_operand<Label>(0));
	break;
case XBEGIN_REL32:
	xbegin(instr.get_operand<Rel32>(0));
	break;
case XCHG_AX_R16:
	xchg(instr.get_operand<Ax>(0), instr.get_operand<R16>(1));
	break;
case XCHG_EAX_R32:
	xchg(instr.get_operand<Eax>(0), instr.get_operand<R32>(1));
	break;
case XCHG_M16_R16:
	xchg(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case XCHG_M32_R32:
	xchg(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case XCHG_M64_R64:
	xchg(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case XCHG_M8_R8:
	xchg(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case XCHG_M8_RH:
	xchg(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case XCHG_R16_AX:
	xchg(instr.get_operand<R16>(0), instr.get_operand<Ax>(1));
	break;
case XCHG_R16_M16:
	xchg(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case XCHG_R16_R16:
	xchg(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case XCHG_R16_R16_1:
	xchg_1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case XCHG_R32_EAX:
	xchg(instr.get_operand<R32>(0), instr.get_operand<Eax>(1));
	break;
case XCHG_R32_M32:
	xchg(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case XCHG_R32_R32:
	xchg(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case XCHG_R32_R32_1:
	xchg_1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case XCHG_R64_M64:
	xchg(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case XCHG_R64_R64:
	xchg(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case XCHG_R64_R64_1:
	xchg_1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case XCHG_R64_RAX:
	xchg(instr.get_operand<R64>(0), instr.get_operand<Rax>(1));
	break;
case XCHG_R8_M8:
	xchg(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case XCHG_R8_R8:
	xchg(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case XCHG_R8_R8_1:
	xchg_1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case XCHG_R8_RH:
	xchg(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case XCHG_R8_RH_1:
	xchg_1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case XCHG_RAX_R64:
	xchg(instr.get_operand<Rax>(0), instr.get_operand<R64>(1));
	break;
case XCHG_RH_M8:
	xchg(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case XCHG_RH_R8:
	xchg(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case XCHG_RH_R8_1:
	xchg_1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case XCHG_RH_RH:
	xchg(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case XCHG_RH_RH_1:
	xchg_1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case XEND:
	xend();
	break;
case XGETBV:
	xgetbv();
	break;
case XLAT_M8:
	xlat(instr.get_operand<M8>(0));
	break;
case XLATB:
	xlatb();
	break;
case XLATB_1:
	xlatb_1();
	break;
case XOR_AL_IMM8:
	xor_(instr.get_operand<Al>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_AX_IMM16:
	xor_(instr.get_operand<Ax>(0), instr.get_operand<Imm16>(1));
	break;
case XOR_EAX_IMM32:
	xor_(instr.get_operand<Eax>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_M16_IMM16:
	xor_(instr.get_operand<M16>(0), instr.get_operand<Imm16>(1));
	break;
case XOR_M16_IMM8:
	xor_(instr.get_operand<M16>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_M16_R16:
	xor_(instr.get_operand<M16>(0), instr.get_operand<R16>(1));
	break;
case XOR_M32_IMM32:
	xor_(instr.get_operand<M32>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_M32_IMM8:
	xor_(instr.get_operand<M32>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_M32_R32:
	xor_(instr.get_operand<M32>(0), instr.get_operand<R32>(1));
	break;
case XOR_M64_IMM32:
	xor_(instr.get_operand<M64>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_M64_IMM8:
	xor_(instr.get_operand<M64>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_M64_R64:
	xor_(instr.get_operand<M64>(0), instr.get_operand<R64>(1));
	break;
case XOR_M8_IMM8:
	xor_(instr.get_operand<M8>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_M8_R8:
	xor_(instr.get_operand<M8>(0), instr.get_operand<R8>(1));
	break;
case XOR_M8_RH:
	xor_(instr.get_operand<M8>(0), instr.get_operand<Rh>(1));
	break;
case XOR_R16_IMM16:
	xor_(instr.get_operand<R16>(0), instr.get_operand<Imm16>(1));
	break;
case XOR_R16_IMM8:
	xor_(instr.get_operand<R16>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_R16_M16:
	xor_(instr.get_operand<R16>(0), instr.get_operand<M16>(1));
	break;
case XOR_R16_R16:
	xor_(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case XOR_R16_R16_1:
	xor__1(instr.get_operand<R16>(0), instr.get_operand<R16>(1));
	break;
case XOR_R32_IMM32:
	xor_(instr.get_operand<R32>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_R32_IMM8:
	xor_(instr.get_operand<R32>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_R32_M32:
	xor_(instr.get_operand<R32>(0), instr.get_operand<M32>(1));
	break;
case XOR_R32_R32:
	xor_(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case XOR_R32_R32_1:
	xor__1(instr.get_operand<R32>(0), instr.get_operand<R32>(1));
	break;
case XOR_R64_IMM32:
	xor_(instr.get_operand<R64>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_R64_IMM8:
	xor_(instr.get_operand<R64>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_R64_M64:
	xor_(instr.get_operand<R64>(0), instr.get_operand<M64>(1));
	break;
case XOR_R64_R64:
	xor_(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case XOR_R64_R64_1:
	xor__1(instr.get_operand<R64>(0), instr.get_operand<R64>(1));
	break;
case XOR_R8_IMM8:
	xor_(instr.get_operand<R8>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_R8_M8:
	xor_(instr.get_operand<R8>(0), instr.get_operand<M8>(1));
	break;
case XOR_R8_R8:
	xor_(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case XOR_R8_R8_1:
	xor__1(instr.get_operand<R8>(0), instr.get_operand<R8>(1));
	break;
case XOR_R8_RH:
	xor_(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case XOR_R8_RH_1:
	xor__1(instr.get_operand<R8>(0), instr.get_operand<Rh>(1));
	break;
case XOR_RAX_IMM32:
	xor_(instr.get_operand<Rax>(0), instr.get_operand<Imm32>(1));
	break;
case XOR_RH_IMM8:
	xor_(instr.get_operand<Rh>(0), instr.get_operand<Imm8>(1));
	break;
case XOR_RH_M8:
	xor_(instr.get_operand<Rh>(0), instr.get_operand<M8>(1));
	break;
case XOR_RH_R8:
	xor_(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case XOR_RH_R8_1:
	xor__1(instr.get_operand<Rh>(0), instr.get_operand<R8>(1));
	break;
case XOR_RH_RH:
	xor_(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case XOR_RH_RH_1:
	xor__1(instr.get_operand<Rh>(0), instr.get_operand<Rh>(1));
	break;
case XORPD_XMM_M128:
	xorpd(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case XORPD_XMM_XMM:
	xorpd(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case XORPS_XMM_M128:
	xorps(instr.get_operand<Xmm>(0), instr.get_operand<M128>(1));
	break;
case XORPS_XMM_XMM:
	xorps(instr.get_operand<Xmm>(0), instr.get_operand<Xmm>(1));
	break;
case XRELEASE:
	xrelease();
	break;
case XRSTOR_M16:
	xrstor(instr.get_operand<M16>(0));
	break;
case XRSTOR_M32:
	xrstor(instr.get_operand<M32>(0));
	break;
case XRSTOR_M64:
	xrstor(instr.get_operand<M64>(0));
	break;
case XRSTOR64_M16:
	xrstor64(instr.get_operand<M16>(0));
	break;
case XRSTOR64_M32:
	xrstor64(instr.get_operand<M32>(0));
	break;
case XRSTOR64_M64:
	xrstor64(instr.get_operand<M64>(0));
	break;
case XSAVE_M16:
	xsave(instr.get_operand<M16>(0));
	break;
case XSAVE_M32:
	xsave(instr.get_operand<M32>(0));
	break;
case XSAVE_M64:
	xsave(instr.get_operand<M64>(0));
	break;
case XSAVE64_M16:
	xsave64(instr.get_operand<M16>(0));
	break;
case XSAVE64_M32:
	xsave64(instr.get_operand<M32>(0));
	break;
case XSAVE64_M64:
	xsave64(instr.get_operand<M64>(0));
	break;
case XSAVEOPT_M16:
	xsaveopt(instr.get_operand<M16>(0));
	break;
case XSAVEOPT_M32:
	xsaveopt(instr.get_operand<M32>(0));
	break;
case XSAVEOPT_M64:
	xsaveopt(instr.get_operand<M64>(0));
	break;
case XSAVEOPT64_M16:
	xsaveopt64(instr.get_operand<M16>(0));
	break;
case XSAVEOPT64_M32:
	xsaveopt64(instr.get_operand<M32>(0));
	break;
case XSAVEOPT64_M64:
	xsaveopt64(instr.get_operand<M64>(0));
	break;
case XTEST:
	xtest();
	break;
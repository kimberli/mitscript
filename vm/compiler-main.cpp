/*
 * compiler-main.cpp
 *
 * Main file used to make the MITScript compiler (takes in MITScript
 * source code, generates a root bytecode function, and pretty-prints the
 * generated bytecode)
 */
#include "../parser/parser.h"
#include "../parser/lexer.h"
#include <iostream>
#include "prettyprinter.h"
#include "compiler.h"
#include "../gc/gc.h"

using namespace std;

int main(int argc, char** argv)
{
    void* scanner;
    yylex_init(&scanner);

    if (argc < 2) {
        cout << "Expecting file name as argument" << endl;
        return 1;
    }
    FILE* infile = fopen(argv[1], "r");
    if (infile == NULL) {
        cout << "Cannot open file " << argv[1] << endl;
        return 1;
    }
    yyset_in(infile, scanner);

    Block* output;
    int rvalue = yyparse(scanner, output);
    if (rvalue == 1) {
        cout << "Parsing MITScript failed" << endl;
        return 1;
    }

    CollectedHeap* collector = new CollectedHeap(100000);
    BytecodeCompiler* bc = new BytecodeCompiler(collector);

    try {
        funcptr_t rootFunc = bc->evaluate(*output);
        PrettyPrinter printer;
        printer.print(*rootFunc, std::cout);
    } catch (InterpreterException& exception) {
        cout << exception.toString() << endl;
        return 1;
    }

    return 0;
}

function
{
	functions =
	[
		function
		{
			functions = [],
			constants = [],
			parameter_count = 2,
			local_vars = [left, right],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
				load_local	0
				load_local	1
				add
				return
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 2,
			local_vars = [left, right],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
				load_local	0
				load_local	1
				sub
				return
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 2,
			local_vars = [left, right],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
				load_local	0
				load_local	1
				mul
				return
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 2,
			local_vars = [left, right],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
				load_local	0
				load_local	1
				div
				return
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [x],
			local_ref_vars = [],
			free_vars = [],
			names = [x],
			instructions = 
			[
				load_global	0
				return
			]
		},
		function
		{
			functions = [],
			constants = [1, 5, 17],
			parameter_count = 1,
			local_vars = [end, c, x, y],
			local_ref_vars = [],
			free_vars = [],
			names = [print],
			instructions = 
			[
				load_const	1
				store_local	2
				load_const	2
				store_local	1
				load_local	2
				load_local	1
				add
				store_local	3
				load_local	3
				load_local	0
				gt
				if	2
				goto	10
				load_local	3
				load_const	0
				load_global	0
				call
				load_local	3
				load_const	0
				sub
				store_local	3
				goto	-13
				load_local	3
				return
			]
		}
	],
	constants = [2, 4, 5, 7, 8, 10, 15, 20, 27, 50, 100, " != ", "All is well :D", "Function failed, ", "testGlobals", 0, 1],
	parameter_count = 0,
	local_vars = [],
	local_ref_vars = [],
	free_vars = [],
	names = [addd, divide, doLoop, input, intcast, mathLib, multiply, myEnd, print, result, subRec, subtract, testGlobals, x],
	instructions = 
	[
		load_const	15
		load_func	0
		alloc_closure
		store_global	8
		load_const	15
		load_func	1
		alloc_closure
		store_global	3
		load_const	15
		load_func	2
		alloc_closure
		store_global	4
		alloc_record
		dup
		load_const	15
		load_func	3
		alloc_closure
		field_store	0
		dup
		load_const	15
		load_func	4
		alloc_closure
		field_store	11
		dup
		load_const	15
		load_func	5
		alloc_closure
		field_store	6
		dup
		load_const	15
		load_func	6
		alloc_closure
		field_store	1
		dup
		alloc_record
		dup
		load_const	15
		load_func	7
		alloc_closure
		field_store	12
		field_store	10
		store_global	5
		load_global	5
		load_const	16
		load_global	8
		call
		load_const	15
		load_func	8
		alloc_closure
		store_global	2
		load_const	1
		store_global	7
		load_global	7
		load_const	16
		load_global	2
		call
		store_global	9
		load_global	9
		load_global	7
		eq
		not
		load_const	5
		load_const	2
		load_const	0
		load_global	5
		field_load	1
		call
		load_const	5
		load_const	2
		div
		eq
		and
		load_const	10
		load_const	9
		load_const	0
		load_global	5
		field_load	6
		call
		load_const	9
		load_const	10
		mul
		eq
		and
		if	2
		goto	12
		load_const	13
		load_global	9
		add
		load_const	11
		add
		load_global	7
		add
		load_const	16
		load_global	8
		call
		goto	5
		load_const	12
		load_const	16
		load_global	8
		call
		load_const	3
		load_const	4
		load_const	0
		load_global	5
		field_load	0
		call
		load_const	6
		eq
		load_const	16
		load_global	8
		call
		load_const	0
		load_const	3
		load_const	0
		load_global	5
		field_load	11
		call
		load_const	2
		neg
		eq
		load_const	16
		load_global	8
		call
		load_const	8
		store_global	13
		load_global	13
		neg
		load_const	7
		sub
		load_const	16
		load_global	2
		call
		load_const	16
		load_global	5
		field_load	10
		load_const	14
		index_load
		call
		load_const	16
		load_global	8
		call
	]
}